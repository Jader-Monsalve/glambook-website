---
// Component for dynamically loading testimonials
---

<div id="testimonios-section">
  <!-- Grid de testimonios -->
  <div id="testimonios-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
    <!-- Loading skeleton -->
    <div class="bg-white rounded-lg p-6 shadow-lg animate-pulse">
      <div class="h-4 bg-gray-200 rounded mb-4"></div>
      <div class="h-16 bg-gray-200 rounded mb-4"></div>
      <div class="flex items-center">
        <div class="w-10 h-10 bg-gray-200 rounded-full mr-3"></div>
        <div class="flex-1">
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-3 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
    
    <div class="bg-white rounded-lg p-6 shadow-lg animate-pulse">
      <div class="h-4 bg-gray-200 rounded mb-4"></div>
      <div class="h-16 bg-gray-200 rounded mb-4"></div>
      <div class="flex items-center">
        <div class="w-10 h-10 bg-gray-200 rounded-full mr-3"></div>
        <div class="flex-1">
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-3 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
    
    <div class="bg-white rounded-lg p-6 shadow-lg animate-pulse">
      <div class="h-4 bg-gray-200 rounded mb-4"></div>
      <div class="h-16 bg-gray-200 rounded mb-4"></div>
      <div class="flex items-center">
        <div class="w-10 h-10 bg-gray-200 rounded-full mr-3"></div>
        <div class="flex-1">
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-3 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Funci√≥n para generar estrellas
  function generarEstrellas(calificacion: number): string {
    return '‚≠ê'.repeat(calificacion);
  }

  // Funci√≥n para formatear fecha
  function formatearFecha(fecha: string): string {
    const date = new Date(fecha);
    return date.toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }

  // Funci√≥n para obtener descripci√≥n del servicio
  function getDescripcionServicio(servicio?: string): string {
    const servicios: Record<string, string> = {
      maquillaje: "Maquillaje profesional",
      unas: "Dise√±o de u√±as",
      cejas: "Dise√±o de cejas",
      pestanas: "Extensiones de pesta√±as",
      facial: "Tratamiento facial",
      otro: "Otro servicio"
    };
    
    return servicios[servicio || ''] || "Cliente";
  }

  // Funci√≥n para cargar testimonios din√°micamente
  async function cargarTestimonios() {
    try {
      const response = await fetch('/api/testimonios?action=aprobados');
      const result = await response.json();
      const testimonios = result.success ? result.data : [];
      
      const testimoniosGrid = document.getElementById('testimonios-grid');
      if (!testimoniosGrid) return;
      
      if (testimonios.length === 0) {
        testimoniosGrid.innerHTML = `
          <div class="col-span-full text-center py-12">
            <div class="text-6xl mb-4">üíÑ</div>
            <h3 class="text-xl font-semibold text-gray-800 mb-2 font-poppins">
              ¬°S√© la primera en compartir tu experiencia!
            </h3>
            <p class="text-gray-600 font-poppins">
              A√∫n no tenemos testimonios, pero nos encantar√≠a conocer tu opini√≥n.
            </p>
          </div>
        `;
        return;
      }
      
      lastTestimoniosCount = testimonios.length;
      testimoniosUpdateTime = Date.now();
      mostrarIndicadorTiempoReal();
      
      testimoniosGrid.innerHTML = testimonios.map((testimonio: any) => `
        <div class="bg-white rounded-lg p-6 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 animate-fade-in">
          <div class="text-yellow-400 text-xl mb-4">${generarEstrellas(testimonio.calificacion)}</div>
          <p class="text-gray-600 mb-4 font-poppins leading-relaxed">
            "${testimonio.comentario}"
          </p>
          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <div class="w-10 h-10 bg-gradient-to-br from-pink-200 to-purple-200 rounded-full flex items-center justify-center mr-3">
                ${testimonio.avatar}
              </div>
              <div>
                <p class="font-semibold text-gray-800 font-poppins">${testimonio.nombre}</p>
                <p class="text-gray-500 text-sm font-poppins">${getDescripcionServicio(testimonio.servicio)}</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-xs text-gray-400 font-poppins">${formatearFecha(testimonio.fecha)}</p>
              ${testimonio.servicio ? `
                <span class="inline-block bg-pink-100 text-pink-600 text-xs px-2 py-1 rounded-full mt-1 font-poppins">
                  ${getDescripcionServicio(testimonio.servicio)}
                </span>
              ` : ''}
            </div>
          </div>
        </div>
      `).join('');
      
    } catch (error) {
      console.error('Error cargando testimonios:', error);
      const testimoniosGrid = document.getElementById('testimonios-grid');
      if (testimoniosGrid) {
        testimoniosGrid.innerHTML = `
          <div class="col-span-full text-center py-12">
            <div class="text-6xl mb-4">üòî</div>
            <h3 class="text-xl font-semibold text-gray-800 mb-2 font-poppins">
              Error al cargar testimonios
            </h3>
            <p class="text-gray-600 font-poppins">
              No pudimos cargar los testimonios en este momento.
            </p>
          </div>
        `;
      }
    }
  }

  // Variables para tiempo real
  let lastTestimoniosCount = 0;
  let testimoniosUpdateTime = Date.now();

  // Cargar testimonios cuando se carga la p√°gina
  document.addEventListener('DOMContentLoaded', async () => {
    await cargarTestimonios();
    mostrarIndicadorTiempoReal();
  });
  
  // Recargar testimonios cada 30 segundos para mostrar nuevos testimonios aprobados
  setInterval(async () => {
    try {
      console.log('üîÑ Actualizando testimonios p√∫blicos...');
      const previousCount = lastTestimoniosCount;
      await cargarTestimonios();
      
      // Mostrar notificaci√≥n si hay nuevos testimonios
      if (lastTestimoniosCount > previousCount && previousCount > 0) {
        mostrarNotificacionTestimonios('‚ú® Nuevos testimonios disponibles');
      }
    } catch (error) {
      console.error('Error actualizando testimonios:', error);
    }
  }, 30000);

  // Funci√≥n para mostrar indicador de tiempo real
  function mostrarIndicadorTiempoReal() {
    const section = document.getElementById('testimonios-section');
    if (section && !document.getElementById('tiempo-real-indicator')) {
      const indicator = document.createElement('div');
      indicator.id = 'tiempo-real-indicator';
      indicator.className = 'text-center mb-4';
      indicator.innerHTML = `
        <div class="inline-flex items-center bg-green-50 text-green-700 px-3 py-2 rounded-full text-sm font-poppins">
          <div class="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
          Testimonios actualizados en tiempo real
          <span id="ultima-actualizacion-publica" class="ml-2 text-xs text-green-600"></span>
        </div>
      `;
      section.insertBefore(indicator, section.firstChild);
    }
    
    // Actualizar tiempo
    const timeElement = document.getElementById('ultima-actualizacion-publica');
    if (timeElement) {
      const time = new Date().toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit'
      });
      timeElement.textContent = `(${time})`;
    }
  }

  // Funci√≥n para mostrar notificaciones temporales
  function mostrarNotificacionTestimonios(mensaje: string) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 font-poppins animate-fade-in';
    notification.textContent = mensaje;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.classList.add('animate-fade-out');
      setTimeout(() => document.body.removeChild(notification), 300);
    }, 3000);
  }
</script>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in {
    animation: fade-in 0.5s ease-out;
  }
  
  .animate-fade-out {
    animation: fade-out 0.3s ease-in;
  }
  
  @keyframes fade-out {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }
</style>