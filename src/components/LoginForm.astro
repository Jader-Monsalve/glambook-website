---
// Componente de login para administradores
---

<div id="login-form" class="w-full max-w-md mx-auto flex flex-col justify-center items-center bg-white/10 backdrop-blur-md rounded-3xl shadow-2xl p-6 xs:p-8 border border-white/20 min-h-[400px]">
  <!-- Header del formulario -->
  <div class="text-center mb-8">
    <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-pink-500/20 to-purple-500/20 rounded-2xl mb-4 border border-white/30">
      <span class="text-2xl">üîê</span>
    </div>
    <h2 class="text-2xl font-bold text-white font-poppins mb-2">Iniciar Sesi√≥n</h2>
    <p class="text-gray-300 font-poppins">Panel de administraci√≥n seguro</p>
  </div>
  
  <form id="auth-form" class="space-y-6">
    <!-- Email Field -->
    <div class="space-y-2">
      <label for="email" class="block text-sm font-medium text-gray-200 font-poppins">
        <span class="flex items-center space-x-2">
          <span>üë§</span>
          <span>Email de Administrador</span>
        </span>
      </label>
      <div class="relative">
        <input
          type="email"
          id="email"
          name="email"
          required
          class="w-full px-4 py-4 bg-white/10 border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-pink-500/50 focus:border-pink-500/50 font-poppins text-white placeholder-gray-300 backdrop-blur-sm transition-all duration-300"
          placeholder="admin@glambook.com"
        />
        <div class="absolute inset-y-0 right-0 pr-4 flex items-center">
          <div id="email-check" class="hidden text-green-400">‚úì</div>
        </div>
      </div>
    </div>
    
    <!-- Password Field -->
    <div class="space-y-2">
      <label for="password" class="block text-sm font-medium text-gray-200 font-poppins">
        <span class="flex items-center space-x-2">
          <span>üîí</span>
          <span>Contrase√±a</span>
        </span>
      </label>
      <div class="relative">
        <input
          type="password"
          id="password"
          name="password"
          required
          class="w-full px-4 py-4 bg-white/10 border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-pink-500/50 focus:border-pink-500/50 font-poppins text-white placeholder-gray-300 backdrop-blur-sm transition-all duration-300"
          placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
        />
        <button
          type="button"
          id="toggle-password"
          class="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-300 hover:text-white transition-colors duration-300"
        >
          <span id="eye-icon">üëÅÔ∏è</span>
        </button>
      </div>
    </div>
    
    <!-- Remember me -->
    <div class="flex items-center justify-between">
      <label class="flex items-center space-x-2 text-sm text-gray-300 font-poppins">
        <input type="checkbox" id="remember-me" class="rounded bg-white/10 border-white/30 text-pink-500 focus:ring-pink-500/50">
        <span>Recordarme</span>
      </label>
    </div>

    <!-- Error Message -->
    <div id="error-message" class="hidden bg-red-500/20 border border-red-400/50 text-red-200 px-4 py-3 rounded-xl font-poppins text-sm backdrop-blur-sm">
    </div>
    
    <!-- Success Message -->
    <div id="success-message" class="hidden bg-green-500/20 border border-green-400/50 text-green-200 px-4 py-3 rounded-xl font-poppins text-sm backdrop-blur-sm">
    </div>
    
    <!-- Login Button -->
    <button
      type="submit"
      id="login-btn"
      class="w-full bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white font-bold py-4 px-6 rounded-xl transition-all duration-300 font-poppins flex items-center justify-center gap-2 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50 disabled:transform-none"
    >
      <span id="login-text">Iniciar Sesi√≥n</span>
      <div id="login-spinner" class="hidden animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
    </button>
  </form>
  
  <!-- Enlaces adicionales -->
  <div class="mt-6 space-y-4">
    <!-- Reset Password -->
    <div class="text-center">
      <button
        id="reset-password-btn"
        type="button"
        class="text-sm text-gray-300 hover:text-pink-400 font-poppins transition-colors duration-300 flex items-center justify-center space-x-2 mx-auto"
      >
        <span>üîë</span>
        <span>¬øOlvidaste tu contrase√±a?</span>
      </button>
    </div>
    
    <!-- Divider -->
    <div class="flex items-center space-x-4">
      <div class="flex-1 h-px bg-white/20"></div>
      <span class="text-xs text-gray-400 font-poppins">Credenciales por defecto</span>
      <div class="flex-1 h-px bg-white/20"></div>
    </div>
    
    <!-- Default Credentials Info -->
    <div class="bg-white/5 rounded-xl p-4 text-center space-y-2">
      <p class="text-xs text-gray-400 font-poppins">Para pruebas usa:</p>
      <div class="space-y-1 text-xs text-gray-300 font-mono">
        <p>Email: admin@glambook.com</p>
        <p>Contrase√±a: admin123</p>
      </div>
    </div>
  </div>
  
  <!-- Mensaje de √©xito para reset de contrase√±a -->
  <div id="reset-success" class="hidden mt-4 bg-green-500/20 border border-green-400/50 text-green-200 px-4 py-3 rounded-xl font-poppins text-sm backdrop-blur-sm">
    Se ha enviado un enlace para resetear tu contrase√±a a tu email.
  </div>
</div>

<style>
  /* Glassmorphism effects */
  .backdrop-blur-md {
    backdrop-filter: blur(12px);
  }
  
  .backdrop-blur-sm {
    backdrop-filter: blur(6px);
  }
  
  /* Input focus effects */
  input:focus {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
  
  /* Button hover effects */
  button:hover:not(:disabled) {
    transform: translateY(-1px);
  }
  
  /* Custom checkbox */
  input[type="checkbox"] {
    appearance: none;
    width: 1rem;
    height: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 0.25rem;
    background: rgba(255, 255, 255, 0.1);
    position: relative;
  }
  
  input[type="checkbox"]:checked {
    background: #ec4899;
    border-color: #ec4899;
  }
  
  input[type="checkbox"]:checked::after {
    content: '‚úì';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 0.75rem;
    font-weight: bold;
  }
  
  /* Animation for form elements */
  .animate-fade-in {
    animation: fadeIn 0.6s ease-out forwards;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Spinner animation */
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  /* Form validation states */
  .border-green-400\/50 {
    border-color: rgba(34, 197, 94, 0.5);
  }
  
  /* Responsive improvements */
  @media (max-width: 640px) {
    #login-form {
      margin: 1rem;
      padding: 1.5rem;
    }
  }
  
  /* Background effects for the login page */
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
</style>

<script>
  // @ts-ignore - Importaci√≥n de Firebase para login
  // Importaci√≥n directa de Firebase para evitar problemas de tipos
import { 
  auth, 
  signInWithEmailAndPassword,
  sendPasswordResetEmail
} from '../firebase.js';

  // @ts-ignore - Definir tipos para evitar errores impl√≠citos
  const firebaseAuth = auth;
  const signInFn = signInWithEmailAndPassword;
  const resetPasswordFn = sendPasswordResetEmail;
  
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('auth-form') as HTMLFormElement;
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const passwordInput = document.getElementById('password') as HTMLInputElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;
    const loginBtn = document.getElementById('login-btn') as HTMLButtonElement;
    const loginText = document.getElementById('login-text') as HTMLElement;
    const loginSpinner = document.getElementById('login-spinner') as HTMLElement;
    const resetPasswordBtn = document.getElementById('reset-password-btn') as HTMLButtonElement;
    const resetSuccess = document.getElementById('reset-success') as HTMLElement;
    const togglePassword = document.getElementById('toggle-password') as HTMLButtonElement;
    const eyeIcon = document.getElementById('eye-icon') as HTMLElement;
    const emailCheck = document.getElementById('email-check') as HTMLElement;
    const rememberMe = document.getElementById('remember-me') as HTMLInputElement;
    
    if (!form) return;

    // Toggle password visibility
    if (togglePassword && eyeIcon) {
      togglePassword.addEventListener('click', () => {
        const isPassword = passwordInput.type === 'password';
        passwordInput.type = isPassword ? 'text' : 'password';
        eyeIcon.textContent = isPassword ? 'üôà' : 'üëÅÔ∏è';
      });
    }

    // Email validation
    if (emailInput && emailCheck) {
      emailInput.addEventListener('input', () => {
        const isValid = emailInput.validity.valid && emailInput.value.includes('@');
        if (isValid && emailInput.value.length > 0) {
          emailCheck.classList.remove('hidden');
          emailInput.classList.add('border-green-400/50');
        } else {
          emailCheck.classList.add('hidden');
          emailInput.classList.remove('border-green-400/50');
        }
      });
    }

    // Load saved credentials
    if (rememberMe && localStorage.getItem('glambook_remember') === 'true') {
      rememberMe.checked = true;
      const savedEmail = localStorage.getItem('glambook_email');
      if (savedEmail && emailInput) {
        emailInput.value = savedEmail;
      }
    }
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = emailInput.value.trim();
      const password = passwordInput.value;
      
      if (!email || !password) {
        showError('Por favor completa todos los campos');
        return;
      }
      
      try {
        // Mostrar loading
        setLoading(true);
        hideError();
        hideSuccess();

        // Usar Firebase Authentication directamente
        const userCredential = await signInFn(firebaseAuth, email, password);
        const user = userCredential.user;

        // Guardar credenciales si est√° marcado
        if (rememberMe?.checked) {
          localStorage.setItem('glambook_remember', 'true');
          localStorage.setItem('glambook_email', email);
        } else {
          localStorage.removeItem('glambook_remember');
          localStorage.removeItem('glambook_email');
        }

        // Establecer autenticaci√≥n con datos reales de Firebase
        localStorage.setItem('glambook_auth', 'true');
        localStorage.setItem('glambook_user', JSON.stringify({ 
          uid: user.uid,
          email: user.email,
          displayName: user.displayName
        }));

        // Mostrar √©xito
        showSuccess('¬°Acceso autorizado! Redirigiendo...');

        // Obtener la URL de redirecci√≥n o usar dashboard por defecto
        const urlParams = new URLSearchParams(window.location.search);
        const redirect = urlParams.get('redirect');
        const redirectUrl = redirect ? `/${redirect}` : '/admin';

        // Redirigir al panel admin
        setTimeout(() => {
          window.location.href = redirectUrl;
        }, 1500);

      } catch (error) {
        setLoading(false);
        let errorMsg = 'Error al iniciar sesi√≥n';
        if (error && typeof error === 'object') {
          switch (error.code) {
            case 'auth/user-not-found':
              errorMsg = 'El usuario no existe.';
              break;
            case 'auth/wrong-password':
              errorMsg = 'Contrase√±a incorrecta.';
              break;
            case 'auth/invalid-email':
              errorMsg = 'El email ingresado no es v√°lido.';
              break;
            case 'auth/too-many-requests':
              errorMsg = 'Demasiados intentos. Intenta de nuevo m√°s tarde.';
              break;
            case 'auth/network-request-failed':
              errorMsg = 'Error de red. Verifica tu conexi√≥n a internet.';
              break;
            default:
              if (error.message) {
                errorMsg = error.message;
              }
          }
        }
        showError(errorMsg);
      }
    });

    // Firebase Authentication implementado arriba - funci√≥n ya no necesaria
    
    // Funcionalidad para resetear contrase√±a
    if (resetPasswordBtn) {
      resetPasswordBtn.addEventListener('click', async () => {
        const email = emailInput.value.trim();
        
        if (!email) {
          showError('Por favor ingresa tu email primero');
          emailInput.focus();
          return;
        }
        
        try {
          resetPasswordBtn.textContent = 'Enviando...';
          resetPasswordBtn.disabled = true;
          hideError();
          
          await resetPasswordFn(firebaseAuth, email);
          
          // Mostrar mensaje de √©xito
          if (resetSuccess) {
            resetSuccess.classList.remove('hidden');
          }
          
          // Ocultar despu√©s de 5 segundos
          setTimeout(() => {
            if (resetSuccess) {
              resetSuccess.classList.add('hidden');
            }
          }, 5000);
          
        } catch (error: any) {
          showError(error.message || 'Error al enviar email de recuperaci√≥n');
        } finally {
          resetPasswordBtn.textContent = '¬øOlvidaste tu contrase√±a?';
          resetPasswordBtn.disabled = false;
        }
      });
    }
    
    function showError(message: string) {
      if (errorMessage) {
        errorMessage.innerHTML = `
          <div class="flex items-center space-x-2">
            <span class="text-lg">‚ùå</span>
            <span>${message}</span>
          </div>
        `;
        errorMessage.classList.remove('hidden');
        // Auto hide after 5 seconds
        setTimeout(() => hideError(), 5000);
      }
    }
    
    function hideError() {
      if (errorMessage) {
        errorMessage.classList.add('hidden');
      }
    }

    function showSuccess(message: string) {
      if (successMessage) {
        successMessage.innerHTML = `
          <div class="flex items-center space-x-2">
            <span class="text-lg">‚úÖ</span>
            <span>${message}</span>
          </div>
        `;
        successMessage.classList.remove('hidden');
      }
    }
    
    function hideSuccess() {
      if (successMessage) {
        successMessage.classList.add('hidden');
      }
    }
    
    function setLoading(loading: boolean) {
      if (loading) {
        loginBtn.disabled = true;
        loginText.textContent = 'Verificando acceso...';
        loginSpinner.classList.remove('hidden');
        loginBtn.classList.add('opacity-75');
      } else {
        loginBtn.disabled = false;
        loginText.textContent = 'Iniciar Sesi√≥n';
        loginSpinner.classList.add('hidden');
        loginBtn.classList.remove('opacity-75');
      }
    }
  });
</script>