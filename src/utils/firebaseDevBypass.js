// Firebase Development Bypass
// This creates a temporary anonymous authentication to bypass security rules
// src/utils/firebaseDevBypass.js

import { auth, db } from '../firebase.js';
import { signInAnonymously, onAuthStateChanged } from 'firebase/auth';

export class FirebaseDevBypass {
  
  static async ensureAuthenticated() {
    return new Promise((resolve, reject) => {
      console.log('üîß Verificando autenticaci√≥n para bypass...');
      
      // Verificar si ya est√° autenticado
      const unsubscribe = onAuthStateChanged(auth, async (user) => {
        unsubscribe(); // Limpiar el listener
        
        if (user) {
          console.log('‚úÖ Usuario ya autenticado:', user.uid);
          resolve(user);
        } else {
          try {
            console.log('üîê Creando sesi√≥n an√≥nima para desarrollo...');
            const userCredential = await signInAnonymously(auth);
            console.log('‚úÖ Sesi√≥n an√≥nima creada:', userCredential.user.uid);
            resolve(userCredential.user);
          } catch (error) {
            console.error('‚ùå Error creando sesi√≥n an√≥nima:', error);
            reject(error);
          }
        }
      });
      
      // Timeout despu√©s de 10 segundos
      setTimeout(() => {
        unsubscribe();
        reject(new Error('Timeout en autenticaci√≥n'));
      }, 10000);
    });
  }
  
  static async initializeWithAuth() {
    try {
      // Asegurar autenticaci√≥n antes de cualquier operaci√≥n Firestore
      await this.ensureAuthenticated();
      console.log('‚úÖ Firebase listo con autenticaci√≥n');
      return true;
    } catch (error) {
      console.error('‚ùå Error inicializando Firebase con auth:', error);
      return false;
    }
  }
}

export default FirebaseDevBypass;