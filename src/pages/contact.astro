---
import Layout from '../layouts/Layout.astro';
const title = "Contacto - GlamBook";
---

<Layout title={title}>
  <!-- Spacer para el navbar fixed -->
  <div class="h-16 sm:h-20 lg:h-24"></div>
  
  <section class="py-8 xs:py-10 sm:py-12 lg:py-16 bg-gradient-to-br from-pink-50 to-purple-50 min-h-screen">
    <div class="container mx-auto px-4 xs:px-6 lg:px-8 xl:px-12">
      
      <!-- T√≠tulo Principal -->
      <div class="text-center mb-12 xs:mb-14 sm:mb-16 lg:mb-20">
        <div class="inline-block p-2 bg-pink-100 rounded-full mb-4 lg:mb-6">
          <span class="text-2xl lg:text-3xl">üíå</span>
        </div>
        <h1 class="text-3xl xs:text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-bold text-gray-800 mb-4 lg:mb-6 font-poppins leading-tight">
          Cont√°ctanos
        </h1>
        <p class="text-gray-600 text-base xs:text-lg sm:text-xl lg:text-2xl font-poppins leading-relaxed max-w-3xl mx-auto">
          Estamos aqu√≠ para ayudarte. Reserva tu cita o preg√∫ntanos lo que necesites
        </p>
        
        <!-- Decoraci√≥n -->
        <div class="flex items-center justify-center mt-6 lg:mt-8 space-x-2">
          <div class="w-16 h-0.5 bg-pink-300"></div>
          <div class="w-2 h-2 bg-pink-400 rounded-full"></div>
          <div class="w-8 h-0.5 bg-pink-300"></div>
        </div>
      </div>

      <!-- Contenido Principal -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 xs:gap-14 sm:gap-16 lg:gap-20 max-w-7xl mx-auto">
        
        <!-- Informaci√≥n de contacto -->
        <div class="space-y-8 xs:space-y-10 lg:space-y-12">
          <div class="text-center lg:text-left">
            <h2 class="text-2xl xs:text-3xl lg:text-4xl font-bold text-gray-800 font-poppins mb-3">
              Informaci√≥n de Contacto
            </h2>
            <p class="text-gray-600 font-poppins text-lg">
              M√∫ltiples formas de comunicarte con nosotros
            </p>
          </div>
          
          <!-- Cards de Informaci√≥n -->
          <div class="space-y-6">
            
            <!-- Direcci√≥n -->
            <div class="bg-white rounded-2xl p-6 lg:p-8 shadow-lg hover:shadow-xl transition-all duration-300 border border-pink-100 hover:border-pink-200 group">
              <div class="flex items-start space-x-4 lg:space-x-6">
                <div class="bg-gradient-to-br from-pink-500 to-pink-600 text-white p-4 rounded-xl flex-shrink-0 group-hover:scale-110 transition-transform duration-300">
                  <span class="text-xl">üìç</span>
                </div>
                <div class="flex-1">
                  <h3 class="font-bold text-gray-800 font-poppins text-lg lg:text-xl mb-2">Direcci√≥n</h3>
                  <p class="text-gray-600 font-poppins text-base lg:text-lg leading-relaxed">
                    Calle Principal #123<br>
                    Barrio Centro, Ciudad<br>
                    <span class="text-pink-600 font-medium">üó∫Ô∏è Ver en mapa</span>
                  </p>
                </div>
              </div>
            </div>

            <!-- Tel√©fono -->
            <div class="bg-white rounded-2xl p-6 lg:p-8 shadow-lg hover:shadow-xl transition-all duration-300 border border-pink-100 hover:border-pink-200 group">
              <div class="flex items-start space-x-4 lg:space-x-6">
                <div class="bg-gradient-to-br from-green-500 to-green-600 text-white p-4 rounded-xl flex-shrink-0 group-hover:scale-110 transition-transform duration-300">
                  <span class="text-xl">üìû</span>
                </div>
                <div class="flex-1">
                  <h3 class="font-bold text-gray-800 font-poppins text-lg lg:text-xl mb-2">Tel√©fono</h3>
                  <p class="text-gray-600 font-poppins text-base lg:text-lg">
                    <a href="tel:+573006997396" class="text-green-600 font-medium hover:text-green-700 transition-colors">
                      +57 300 699 7396
                    </a>
                  </p>
                  <p class="text-sm text-gray-500 mt-1">WhatsApp disponible</p>
                </div>
              </div>
            </div>

            <!-- Email -->
            <div class="bg-white rounded-2xl p-6 lg:p-8 shadow-lg hover:shadow-xl transition-all duration-300 border border-pink-100 hover:border-pink-200 group">
              <div class="flex items-start space-x-4 lg:space-x-6">
                <div class="bg-gradient-to-br from-purple-500 to-purple-600 text-white p-4 rounded-xl flex-shrink-0 group-hover:scale-110 transition-transform duration-300">
                  <span class="text-xl">‚úâÔ∏è</span>
                </div>
                <div class="flex-1">
                  <h3 class="font-bold text-gray-800 font-poppins text-lg lg:text-xl mb-2">Email</h3>
                  <p class="text-gray-600 font-poppins text-base lg:text-lg">
                    <a href="mailto:info@glambook.com" class="text-purple-600 font-medium hover:text-purple-700 transition-colors">
                      info@glambook.com
                    </a>
                  </p>
                  <p class="text-sm text-gray-500 mt-1">Respuesta en 24 horas</p>
                </div>
              </div>
            </div>

            <!-- Horarios -->
            <div class="bg-white rounded-2xl p-6 lg:p-8 shadow-lg hover:shadow-xl transition-all duration-300 border border-pink-100 hover:border-pink-200 group">
              <div class="flex items-start space-x-4 lg:space-x-6">
                <div class="bg-gradient-to-br from-orange-500 to-orange-600 text-white p-4 rounded-xl flex-shrink-0 group-hover:scale-110 transition-transform duration-300">
                  <span class="text-xl">üïí</span>
                </div>
                <div class="flex-1">
                  <h3 class="font-bold text-gray-800 font-poppins text-lg lg:text-xl mb-2">Horarios de Atenci√≥n</h3>
                  <div class="space-y-2 text-gray-600 font-poppins text-base lg:text-lg">
                    <div class="flex justify-between">
                      <span>Lunes - Viernes:</span>
                      <span class="font-medium">9:00 AM - 7:00 PM</span>
                    </div>
                    <div class="flex justify-between">
                      <span>S√°bados:</span>
                      <span class="font-medium">9:00 AM - 5:00 PM</span>
                    </div>
                    <div class="flex justify-between">
                      <span>Domingos:</span>
                      <span class="font-medium text-red-500">Cerrado</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Formulario de contacto -->
        <div class="bg-white rounded-2xl shadow-2xl p-8 xs:p-10 lg:p-12 border border-pink-100">
          <div class="text-center lg:text-left mb-8">
            <div class="inline-block p-3 bg-pink-100 rounded-full mb-4">
              <span class="text-2xl">‚ú®</span>
            </div>
            <h2 class="text-2xl xs:text-3xl lg:text-4xl font-bold text-gray-800 mb-3 font-poppins">
              Reserva tu Cita
            </h2>
            <p class="text-gray-600 font-poppins text-lg">
              Elige entre enviar un mensaje o reservar directamente
            </p>
          </div>
          
          <!-- Pesta√±as Mejoradas -->
          <div class="flex bg-gray-50 rounded-2xl p-2 mb-8 xs:mb-10">
            <button 
              id="tab-mensaje"
              onclick="cambiarTab('mensaje')"
              class="tab-btn flex-1 py-3 px-4 text-center font-poppins rounded-xl font-medium transition-all duration-300 bg-white shadow-md text-pink-600 border-2 border-pink-200"
            >
              <span class="flex items-center justify-center space-x-2">
                <span class="text-lg">üí¨</span>
                <span class="hidden sm:inline">Enviar Mensaje</span>
                <span class="sm:hidden">Mensaje</span>
              </span>
            </button>
            <button 
              id="tab-cita"
              onclick="cambiarTab('cita')"
              class="tab-btn flex-1 py-3 px-4 text-center font-poppins rounded-xl font-medium transition-all duration-300 text-gray-600 hover:text-gray-800 hover:bg-white/50"
            >
              <span class="flex items-center justify-center space-x-2">
                <span class="text-lg">üìÖ</span>
                <span class="hidden sm:inline">Reservar Cita</span>
                <span class="sm:hidden">Cita</span>
              </span>
            </button>
          </div>

          <!-- Formulario de mensaje -->
          <div id="form-mensaje" class="tab-content">
            <!-- Tipo de mensaje -->
            <div class="flex flex-wrap gap-2 mb-6 justify-center">
              <button 
                type="button"
                onclick="cambiarTipoMensaje('consulta')"
                id="tipo-consulta"
                class="tipo-mensaje-btn bg-pink-500 text-white px-4 py-2 rounded-lg font-poppins text-sm"
              >
                üí¨ Consulta General
              </button>
              <button 
                type="button"
                onclick="cambiarTipoMensaje('testimonio')"
                id="tipo-testimonio"
                class="tipo-mensaje-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-poppins text-sm"
              >
                ‚≠ê Enviar Testimonio
              </button>
            </div>

            <!-- Formulario Consulta -->
            <form id="form-consulta" class="space-y-6">
              <!-- Nombre -->
              <div>
                <label for="consulta-nombre" class="block text-gray-700 font-medium mb-2 font-poppins">Nombre</label>
                <input 
                  type="text" 
                  id="consulta-nombre" 
                  name="nombre" 
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                  placeholder="Tu nombre completo"
                >
              </div>

              <!-- Email -->
              <div>
                <label for="consulta-email" class="block text-gray-700 font-medium mb-2 font-poppins">Email</label>
                <input 
                  type="email" 
                  id="consulta-email" 
                  name="email" 
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                  placeholder="tu@email.com"
                >
              </div>

              <!-- Servicio -->
              <div>
                <label for="consulta-servicio" class="block text-gray-700 font-medium mb-2 font-poppins">Servicio de Inter√©s</label>
                <select 
                  id="consulta-servicio" 
                  name="servicio" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                >
                  <option value="">Selecciona un servicio</option>
                  <option value="unas-naturales">U√±as Naturales</option>
                  <option value="unas-acrilicas">U√±as Acr√≠licas</option>
                  <option value="maquillaje">Maquillaje</option>
                  <option value="peinados">Peinados</option>
                  <option value="cejas">Cejas</option>
                  <option value="pestanas">Pesta√±as</option>
                  <option value="otro">Otro</option>
                </select>
              </div>

              <!-- Mensaje -->
              <div>
                <label for="consulta-mensaje" class="block text-gray-700 font-medium mb-2 font-poppins">Mensaje</label>
                <textarea 
                  id="consulta-mensaje" 
                  name="mensaje" 
                  rows="4"
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                  placeholder="Cu√©ntanos c√≥mo podemos ayudarte..."
                ></textarea>
              </div>

              <!-- Estado -->
              <div id="estado-consulta" class="text-center hidden">
                <!-- Mensajes de estado -->
              </div>

              <!-- Bot√≥n -->
              <button 
                type="submit"
                class="w-full bg-pink-500 text-white py-3 px-6 rounded-lg hover:bg-pink-600 transition-colors duration-300 font-poppins font-medium"
              >
                üí¨ Enviar Consulta
              </button>
            </form>

            <!-- Formulario Testimonio -->
            <form id="form-testimonio" class="space-y-6 hidden">
              <!-- Nombre -->
              <div>
                <label for="testimonio-nombre" class="block text-gray-700 font-medium mb-2 font-poppins">Nombre</label>
                <input 
                  type="text" 
                  id="testimonio-nombre" 
                  name="nombre" 
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                  placeholder="Tu nombre completo"
                >
              </div>

              <!-- Email -->
              <div>
                <label for="testimonio-email" class="block text-gray-700 font-medium mb-2 font-poppins">Email</label>
                <input 
                  type="email" 
                  id="testimonio-email" 
                  name="email" 
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                  placeholder="tu@email.com"
                >
              </div>

              <!-- Calificaci√≥n -->
              <div>
                <label class="block text-gray-700 font-medium mb-2 font-poppins">Calificaci√≥n</label>
                <div class="flex items-center gap-2 mb-2">
                  <div class="rating-stars flex gap-1" id="rating-stars">
                    <button type="button" onclick="setRating(1)" class="star text-2xl text-gray-300 hover:text-yellow-400 transition-colors">‚≠ê</button>
                    <button type="button" onclick="setRating(2)" class="star text-2xl text-gray-300 hover:text-yellow-400 transition-colors">‚≠ê</button>
                    <button type="button" onclick="setRating(3)" class="star text-2xl text-gray-300 hover:text-yellow-400 transition-colors">‚≠ê</button>
                    <button type="button" onclick="setRating(4)" class="star text-2xl text-gray-300 hover:text-yellow-400 transition-colors">‚≠ê</button>
                    <button type="button" onclick="setRating(5)" class="star text-2xl text-gray-300 hover:text-yellow-400 transition-colors">‚≠ê</button>
                  </div>
                  <span id="rating-text" class="text-gray-600 font-poppins ml-2">Selecciona una calificaci√≥n</span>
                </div>
                <input type="hidden" id="rating-value" name="rating" required>
              </div>

              <!-- Servicio usado -->
              <div>
                <label for="testimonio-servicio" class="block text-gray-700 font-medium mb-2 font-poppins">Servicio Utilizado</label>
                <select 
                  id="testimonio-servicio" 
                  name="servicio" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                >
                  <option value="">¬øCu√°l servicio probaste?</option>
                  <option value="unas-naturales">U√±as Naturales</option>
                  <option value="unas-acrilicas">U√±as Acr√≠licas</option>
                  <option value="maquillaje">Maquillaje</option>
                  <option value="peinados">Peinados</option>
                  <option value="cejas">Cejas</option>
                  <option value="pestanas">Pesta√±as</option>
                  <option value="otro">Otro</option>
                </select>
              </div>

              <!-- Testimonio -->
              <div>
                <label for="testimonio-texto" class="block text-gray-700 font-medium mb-2 font-poppins">Tu Testimonio</label>
                <textarea 
                  id="testimonio-texto" 
                  name="testimonio" 
                  rows="4"
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                  placeholder="Cu√©ntanos sobre tu experiencia con nosotros..."
                ></textarea>
              </div>

              <!-- Estado -->
              <div id="estado-testimonio" class="text-center hidden">
                <!-- Mensajes de estado -->
              </div>

              <!-- Bot√≥n -->
              <button 
                type="submit"
                class="w-full bg-pink-500 text-white py-3 px-6 rounded-lg hover:bg-pink-600 transition-colors duration-300 font-poppins font-medium"
              >
                ‚≠ê Enviar Testimonio
              </button>
            </form>
          </div>

          <!-- Formulario de reserva de cita -->
          <div id="form-cita" class="tab-content hidden">
            <form id="reserva-form" class="space-y-6">
              
              <!-- Informaci√≥n personal -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label for="cita-nombre" class="block text-gray-700 font-medium mb-2 font-poppins">Nombre</label>
                  <input 
                    type="text" 
                    id="cita-nombre" 
                    name="nombre" 
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                    placeholder="Tu nombre completo"
                  >
                </div>

                <div>
                  <label for="cita-email" class="block text-gray-700 font-medium mb-2 font-poppins">Email</label>
                  <input 
                    type="email" 
                    id="cita-email" 
                    name="email" 
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                    placeholder="tu@email.com"
                  >
                </div>
              </div>

              <!-- Tel√©fono -->
              <div>
                <label for="cita-telefono" class="block text-gray-700 font-medium mb-2 font-poppins">Tel√©fono</label>
                <input 
                  type="tel" 
                  id="cita-telefono" 
                  name="telefono" 
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                  placeholder="+1 (555) 123-4567"
                >
              </div>

              <!-- Servicio -->
              <div>
                <label for="cita-servicio" class="block text-gray-700 font-medium mb-2 font-poppins">Servicio</label>
                <select 
                  id="cita-servicio" 
                  name="servicio" 
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                >
                  <option value="">Selecciona un servicio</option>
                  <option value="unas-naturales">U√±as Naturales</option>
                  <option value="unas-acrilicas">U√±as Acr√≠licas</option>
                  <option value="maquillaje">Maquillaje</option>
                  <option value="peinados">Peinados</option>
                  <option value="cejas">Cejas</option>
                  <option value="pestanas">Pesta√±as</option>
                  <option value="otro">Otro</option>
                </select>
              </div>

              <!-- Calendario -->
              <div>
                <label for="cita-fecha" class="block text-gray-700 font-medium mb-2 font-poppins">Fecha</label>
                <input 
                  type="date" 
                  id="cita-fecha" 
                  name="fecha" 
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                >
              </div>

              <!-- Horarios disponibles -->
              <div id="horarios-container" class="hidden">
                <label class="block text-gray-700 font-medium mb-2 font-poppins">Horarios Disponibles</label>
                <div id="horarios-grid" class="grid grid-cols-3 gap-2">
                  <!-- Se llenar√°n din√°micamente -->
                </div>
              </div>

              <!-- Comentarios adicionales -->
              <div>
                <label for="cita-comentarios" class="block text-gray-700 font-medium mb-2 font-poppins">Comentarios Adicionales</label>
                <textarea 
                  id="cita-comentarios" 
                  name="comentarios" 
                  rows="3"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent font-poppins"
                  placeholder="Comentarios especiales o preferencias..."
                ></textarea>
              </div>

              <!-- Bot√≥n -->
              <button 
                type="submit"
                id="reservar-btn"
                class="w-full bg-pink-500 text-white py-3 px-6 rounded-lg hover:bg-pink-600 transition-colors duration-300 font-poppins font-medium disabled:bg-gray-400 disabled:cursor-not-allowed"
                disabled
              >
                Reservar Cita
              </button>

              <!-- Estado -->
              <div id="estado-reserva" class="text-center hidden">
                <!-- Mensajes de estado -->
              </div>
            </form>
          </div>
        </div>

      </div>
    </div>
  </section>
</Layout>

<script>
  // Variables globales
  let horariosDisponibles: string[] = [];
  let horaSeleccionada: string = '';
  let tipoMensajeActual: string = 'consulta';
  let ratingSeleccionado: number = 0;

  // Funci√≥n para cambiar tipo de mensaje
  function cambiarTipoMensaje(tipo: string) {
    tipoMensajeActual = tipo;
    
    // Actualizar botones
    document.querySelectorAll('.tipo-mensaje-btn').forEach(btn => {
      btn.classList.remove('bg-pink-500', 'text-white');
      btn.classList.add('bg-gray-200', 'text-gray-700');
    });
    
    const activeBtn = document.getElementById(`tipo-${tipo}`);
    if (activeBtn) {
      activeBtn.classList.remove('bg-gray-200', 'text-gray-700');
      activeBtn.classList.add('bg-pink-500', 'text-white');
    }
    
    // Mostrar/ocultar formularios
    const formConsulta = document.getElementById('form-consulta');
    const formTestimonio = document.getElementById('form-testimonio');
    
    if (tipo === 'consulta') {
      formConsulta?.classList.remove('hidden');
      formTestimonio?.classList.add('hidden');
    } else {
      formConsulta?.classList.add('hidden');
      formTestimonio?.classList.remove('hidden');
    }
  }

  // Funci√≥n para establecer rating
  function setRating(rating: number) {
    ratingSeleccionado = rating;
    const stars = document.querySelectorAll('.star');
    const ratingValue = document.getElementById('rating-value') as HTMLInputElement;
    const ratingText = document.getElementById('rating-text');
    
    stars.forEach((star, index) => {
      if (index < rating) {
        star.classList.remove('text-gray-300');
        star.classList.add('text-yellow-400');
      } else {
        star.classList.remove('text-yellow-400');
        star.classList.add('text-gray-300');
      }
    });
    
    if (ratingValue) ratingValue.value = rating.toString();
    
    const textos = {
      1: 'Muy malo',
      2: 'Malo',
      3: 'Regular',
      4: 'Bueno',
      5: 'Excelente'
    };
    
    if (ratingText) {
      ratingText.textContent = textos[rating as keyof typeof textos];
    }
  }

  // Funci√≥n para enviar testimonio
  async function enviarTestimonio(formData: FormData) {
    try {
      const response = await fetch('/api/testimonios', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'crear',
          nombre: formData.get('nombre'),
          email: formData.get('email'),
          testimonio: formData.get('testimonio'),
          rating: parseInt(formData.get('rating') as string),
          servicio: formData.get('servicio')
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        mostrarEstadoTestimonio('‚úÖ ¬°Gracias por tu testimonio! Ser√° revisado antes de publicarse.', 'success');
        
        // Enviar notificaci√≥n al admin
        try {
          await fetch('/api/emails', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              tipo: 'nuevoTestimonio',
              datos: {
                nombre: formData.get('nombre'),
                email: formData.get('email'),
                testimonio: formData.get('testimonio'),
                rating: parseInt(formData.get('rating') as string)
              }
            })
          });
        } catch (emailError) {
          console.error('Error enviando notificaci√≥n:', emailError);
        }
        
        // Limpiar formulario
        const form = document.getElementById('form-testimonio') as HTMLFormElement;
        if (form) form.reset();
        
        // Reset rating
        ratingSeleccionado = 0;
        setRating(0);
        document.getElementById('rating-text')!.textContent = 'Selecciona una calificaci√≥n';
        
      } else {
        mostrarEstadoTestimonio(`‚ùå ${result.message}`, 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarEstadoTestimonio('‚ùå Error de conexi√≥n', 'error');
    }
  }

  // Funci√≥n para enviar consulta
  async function enviarConsulta(formData: FormData) {
    try {
      // Simular env√≠o (en producci√≥n se conectar√≠a con un servicio de email)
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      mostrarEstadoConsulta('‚úÖ ¬°Consulta enviada! Te contactaremos pronto.', 'success');
      
      // Limpiar formulario
      const form = document.getElementById('form-consulta') as HTMLFormElement;
      if (form) form.reset();
      
    } catch (error) {
      console.error('Error:', error);
      mostrarEstadoConsulta('‚ùå Error al enviar consulta', 'error');
    }
  }

  // Funciones para mostrar estados
  function mostrarEstadoConsulta(mensaje: string, tipo: 'success' | 'error' | 'warning' = 'success') {
    mostrarEstadoGenerico('estado-consulta', mensaje, tipo);
  }

  function mostrarEstadoTestimonio(mensaje: string, tipo: 'success' | 'error' | 'warning' = 'success') {
    mostrarEstadoGenerico('estado-testimonio', mensaje, tipo);
  }

  function mostrarEstadoGenerico(elementId: string, mensaje: string, tipo: 'success' | 'error' | 'warning' = 'success') {
    const estadoDiv = document.getElementById(elementId);
    if (!estadoDiv) return;
    
    const colors = {
      success: 'bg-green-100 text-green-700 border-green-200',
      error: 'bg-red-100 text-red-700 border-red-200',
      warning: 'bg-yellow-100 text-yellow-700 border-yellow-200'
    };
    
    const icons = {
      success: '‚úÖ',
      error: '‚ùå',
      warning: '‚ö†Ô∏è'
    };
    
    estadoDiv.className = `text-center border rounded-lg p-4 ${colors[tipo]}`;
    estadoDiv.innerHTML = `
      <div class="flex items-center justify-center gap-2">
        <span class="text-lg">${icons[tipo]}</span>
        <span class="font-poppins">${mensaje}</span>
      </div>
    `;
    estadoDiv.classList.remove('hidden');
    
    // Auto-hide despu√©s de 5 segundos para mensajes de √©xito
    if (tipo === 'success') {
      setTimeout(() => {
        estadoDiv.classList.add('hidden');
      }, 5000);
    }
  }

  // Funci√≥n para cambiar pesta√±as
  function cambiarTab(tab: string) {
    // Actualizar botones con nuevo estilo
    const tabs = document.querySelectorAll('.tab-btn');
    tabs.forEach(t => {
      t.classList.remove('bg-white', 'shadow-md', 'text-pink-600', 'border-2', 'border-pink-200');
      t.classList.add('text-gray-600', 'hover:text-gray-800', 'hover:bg-white/50');
    });
    
    const activeTab = document.getElementById(`tab-${tab}`);
    if (activeTab) {
      activeTab.classList.remove('text-gray-600', 'hover:text-gray-800', 'hover:bg-white/50');
      activeTab.classList.add('bg-white', 'shadow-md', 'text-pink-600', 'border-2', 'border-pink-200');
    }
    
    // Mostrar/ocultar contenido
    const contents = document.querySelectorAll('.tab-content');
    contents.forEach(c => c.classList.add('hidden'));
    
    const activeContent = document.getElementById(`form-${tab}`);
    if (activeContent) {
      activeContent.classList.remove('hidden');
    }
  }

  // Funci√≥n para cargar horarios disponibles
  async function cargarHorariosDisponibles(fecha: string) {
    try {
      const response = await fetch(`/api/citas?action=horarios-disponibles&fecha=${fecha}`);
      if (response.ok) {
        const result = await response.json();
        if (result.success && result.data && result.data.horariosDisponibles) {
          horariosDisponibles = result.data.horariosDisponibles;
          renderizarHorarios();
        } else {
          console.error('Error en respuesta de horarios:', result);
          horariosDisponibles = [];
          mostrarEstado(result.message || 'Error al cargar horarios disponibles', 'error');
        }
      } else {
        console.error('Error al cargar horarios:', response.status);
        horariosDisponibles = [];
        mostrarEstado('Error al cargar horarios disponibles', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      horariosDisponibles = [];
      mostrarEstado('Error de conexi√≥n', 'error');
    }
  }

  // Funci√≥n para renderizar horarios
  function renderizarHorarios() {
    const horariosGrid = document.getElementById('horarios-grid');
    const horariosContainer = document.getElementById('horarios-container');
    const reservarBtn = document.getElementById('reservar-btn') as HTMLButtonElement;
    
    if (!horariosGrid || !horariosContainer || !reservarBtn) return;
    
    if (horariosDisponibles.length === 0) {
      horariosContainer.classList.add('hidden');
      horariosGrid.innerHTML = '';
      reservarBtn.disabled = true;
      mostrarEstado('No hay horarios disponibles para esta fecha', 'warning');
      return;
    }
    
    horariosContainer.classList.remove('hidden');
    horariosGrid.innerHTML = horariosDisponibles.map(hora => `
      <button 
        type="button"
        onclick="seleccionarHora('${hora}')"
        class="hora-btn px-3 py-2 border border-gray-300 rounded-lg text-sm font-poppins hover:border-pink-500 hover:text-pink-600 transition-colors"
        data-hora="${hora}"
      >
        ${hora}
      </button>
    `).join('');
    
    // Limpiar selecci√≥n anterior
    horaSeleccionada = '';
    reservarBtn.disabled = true;
  }

  // Funci√≥n para seleccionar hora
  function seleccionarHora(hora: string) {
    horaSeleccionada = hora;
    
    // Actualizar estilos
    const horaBtns = document.querySelectorAll('.hora-btn');
    horaBtns.forEach(btn => {
      btn.classList.remove('bg-pink-500', 'text-white');
      btn.classList.add('border-gray-300');
    });
    
    const selectedBtn = document.querySelector(`[data-hora="${hora}"]`);
    if (selectedBtn) {
      selectedBtn.classList.add('bg-pink-500', 'text-white');
      selectedBtn.classList.remove('border-gray-300');
    }
    
    // Habilitar bot√≥n de reserva
    const reservarBtn = document.getElementById('reservar-btn') as HTMLButtonElement;
    if (reservarBtn) {
      reservarBtn.disabled = false;
    }
    
    limpiarEstado();
  }

  // Funci√≥n para mostrar estado
  function mostrarEstado(mensaje: string, tipo: 'success' | 'error' | 'warning' = 'success') {
    const estadoDiv = document.getElementById('estado-reserva');
    if (!estadoDiv) return;
    
    const colors = {
      success: 'bg-green-100 text-green-700 border-green-200',
      error: 'bg-red-100 text-red-700 border-red-200',
      warning: 'bg-yellow-100 text-yellow-700 border-yellow-200'
    };
    
    const icons = {
      success: '‚úÖ',
      error: '‚ùå',
      warning: '‚ö†Ô∏è'
    };
    
    estadoDiv.className = `text-center border rounded-lg p-4 ${colors[tipo]}`;
    estadoDiv.innerHTML = `
      <div class="flex items-center justify-center gap-2">
        <span class="text-lg">${icons[tipo]}</span>
        <span class="font-poppins">${mensaje}</span>
      </div>
    `;
    estadoDiv.classList.remove('hidden');
  }

  // Funci√≥n para limpiar estado
  function limpiarEstado() {
    const estadoDiv = document.getElementById('estado-reserva');
    if (estadoDiv) {
      estadoDiv.classList.add('hidden');
    }
  }

  // Funci√≥n para mostrar bot√≥n de descarga de imagen
  function mostrarBotonDescargaImagen(datoCita: any) {
    const estadoDiv = document.getElementById('estado-reserva');
    if (!estadoDiv) return;

    // Crear bot√≥n program√°ticamente para evitar problemas de sintaxis
    const botonDescarga = document.createElement('div');
    botonDescarga.className = 'mt-4';
    
    const button = document.createElement('button');
    button.className = 'bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-3 rounded-lg hover:from-purple-600 hover:to-pink-600 transition-all duration-300 font-poppins font-medium shadow-lg hover:shadow-xl transform hover:scale-105';
    button.innerHTML = 'üì∑ Descargar Comprobante de Cita';
    
    // Agregar evento de click directamente
    button.addEventListener('click', () => {
      descargarImagenCita(JSON.stringify(datoCita));
    });
    
    botonDescarga.appendChild(button);
    estadoDiv.appendChild(botonDescarga);
  }

  // Funci√≥n para descargar imagen de cita
  async function descargarImagenCita(dataCitaString: string) {
    try {
      const dataCita = JSON.parse(dataCitaString);
      
      // Mostrar indicador de carga
      mostrarEstado('üîÑ Generando tu comprobante...', 'warning');
      
      // Importar las funciones de generaci√≥n de imagen
      const { crearEnlaceDescarga, descargarImagenPNG } = await import('../utils/emailService.js');
      
      // Intentar descarga SVG primero
      try {
        await crearEnlaceDescarga(dataCita);
        mostrarEstado('üéâ ¬°Comprobante SVG descargado! Perfecto para WhatsApp.', 'success');
      } catch (svgError) {
        console.log('SVG fall√≥, intentando PNG...', svgError);
        
        // Si SVG falla, intentar PNG
        try {
          await descargarImagenPNG(dataCita);
          mostrarEstado('üéâ ¬°Comprobante PNG descargado! Listo para compartir.', 'success');
        } catch (pngError) {
          console.error('PNG tambi√©n fall√≥:', pngError);
          throw new Error('No se pudo descargar en ning√∫n formato');
        }
      }
      
      // Mostrar mensaje adicional despu√©s de 3 segundos
      setTimeout(() => {
        mostrarEstado('üí° Tip: Puedes compartir esta imagen por WhatsApp, Instagram o cualquier red social.', 'success');
      }, 3000);
      
    } catch (error) {
      console.error('Error al descargar imagen:', error);
      mostrarEstado('‚ùå Error al generar el comprobante. Intenta de nuevo.', 'error');
    }
  }

  // Funci√≥n para enviar reserva
  async function enviarReserva(formData: FormData) {
    const data = {
      action: 'crear-cita',
      nombre: formData.get('nombre'),
      email: formData.get('email'),
      telefono: formData.get('telefono'),
      servicio: formData.get('servicio'),
      fecha: formData.get('fecha'),
      hora: horaSeleccionada,
      mensaje: formData.get('comentarios') // La API espera 'mensaje', no 'comentarios'
    };
    
    try {
      const response = await fetch('/api/citas', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        mostrarEstado('¬°Cita reservada exitosamente! üéâ', 'success');
        
        // Enviar email de confirmaci√≥n
        try {
          await fetch('/api/emails', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              tipo: 'confirmacionCita',
              datos: {
                nombre: data.nombre,
                email: data.email,
                fecha: data.fecha,
                hora: data.hora,
                servicio: getServicioNombre(data.servicio as string),
                mensaje: data.mensaje
              }
            })
          });
          
          // Notificar al admin
          await fetch('/api/emails', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              tipo: 'nuevaCita',
              datos: {
                nombre: data.nombre,
                email: data.email,
                telefono: data.telefono,
                servicio: getServicioNombre(data.servicio as string),
                fecha: data.fecha,
                hora: data.hora,
                mensaje: data.mensaje
              }
            })
          });
          
        } catch (emailError) {
          console.error('Error enviando emails:', emailError);
        }
        
        // Limpiar formulario
        const form = document.getElementById('reserva-form') as HTMLFormElement;
        if (form) {
          form.reset();
        }
        
        // Limpiar horarios
        const horariosContainer = document.getElementById('horarios-container');
        if (horariosContainer) {
          horariosContainer.classList.add('hidden');
        }
        
        horaSeleccionada = '';
        horariosDisponibles = [];
        
        // Deshabilitar bot√≥n
        const reservarBtn = document.getElementById('reservar-btn') as HTMLButtonElement;
        if (reservarBtn) {
          reservarBtn.disabled = true;
        }
        
        // Mostrar bot√≥n para descargar imagen de cita despu√©s de 2 segundos
        setTimeout(() => {
          mostrarEstado('¬°Cita reservada! Descarga tu comprobante aqu√≠: üëá', 'success');
          mostrarBotonDescargaImagen(data);
        }, 2000);
        
      } else {
        mostrarEstado(result.message || result.error || 'Error al reservar la cita', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarEstado('Error de conexi√≥n al reservar la cita', 'error');
    }
  }

  // Funci√≥n para obtener nombre completo del servicio
  function getServicioNombre(servicio: string): string {
    const servicios: { [key: string]: string } = {
      'unas-naturales': 'U√±as Naturales',
      'unas-acrilicas': 'U√±as Acr√≠licas',
      'maquillaje': 'Maquillaje Profesional',
      'peinados': 'Peinados y Styling',
      'cejas': 'Dise√±o de Cejas',
      'pestanas': 'Extensiones de Pesta√±as',
      'otro': 'Consulta Personalizada'
    };
    return servicios[servicio] || servicio;
  }

  // Configurar fecha m√≠nima (hoy)
  function configurarFechaMinima() {
    const fechaInput = document.getElementById('cita-fecha') as HTMLInputElement;
    if (fechaInput) {
      const hoy = new Date();
      const manana = new Date(hoy);
      manana.setDate(hoy.getDate() + 1); // Permitir reservas desde ma√±ana
      
      const fechaMinima = manana.toISOString().split('T')[0];
      fechaInput.min = fechaMinima;
      
      // Configurar fecha m√°xima (30 d√≠as adelante)
      const fechaMaxima = new Date(hoy);
      fechaMaxima.setDate(hoy.getDate() + 30);
      fechaInput.max = fechaMaxima.toISOString().split('T')[0];
    }
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    configurarFechaMinima();
    
    // Event listener para cambio de fecha
    const fechaInput = document.getElementById('cita-fecha');
    if (fechaInput) {
      fechaInput.addEventListener('change', (e) => {
        const fecha = (e.target as HTMLInputElement).value;
        if (fecha) {
          cargarHorariosDisponibles(fecha);
        }
      });
    }
    
    // Event listener para formulario de reserva
    const reservaForm = document.getElementById('reserva-form');
    if (reservaForm) {
      reservaForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        if (!horaSeleccionada) {
          mostrarEstado('Por favor selecciona un horario', 'warning');
          return;
        }
        
        const formData = new FormData(e.target as HTMLFormElement);
        enviarReserva(formData);
      });
    }
    
    // Event listener para formulario de consulta
    const consultaForm = document.getElementById('form-consulta');
    if (consultaForm) {
      consultaForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        enviarConsulta(formData);
      });
    }
    
    // Event listener para formulario de testimonio
    const testimonioForm = document.getElementById('form-testimonio');
    if (testimonioForm) {
      testimonioForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        if (!ratingSeleccionado) {
          mostrarEstadoTestimonio('Por favor selecciona una calificaci√≥n', 'warning');
          return;
        }
        
        const formData = new FormData(e.target as HTMLFormElement);
        enviarTestimonio(formData);
      });
    }
    
    // Configurar tipo de mensaje por defecto
    cambiarTipoMensaje('consulta');
  });

  // Hacer funciones disponibles globalmente
  (window as any).cambiarTab = cambiarTab;
  (window as any).seleccionarHora = seleccionarHora;
  (window as any).cambiarTipoMensaje = cambiarTipoMensaje;
  (window as any).setRating = setRating;
  (window as any).descargarImagenCita = descargarImagenCita;
</script>

<style>
  /* Espaciado adicional para el navbar fixed */
  body {
    scroll-padding-top: 100px;
  }
  
  /* Animaciones para pesta√±as */
  .tab-btn {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .tab-btn:hover {
    transform: translateY(-1px);
  }
  
  /* Botones de horarios */
  .hora-btn {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .hora-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  /* Cards de informaci√≥n con hover */
  .contact-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .contact-card:hover {
    transform: translateY(-4px);
  }
  
  /* Animaciones suaves para elementos del formulario */
  input, select, textarea {
    transition: all 0.2s ease;
  }
  
  input:focus, select:focus, textarea:focus {
    transform: scale(1.02);
  }
  
  /* Gradientes y sombras mejoradas */
  .gradient-bg {
    background: linear-gradient(135deg, #fdf2f8 0%, #f3e8ff 100%);
  }
  
  /* Animaci√≥n de entrada para las cards */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in {
    animation: fadeInUp 0.6s ease-out forwards;
  }
  
  /* Responsive improvements */
  @media (max-width: 640px) {
    .tab-btn {
      padding: 12px 8px;
      font-size: 14px;
    }
  }
</style>