---
import AdminLayout from '../layouts/AdminLayout.astro';
export const prerender = false;

const title = "Panel de Administración - GlamBook";
---

<AdminLayout title={title}>
  <!-- Loading Screen -->
  <div id="loading-screen" class="fixed inset-0 bg-white z-50 flex items-center justify-center">
    <div class="text-center">
      <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-pink-500 mx-auto mb-4"></div>
      <p class="text-gray-600 font-poppins">Cargando panel de administración...</p>
    </div>
  </div>

  <!-- Login Form -->
  <div id="login-section" class="min-h-screen items-center justify-center bg-gradient-to-br from-pink-50 to-purple-50 px-4" style="display: none;">
    <div class="max-w-md w-full bg-white rounded-lg shadow-xl p-8">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-800 font-poppins">Admin Login</h1>
        <p class="text-gray-600 mt-2 font-poppins">Accede al panel de administración</p>
      </div>

      <form id="login-form" class="space-y-6">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 font-poppins">Email</label>
          <input 
            type="email" 
            id="email" 
            required 
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-pink-500 focus:border-pink-500 font-poppins"
            placeholder="admin@glambook.com"
          >
        </div>

        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 font-poppins">Contraseña</label>
          <input 
            type="password" 
            id="password" 
            required 
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-pink-500 focus:border-pink-500 font-poppins"
            placeholder="••••••••"
          >
        </div>

        <div id="error-message" class="hidden p-3 bg-red-50 border border-red-200 rounded-md">
          <p class="text-red-600 text-sm font-poppins"></p>
        </div>

        <button 
          type="submit" 
          class="w-full bg-pink-500 hover:bg-pink-600 text-white py-2 px-4 rounded-md font-semibold font-poppins transition-colors duration-300 disabled:opacity-50"
          id="login-btn"
        >
          Iniciar Sesión
        </button>
      </form>
    </div>
  </div>

  <!-- Admin Dashboard -->
  <div id="admin-dashboard" class="min-h-screen" style="display: none;">
    <!-- Content -->
    <main class="p-6">
      <!-- Dashboard Tab -->
      <div id="dashboard-tab" class="tab-content">
        <!-- Estadísticas Principales -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          <div class="admin-card p-4">
            <div class="flex items-center">
              <div class="p-2 bg-blue-100 rounded-lg">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-gray-600 font-poppins">Testimonios</p>
                <p id="total-testimonios" class="text-xl font-bold text-blue-800 font-poppins">0</p>
              </div>
            </div>
          </div>

          <div class="admin-card p-4">
            <div class="flex items-center">
              <div class="p-2 bg-green-100 rounded-lg">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-gray-600 font-poppins">Citas</p>
                <p id="total-citas" class="text-xl font-bold text-green-800 font-poppins">0</p>
              </div>
            </div>
          </div>

          <div class="admin-card p-4">
            <div class="flex items-center">
              <div class="p-2 bg-purple-100 rounded-lg">
                <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-gray-600 font-poppins">Usuarios</p>
                <p id="total-usuarios" class="text-xl font-bold text-purple-800 font-poppins">0</p>
              </div>
            </div>
          </div>

          <div class="admin-card p-4">
            <div class="flex items-center">
              <div class="p-2 bg-pink-100 rounded-lg">
                <svg class="w-5 h-5 text-pink-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-gray-600 font-poppins">Conversiones</p>
                <p id="total-conversiones" class="text-xl font-bold text-pink-800 font-poppins">85%</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Estadísticas Detalladas -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          <div class="admin-card p-6">
            <h3 class="text-lg font-semibold text-gray-800 font-poppins mb-4">Testimonios</h3>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 font-poppins">Aprobados</span>
                <span id="testimonios-aprobados" class="font-semibold text-green-600 font-poppins">0</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 font-poppins">Pendientes</span>
                <span id="testimonios-pendientes" class="font-semibold text-yellow-600 font-poppins">0</span>
              </div>
            </div>
          </div>

          <div class="admin-card p-6">
            <h3 class="text-lg font-semibold text-gray-800 font-poppins mb-4">Citas</h3>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 font-poppins">Pendientes</span>
                <span id="citas-pendientes" class="font-semibold text-yellow-600 font-poppins">0</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 font-poppins">Completadas</span>
                <span id="citas-completadas" class="font-semibold text-green-600 font-poppins">0</span>
              </div>
            </div>
          </div>

          <div class="admin-card p-6">
            <h3 class="text-lg font-semibold text-gray-800 font-poppins mb-4">Usuarios</h3>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 font-poppins">Administradores</span>
                <span id="usuarios-admins" class="font-semibold text-green-600 font-poppins">0</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600 font-poppins">Clientes</span>
                <span id="usuarios-clientes" class="font-semibold text-blue-600 font-poppins">0</span>
              </div>
            </div>
          </div>
        </div>

        <div class="admin-card p-6">
          <h2 class="text-lg font-semibold text-gray-800 font-poppins mb-4">Actividad Reciente</h2>
          <div id="actividad-reciente" class="space-y-3">
            <p class="text-gray-500 font-poppins">Cargando actividad...</p>
          </div>
        </div>
      </div>

      <!-- Testimonios Tab -->
      <div id="testimonios-tab" class="tab-content" style="display: none;">
        <div class="admin-card p-6">
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
            <div>
              <h2 class="text-lg font-semibold text-gray-800 font-poppins">Gestión de Testimonios</h2>
              <p class="text-sm text-gray-600 font-poppins">Administra los testimonios de los clientes</p>
            </div>
            <div class="flex flex-wrap gap-2">
              <button id="refresh-testimonios" class="admin-button-secondary text-sm">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Actualizar
              </button>
              <button id="export-testimonios" class="admin-button-primary text-sm">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
                </svg>
                Exportar
              </button>
            </div>
          </div>

          <!-- Statistics Summary -->
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-blue-100 rounded-lg">
                  <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-blue-600 font-poppins">Total</p>
                  <p class="text-xl font-bold text-blue-800 font-poppins" id="total-testimonios-detail">0</p>
                </div>
              </div>
            </div>
            
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-yellow-100 rounded-lg">
                  <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-yellow-600 font-poppins">Pendientes</p>
                  <p class="text-xl font-bold text-yellow-800 font-poppins" id="pendientes-testimonios-detail">0</p>
                </div>
              </div>
            </div>
            
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-green-100 rounded-lg">
                  <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-green-600 font-poppins">Aprobados</p>
                  <p class="text-xl font-bold text-green-800 font-poppins" id="aprobados-testimonios-detail">0</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Filters -->
          <div class="mb-6">
            <div class="flex flex-wrap gap-2">
              <button class="filter-btn active bg-pink-500 text-white px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="todos">
                Todos
              </button>
              <button class="filter-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="pendientes">
                Pendientes
              </button>
              <button class="filter-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="aprobados">
                Aprobados
              </button>
            </div>
          </div>

          <!-- Testimonios List -->
          <div id="testimonios-list" class="space-y-4">
            <div class="flex items-center justify-center py-8">
              <div class="loading-spinner w-8 h-8"></div>
              <span class="ml-3 text-gray-500 font-poppins">Cargando testimonios...</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Citas Tab -->
      <div id="citas-tab" class="tab-content" style="display: none;">
        <div class="admin-card p-6">
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
            <div>
              <h2 class="text-lg font-semibold text-gray-800 font-poppins">Gestión de Citas</h2>
              <p class="text-sm text-gray-600 font-poppins">Administra las citas agendadas por los clientes</p>
            </div>
            <div class="flex flex-wrap gap-2">
              <button id="refresh-citas" class="admin-button-secondary text-sm">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Actualizar
              </button>
              <button id="export-citas" class="admin-button-primary text-sm">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
                </svg>
                Exportar
              </button>
            </div>
          </div>

          <!-- Statistics Summary -->
          <div class="grid grid-cols-1 sm:grid-cols-4 gap-4 mb-6">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-blue-100 rounded-lg">
                  <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-blue-600 font-poppins">Total</p>
                  <p class="text-xl font-bold text-blue-800 font-poppins" id="total-citas-detail">0</p>
                </div>
              </div>
            </div>
            
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-yellow-100 rounded-lg">
                  <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-yellow-600 font-poppins">Pendientes</p>
                  <p class="text-xl font-bold text-yellow-800 font-poppins" id="pendientes-citas-detail">0</p>
                </div>
              </div>
            </div>
            
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-green-100 rounded-lg">
                  <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-green-600 font-poppins">Confirmadas</p>
                  <p class="text-xl font-bold text-green-800 font-poppins" id="confirmadas-citas-detail">0</p>
                </div>
              </div>
            </div>
            
            <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-purple-100 rounded-lg">
                  <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-purple-600 font-poppins">Completadas</p>
                  <p class="text-xl font-bold text-purple-800 font-poppins" id="completadas-citas-detail">0</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Filters -->
          <div class="mb-6">
            <div class="flex flex-wrap gap-2">
              <button class="filter-citas-btn active bg-pink-500 text-white px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="todas">
                Todas
              </button>
              <button class="filter-citas-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="pendiente">
                Pendientes
              </button>
              <button class="filter-citas-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="confirmada">
                Confirmadas
              </button>
              <button class="filter-citas-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="completada">
                Completadas
              </button>
              <button class="filter-citas-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="cancelada">
                Canceladas
              </button>
            </div>
          </div>

          <!-- Citas List -->
          <div id="citas-list" class="space-y-4">
            <div class="flex items-center justify-center py-8">
              <div class="loading-spinner w-8 h-8"></div>
              <span class="ml-3 text-gray-500 font-poppins">Cargando citas...</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Configuración Tab -->
      <div id="configuracion-tab" class="tab-content" style="display: none;">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Información del Sistema -->
          <div class="admin-card p-6">
            <h2 class="text-lg font-semibold text-gray-800 font-poppins mb-4">Información del Sistema</h2>
            <div class="space-y-4">
              <div>
                <label class="admin-label">Estado del Sistema</label>
                <div class="flex items-center space-x-2">
                  <div id="system-status" class="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span class="text-sm text-gray-600 font-poppins">Sistema operativo</span>
                </div>
              </div>
              <div>
                <label class="admin-label">Versión</label>
                <p class="text-sm text-gray-600 font-poppins">GlamBook Admin v2.0</p>
              </div>
              <div>
                <label class="admin-label">Última actualización</label>
                <p class="text-sm text-gray-600 font-poppins" id="last-update">-</p>
              </div>
            </div>
          </div>

          <!-- Enlaces y Herramientas -->
          <div class="admin-card p-6">
            <h2 class="text-lg font-semibold text-gray-800 font-poppins mb-4">Enlaces Útiles</h2>
            <div class="space-y-3">
              <a href="https://glambook-website-production.up.railway.app/" target="_blank" 
                 class="flex items-center space-x-2 text-blue-600 hover:text-blue-800 font-poppins transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                </svg>
                <span>Ver Sitio Web</span>
              </a>
              <a href="https://glambook-website-production.up.railway.app/api/health" target="_blank" 
                 class="flex items-center space-x-2 text-blue-600 hover:text-blue-800 font-poppins transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>Estado de APIs</span>
              </a>
              <a href="https://railway.app/" target="_blank" 
                 class="flex items-center space-x-2 text-blue-600 hover:text-blue-800 font-poppins transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
                <span>Panel de Railway</span>
              </a>
            </div>
          </div>

          <!-- Estadísticas del Sistema -->
          <div class="admin-card p-6 lg:col-span-2">
            <h2 class="text-lg font-semibold text-gray-800 font-poppins mb-4">Estadísticas del Sistema</h2>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div class="text-center">
                <p class="text-2xl font-bold text-pink-600 font-poppins" id="total-users">-</p>
                <p class="text-sm text-gray-600 font-poppins">Usuarios Total</p>
              </div>
              <div class="text-center">
                <p class="text-2xl font-bold text-blue-600 font-poppins" id="total-sessions">-</p>
                <p class="text-sm text-gray-600 font-poppins">Sesiones Hoy</p>
              </div>
              <div class="text-center">
                <p class="text-2xl font-bold text-green-600 font-poppins" id="total-conversions">-</p>
                <p class="text-sm text-gray-600 font-poppins">Conversiones</p>
              </div>
              <div class="text-center">
                <p class="text-2xl font-bold text-purple-600 font-poppins" id="system-uptime">99.9%</p>
                <p class="text-sm text-gray-600 font-poppins">Uptime</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Usuarios Tab -->
      <div id="usuarios-tab" class="tab-content" style="display: none;">
        <div class="admin-card p-6">
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
            <div>
              <h2 class="text-lg font-semibold text-gray-800 font-poppins">Gestión de Usuarios</h2>
              <p class="text-sm text-gray-600 font-poppins">Administra los usuarios registrados y sus roles</p>
            </div>
            <div class="flex flex-wrap gap-2">
              <button id="refresh-usuarios" class="admin-button-secondary text-sm">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Actualizar
              </button>
              <button id="export-usuarios" class="admin-button-primary text-sm">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
                </svg>
                Exportar
              </button>
            </div>
          </div>

          <!-- Statistics Summary -->
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-blue-100 rounded-lg">
                  <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-blue-600 font-poppins">Total</p>
                  <p class="text-xl font-bold text-blue-800 font-poppins" id="total-usuarios-detail">0</p>
                </div>
              </div>
            </div>
            
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-green-100 rounded-lg">
                  <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.25-4.5H3a2.25 2.25 0 00-2.25 2.25v9A2.25 2.25 0 003 19.5h16.5A2.25 2.25 0 0021.75 17V8.25A2.25 2.25 0 0019.5 6H18"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-green-600 font-poppins">Administradores</p>
                  <p class="text-xl font-bold text-green-800 font-poppins" id="admin-usuarios-detail">0</p>
                </div>
              </div>
            </div>
            
            <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-purple-100 rounded-lg">
                  <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-purple-600 font-poppins">Clientes</p>
                  <p class="text-xl font-bold text-purple-800 font-poppins" id="clientes-usuarios-detail">0</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Filters -->
          <div class="mb-6">
            <div class="flex flex-wrap gap-2">
              <button class="filter-usuarios-btn active bg-pink-500 text-white px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="todos">
                Todos
              </button>
              <button class="filter-usuarios-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="admin">
                Administradores
              </button>
              <button class="filter-usuarios-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="cliente">
                Clientes
              </button>
            </div>
          </div>

          <!-- Usuarios List -->
          <div id="usuarios-list" class="space-y-4">
            <div class="flex items-center justify-center py-8">
              <div class="loading-spinner w-8 h-8"></div>
              <span class="ml-3 text-gray-500 font-poppins">Cargando usuarios...</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Disponibilidad Tab -->
      <div id="disponibilidad-tab" class="tab-content" style="display: none;">
        <div class="max-w-7xl mx-auto p-6">
          <!-- Header -->
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
            <div>
              <h2 class="text-lg font-semibold text-gray-800 font-poppins">Gestión de Disponibilidad</h2>
              <p class="text-sm text-gray-600 font-poppins">Administra los días y horarios no disponibles</p>
            </div>
            <div class="flex gap-2">
              <button id="refresh-disponibilidad" class="admin-button-secondary text-sm">
                <span class="mr-2">🔄</span>
                Actualizar
              </button>
              <button id="crear-bloqueo-btn" class="admin-button-primary text-sm">
                <span class="mr-2">➕</span>
                Nuevo Bloqueo
              </button>
            </div>
          </div>

          <!-- Stats Cards -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-blue-100 rounded-lg">
                  <span class="text-blue-600 text-lg">📅</span>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-blue-600 font-poppins">Total Bloqueos</p>
                  <p class="text-xl font-bold text-blue-800 font-poppins" id="total-bloqueos-detail">0</p>
                </div>
              </div>
            </div>
            
            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-red-100 rounded-lg">
                  <span class="text-red-600 text-lg">🚫</span>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-red-600 font-poppins">Días Completos</p>
                  <p class="text-xl font-bold text-red-800 font-poppins" id="dias-completos-detail">0</p>
                </div>
              </div>
            </div>

            <div class="bg-orange-50 border border-orange-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-orange-100 rounded-lg">
                  <span class="text-orange-600 text-lg">⏰</span>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-orange-600 font-poppins">Horarios Específicos</p>
                  <p class="text-xl font-bold text-orange-800 font-poppins" id="horarios-especificos-detail">0</p>
                </div>
              </div>
            </div>

            <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <div class="flex items-center">
                <div class="p-2 bg-purple-100 rounded-lg">
                  <span class="text-purple-600 text-lg">📊</span>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-purple-600 font-poppins">Rangos de Fechas</p>
                  <p class="text-xl font-bold text-purple-800 font-poppins" id="rangos-fechas-detail">0</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Filters -->
          <div class="mb-6">
            <div class="flex flex-wrap gap-2">
              <button class="filter-disponibilidad-btn active bg-pink-500 text-white px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="todos">
                Todos
              </button>
              <button class="filter-disponibilidad-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="dia_completo">
                Días Completos
              </button>
              <button class="filter-disponibilidad-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="horario_especifico">
                Horarios Específicos
              </button>
              <button class="filter-disponibilidad-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="rango_fechas">
                Rangos de Fechas
              </button>
              <button class="filter-disponibilidad-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md font-poppins transition-all duration-300" data-filter="activos">
                Solo Activos
              </button>
            </div>
          </div>

          <!-- Bloqueos List -->
          <div id="bloqueos-list" class="space-y-4">
            <div class="flex items-center justify-center py-8">
              <div class="loading-spinner w-8 h-8"></div>
              <span class="ml-3 text-gray-500 font-poppins">Cargando bloqueos...</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Modal para Crear/Editar Bloqueo -->
      <div id="modal-bloqueo" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <!-- Header del modal -->
            <div class="flex justify-between items-center mb-6">
              <h3 class="text-lg font-semibold text-gray-800 font-poppins" id="modal-title">Crear Bloqueo</h3>
              <button id="cerrar-modal-bloqueo" class="text-gray-400 hover:text-gray-600 transition-colors">
                <span class="text-xl">✕</span>
              </button>
            </div>

            <!-- Formulario -->
            <form id="form-bloqueo" class="space-y-4">
              <!-- Tipo de Bloqueo -->
              <div>
                <label class="block text-sm font-medium text-gray-700 font-poppins mb-2">Tipo de Bloqueo</label>
                <select id="tipo-bloqueo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 font-poppins">
                  <option value="dia_completo">Día Completo</option>
                  <option value="horario_especifico">Horario Específico</option>
                  <option value="rango_fechas">Rango de Fechas</option>
                </select>
              </div>

              <!-- Fecha (para día completo y horario específico) -->
              <div id="campo-fecha">
                <label class="block text-sm font-medium text-gray-700 font-poppins mb-2">Fecha</label>
                <input type="date" id="fecha-bloqueo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 font-poppins">
              </div>

              <!-- Rango de fechas (solo para rango) -->
              <div id="campos-rango" class="hidden space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 font-poppins mb-2">Fecha de Inicio</label>
                  <input type="date" id="fecha-inicio-bloqueo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 font-poppins">
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 font-poppins mb-2">Fecha de Fin</label>
                  <input type="date" id="fecha-fin-bloqueo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 font-poppins">
                </div>
              </div>

              <!-- Horarios (solo para horario específico) -->
              <div id="campos-horarios" class="hidden space-y-4">
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 font-poppins mb-2">Hora Inicio</label>
                    <input type="time" id="hora-inicio-bloqueo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 font-poppins">
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 font-poppins mb-2">Hora Fin</label>
                    <input type="time" id="hora-fin-bloqueo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 font-poppins">
                  </div>
                </div>
              </div>

              <!-- Motivo -->
              <div>
                <label class="block text-sm font-medium text-gray-700 font-poppins mb-2">Motivo</label>
                <textarea id="motivo-bloqueo" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 font-poppins resize-none" placeholder="Describe el motivo del bloqueo..."></textarea>
              </div>

              <!-- Botones -->
              <div class="flex gap-3 pt-4">
                <button type="button" id="cancelar-bloqueo" class="flex-1 px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors font-poppins">
                  Cancelar
                </button>
                <button type="submit" class="flex-1 px-4 py-2 bg-pink-500 text-white rounded-md hover:bg-pink-600 transition-colors font-poppins">
                  Guardar
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </main>
  </div>
</Layout>

<script>
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signOut } from 'firebase/auth';
import { adminConfig, getApiUrl, formatDate, handleApiError, saveToLocalStorage, getFromLocalStorage } from '../lib/admin-config.ts';

// Initialize Firebase
const app = initializeApp(adminConfig.firebase);
const auth = getAuth(app);

// DOM Elements
const loadingScreen = document.getElementById('loading-screen');
const loginSection = document.getElementById('login-section');
const adminDashboard = document.getElementById('admin-dashboard');
const loginForm = document.getElementById('login-form');
const errorMessage = document.getElementById('error-message');
const logoutBtn = document.getElementById('logout-menu-btn');
const adminEmail = document.getElementById('admin-user-name');

// Tab functionality from navbar and mobile
const allNavLinks = document.querySelectorAll('.nav-link, .mobile-nav-link');
const tabContents = document.querySelectorAll('.tab-content');

// Check authentication state
onAuthStateChanged(auth, (user) => {
  loadingScreen.style.display = 'none';
  if (user) {
    showDashboard(user);
  } else {
    showLogin();
  }
});

function showLogin() {
  loginSection.style.display = 'flex';
  adminDashboard.style.display = 'none';
}

function showDashboard(user) {
  loginSection.style.display = 'none';
  adminDashboard.style.display = 'block';
  if (adminEmail) {
    adminEmail.textContent = user.email;
  }
  loadDashboardData();
  // Initialize with dashboard tab
  showTab('dashboard');
}

// Login form handler
loginForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;
  const loginBtn = document.getElementById('login-btn');

  try {
    loginBtn.disabled = true;
    loginBtn.textContent = 'Iniciando...';
    
    await signInWithEmailAndPassword(auth, email, password);
    
    errorMessage.classList.add('hidden');
  } catch (error) {
    console.error('Error de login:', error);
    errorMessage.classList.remove('hidden');
    errorMessage.querySelector('p').textContent = 'Email o contraseña incorrectos';
  } finally {
    loginBtn.disabled = false;
    loginBtn.textContent = 'Iniciar Sesión';
  }
});

// Logout handler
logoutBtn.addEventListener('click', async () => {
  try {
    await signOut(auth);
  } catch (error) {
    console.error('Error al cerrar sesión:', error);
  }
});

// Tab navigation
allNavLinks.forEach(link => {
  link.addEventListener('click', () => {
    const tabName = link.dataset.tab;
    showTab(tabName);
  });
});

window.showTab = function showTab(tabName) {
  // Hide all tab contents
  tabContents.forEach(content => content.style.display = 'none');
  
  // Show selected tab
  const targetTab = document.getElementById(tabName + '-tab');
  if (targetTab) {
    targetTab.style.display = 'block';
  }
  
  // Update navbar highlighting
  if (window.updateActiveNav) {
    window.updateActiveNav(tabName);
  }
  
  // Load specific data
  if (tabName === 'testimonios') {
    loadTestimonios();
  } else if (tabName === 'citas') {
    loadCitasData();
  } else if (tabName === 'usuarios') {
    loadUsuariosData();
  } else if (tabName === 'disponibilidad') {
    loadDisponibilidadData();
  } else if (tabName === 'configuracion') {
    loadConfiguracion();
  }
}

// Load dashboard data
async function loadDashboardData() {
  try {
    // Load testimonios stats
    const testimoniosResponse = await fetch(getApiUrl('/testimonios?action=todos'));
    const testimoniosData = await testimoniosResponse.json();
    
    if (testimoniosData.success) {
      const total = testimoniosData.data.length;
      const aprobados = testimoniosData.data.filter(t => t.estado === 'aprobado').length;
      const pendientes = testimoniosData.data.filter(t => t.estado === 'pendiente').length;
      
      document.getElementById('total-testimonios').textContent = total;
      document.getElementById('testimonios-aprobados').textContent = aprobados;
      document.getElementById('testimonios-pendientes').textContent = pendientes;
      
      // Update navbar badges
      if (window.updateNavBadges) {
        window.updateNavBadges(pendientes, 0);
      }
    }
    
    // Load citas stats
    try {
      const citasResponse = await fetch('/api/citas');
      if (citasResponse.ok) {
        const citasResult = await citasResponse.json();
        if (citasResult.success && citasResult.data) {
          const citasData = citasResult.data;
          document.getElementById('total-citas').textContent = citasData.length;
          document.getElementById('citas-pendientes').textContent = 
            citasData.filter(c => c.estado === 'pendiente').length;
          document.getElementById('citas-completadas').textContent = 
            citasData.filter(c => c.estado === 'completada').length;
        }
      }
    } catch (error) {
      console.error('Error loading citas stats:', error);
    }
    
    // Load usuarios stats
    try {
      const usuariosResponse = await fetch('/api/usuarios');
      if (usuariosResponse.ok) {
        const usuariosData = await usuariosResponse.json();
        document.getElementById('total-usuarios').textContent = usuariosData.length;
        document.getElementById('usuarios-admins').textContent = 
          usuariosData.filter(u => u.rol === 'admin').length;
        document.getElementById('usuarios-clientes').textContent = 
          usuariosData.filter(u => u.rol === 'cliente').length;
      }
    } catch (error) {
      console.error('Error loading usuarios stats:', error);
    }
    
    // Save combined stats to localStorage
    const combinedStats = {
      testimonios: {
        total: testimoniosData.success ? testimoniosData.data.length : 0,
        aprobados: testimoniosData.success ? testimoniosData.data.filter(t => t.estado === 'aprobado').length : 0,
        pendientes: testimoniosData.success ? testimoniosData.data.filter(t => t.estado === 'pendiente').length : 0,
      },
      lastUpdate: new Date().toISOString()
    };
    saveToLocalStorage('dashboard_stats', combinedStats);
    
  } catch (error) {
    console.error('Error cargando dashboard:', error);
    
    // Try to load from localStorage if API fails
    const savedStats = getFromLocalStorage('dashboard_stats');
    if (savedStats && savedStats.testimonios) {
      document.getElementById('total-testimonios').textContent = savedStats.testimonios.total;
      document.getElementById('testimonios-aprobados').textContent = savedStats.testimonios.aprobados;
      document.getElementById('testimonios-pendientes').textContent = savedStats.testimonios.pendientes;
    }
  }
}

// Load testimonios
async function loadTestimonios() {
  const testimoniosList = document.getElementById('testimonios-list');
  testimoniosList.innerHTML = '<div class="flex items-center justify-center py-8"><div class="loading-spinner w-8 h-8"></div><span class="ml-3 text-gray-500 font-poppins">Cargando testimonios...</span></div>';
  
  try {
    const response = await fetch(getApiUrl('/testimonios?action=todos'));
    const data = await response.json();
    
    if (data.success && data.data.length > 0) {
      // Update summary stats
      const total = data.data.length;
      const aprobados = data.data.filter(t => t.estado === 'aprobado').length;
      const pendientes = data.data.filter(t => t.estado === 'pendiente').length;
      
      document.getElementById('total-testimonios-detail').textContent = total;
      document.getElementById('pendientes-testimonios-detail').textContent = pendientes;
      document.getElementById('aprobados-testimonios-detail').textContent = aprobados;
      
      // Store current filter
      window.currentTestimonios = data.data;
      
      testimoniosList.innerHTML = data.data.map(testimonio => `
        <div class="admin-card p-4 fade-in testimonio-card ${testimonio.estado === 'pendiente' ? 'border-l-4 border-yellow-400' : 'border-l-4 border-green-400'}" data-estado="${testimonio.estado}" data-id="${testimonio.id}">
          <div class="flex flex-col sm:flex-row justify-between items-start mb-3 space-y-2 sm:space-y-0">
            <div class="flex-grow w-full sm:w-auto">
              <div class="flex items-center space-x-2 mb-1">
                <h3 class="font-medium text-gray-800 font-poppins">${testimonio.nombre}</h3>
                <span class="status-badge ${testimonio.estado === 'aprobado' ? 'status-approved' : 'status-pending'}">
                  ${testimonio.estado}
                </span>
              </div>
              <p class="text-sm text-gray-600 font-poppins">${testimonio.servicio}</p>
              <p class="text-xs text-gray-500 font-poppins">${testimonio.email}</p>
            </div>
            
            <div class="flex items-center space-x-2 w-full sm:w-auto justify-end">
              ${testimonio.estado === 'pendiente' ? `
                <button class="bg-green-500 hover:bg-green-600 text-white text-xs py-1 px-2 rounded transition-colors duration-300 font-poppins" onclick="aprobarTestimonio('${testimonio.id}')">
                  <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Aprobar
                </button>
                <button class="bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 rounded transition-colors duration-300 font-poppins" onclick="rechazarTestimonio('${testimonio.id}')">
                  <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Rechazar
                </button>
              ` : `
                <button class="bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 rounded transition-colors duration-300 font-poppins" onclick="eliminarTestimonio('${testimonio.id}')">
                  <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Eliminar
                </button>
              `}
            </div>
          </div>
          
          <blockquote class="text-gray-700 font-poppins mb-3 italic border-l-2 border-gray-200 pl-3 text-sm sm:text-base">
            "${testimonio.comentario}"
          </blockquote>
          
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center text-sm text-gray-500 space-y-2 sm:space-y-0">
            <div class="flex items-center space-x-4">
              <span class="flex items-center space-x-1">
                <span class="text-yellow-500">⭐</span>
                <span class="font-medium">${testimonio.calificacion}/5</span>
              </span>
              <span>${formatDate(testimonio.fechaCreacion)}</span>
            </div>
            <button class="text-blue-500 hover:text-blue-700 text-xs font-poppins transition-colors duration-300" onclick="verDetalleTestimonio('${testimonio.id}')">
              Ver detalles
            </button>
          </div>
        </div>
      `).join('');
      
      // Save to localStorage
      saveToLocalStorage('testimonios', data.data);
    } else {
      testimoniosList.innerHTML = '<div class="text-center py-8"><p class="text-gray-500 font-poppins">No hay testimonios disponibles.</p></div>';
    }
  } catch (error) {
    console.error('Error cargando testimonios:', error);
    testimoniosList.innerHTML = `<div class="text-center py-8"><p class="text-red-500 font-poppins">Error cargando testimonios: ${handleApiError(error)}</p></div>`;
    
    // Try to load from localStorage
    const savedTestimonios = getFromLocalStorage('testimonios');
    if (savedTestimonios && savedTestimonios.length > 0) {
      testimoniosList.innerHTML = '<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4"><p class="text-yellow-800 font-poppins text-sm">⚠️ Mostrando datos guardados (sin conexión)</p></div>' + 
        savedTestimonios.map(testimonio => `
          <div class="admin-card p-4 opacity-75">
            <div class="flex justify-between items-start mb-3">
              <div class="flex-grow">
                <h3 class="font-medium text-gray-800 font-poppins">${testimonio.nombre}</h3>
                <p class="text-sm text-gray-600 font-poppins">${testimonio.servicio}</p>
              </div>
              <span class="status-badge ${testimonio.estado === 'aprobado' ? 'status-approved' : 'status-pending'}">
                ${testimonio.estado}
              </span>
            </div>
            <blockquote class="text-gray-700 font-poppins mb-3 italic border-l-2 border-gray-200 pl-3">
              "${testimonio.comentario}"
            </blockquote>
            <div class="flex justify-between items-center text-sm text-gray-500">
              <div class="flex items-center space-x-4">
                <span class="flex items-center space-x-1">
                  <span>⭐</span>
                  <span>${testimonio.calificacion}/5</span>
                </span>
                <span>${formatDate(testimonio.fechaCreacion)}</span>
              </div>
            </div>
          </div>
        `).join('');
    }
  }
}

// Filter functionality
document.querySelectorAll('.filter-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const filter = btn.dataset.filter;
    
    // Update active button
    document.querySelectorAll('.filter-btn').forEach(b => {
      b.classList.remove('active', 'bg-pink-500', 'text-white');
      b.classList.add('bg-gray-100', 'text-gray-700');
    });
    btn.classList.add('active', 'bg-pink-500', 'text-white');
    btn.classList.remove('bg-gray-100', 'text-gray-700');
    
    // Filter testimonios
    const testimonioCards = document.querySelectorAll('.testimonio-card');
    testimonioCards.forEach(card => {
      const estado = card.dataset.estado;
      if (filter === 'todos' || estado === filter) {
        card.style.display = 'block';
        card.classList.add('fade-in');
      } else {
        card.style.display = 'none';
      }
    });
  });
});

// Refresh testimonios
document.getElementById('refresh-testimonios').addEventListener('click', loadTestimonios);

// Export testimonios
document.getElementById('export-testimonios').addEventListener('click', function() {
  if (!window.currentTestimonios || window.currentTestimonios.length === 0) {
    showNotification('No hay testimonios para exportar', 'error');
    return;
  }
  
  const csvContent = 'data:text/csv;charset=utf-8,' + 
    'Nombre,Email,Servicio,Comentario,Calificacion,Estado,Fecha\n' +
    window.currentTestimonios.map(t => 
      `"${t.nombre}","${t.email}","${t.servicio}","${t.comentario}",${t.calificacion},"${t.estado}","${t.fechaCreacion}"`
    ).join('\n');
  
  const encodedUri = encodeURI(csvContent);
  const link = document.createElement('a');
  link.setAttribute('href', encodedUri);
  link.setAttribute('download', `testimonios_${new Date().toISOString().split('T')[0]}.csv`);
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  showNotification('Testimonios exportados correctamente', 'success');
});

// Auto-refresh every 30 seconds
setInterval(() => {
  if (document.getElementById('testimonios-tab').style.display !== 'none') {
    loadTestimonios();
  }
}, 30000);

// Configuración tab
function loadConfiguracion() {
  document.getElementById('last-update').textContent = formatDate(new Date());
  
  // Update system stats
  document.getElementById('total-users').textContent = '1';
  document.getElementById('total-sessions').textContent = '5';
  document.getElementById('total-conversions').textContent = '3';
}

// Function to approve testimonio
window.aprobarTestimonio = async function(id) {
  try {
    const response = await fetch(getApiUrl('/testimonios'), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ action: 'aprobar', id: id })
    });
    
    const result = await response.json();
    
    if (result.success) {
      showNotification('Testimonio aprobado correctamente', 'success');
      loadTestimonios();
      loadDashboardData();
    } else {
      showNotification(result.message || 'Error aprobando testimonio', 'error');
    }
  } catch (error) {
    console.error('Error aprobando testimonio:', error);
    showNotification(handleApiError(error), 'error');
  }
};

// Function to reject testimonio
window.rechazarTestimonio = async function(id) {
  if (!confirm('¿Estás seguro de que quieres rechazar este testimonio? Esta acción no se puede deshacer.')) {
    return;
  }
  
  try {
    const response = await fetch(getApiUrl('/testimonios'), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ action: 'rechazar', id: id })
    });
    
    const result = await response.json();
    
    if (result.success) {
      showNotification('Testimonio rechazado y eliminado', 'success');
      loadTestimonios();
      loadDashboardData();
    } else {
      showNotification(result.message || 'Error rechazando testimonio', 'error');
    }
  } catch (error) {
    console.error('Error rechazando testimonio:', error);
    showNotification(handleApiError(error), 'error');
  }
};

// Function to delete testimonio
window.eliminarTestimonio = async function(id) {
  if (!confirm('¿Estás seguro de que quieres eliminar este testimonio permanentemente? Esta acción no se puede deshacer.')) {
    return;
  }
  
  try {
    const response = await fetch(getApiUrl('/testimonios'), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ action: 'eliminar', id: id })
    });
    
    const result = await response.json();
    
    if (result.success) {
      showNotification('Testimonio eliminado correctamente', 'success');
      loadTestimonios();
      loadDashboardData();
    } else {
      showNotification(result.message || 'Error eliminando testimonio', 'error');
    }
  } catch (error) {
    console.error('Error eliminando testimonio:', error);
    showNotification(handleApiError(error), 'error');
  }
};

// Function to view testimonio details
window.verDetalleTestimonio = function(id) {
  const testimonio = window.currentTestimonios?.find(t => t.id == id);
  if (!testimonio) return;
  
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
  modal.innerHTML = `
    <div class="bg-white rounded-lg max-w-lg w-full p-6 max-h-96 overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-bold text-gray-800 font-poppins">Detalle del Testimonio</h3>
        <button onclick="this.closest('.fixed').remove()" class="text-gray-500 hover:text-gray-700">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 font-poppins mb-1">Nombre:</label>
          <p class="text-gray-900 font-poppins">${testimonio.nombre}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 font-poppins mb-1">Email:</label>
          <p class="text-gray-900 font-poppins">${testimonio.email}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 font-poppins mb-1">Servicio:</label>
          <p class="text-gray-900 font-poppins">${testimonio.servicio}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 font-poppins mb-1">Calificación:</label>
          <div class="flex items-center">
            <span class="text-yellow-500 text-lg">⭐ ${testimonio.calificacion}/5</span>
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 font-poppins mb-1">Comentario:</label>
          <div class="bg-gray-50 p-3 rounded-md">
            <p class="text-gray-900 font-poppins italic">"${testimonio.comentario}"</p>
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 font-poppins mb-1">Estado:</label>
          <span class="status-badge ${testimonio.estado === 'aprobado' ? 'status-approved' : 'status-pending'}">
            ${testimonio.estado}
          </span>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 font-poppins mb-1">Fecha de creación:</label>
          <p class="text-gray-900 font-poppins">${formatDate(testimonio.fechaCreacion)}</p>
        </div>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
};

// Notification system
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `fixed top-20 right-4 p-4 rounded-lg shadow-lg z-50 transition-all duration-300 transform translate-x-full ${
    type === 'success' ? 'bg-green-500 text-white' :
    type === 'error' ? 'bg-red-500 text-white' :
    'bg-blue-500 text-white'
  }`;
  notification.innerHTML = `
    <div class="flex items-center space-x-2">
      <span>${message}</span>
      <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white hover:text-gray-200">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // Animate in
  setTimeout(() => {
    notification.classList.remove('translate-x-full');
  }, 100);
  
  // Auto remove after 5 seconds
  setTimeout(() => {
    notification.classList.add('translate-x-full');
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 300);
  }, 5000);
}

// ===== CITAS MANAGEMENT =====

let citasData = [];
let currentCitasFilter = 'todas';

async function loadCitasData() {
  try {
    const response = await fetch('/api/citas');
    if (response.ok) {
      const result = await response.json();
      if (result.success && result.data) {
        citasData = result.data;
        updateCitasStats();
        renderCitas();
      } else {
        console.error('Error en respuesta de citas:', result);
        showNotification('Error al procesar las citas', 'error');
      }
    } else {
      console.error('Error loading citas:', response.status);
      showNotification('Error al cargar las citas', 'error');
    }
  } catch (error) {
    console.error('Error loading citas:', error);
    showNotification('Error de conexión al cargar citas', 'error');
  }
}

function updateCitasStats() {
  const total = citasData.length;
  const pendientes = citasData.filter(cita => cita.estado === 'pendiente').length;
  const confirmadas = citasData.filter(cita => cita.estado === 'confirmada').length;
  const completadas = citasData.filter(cita => cita.estado === 'completada').length;
  
  document.getElementById('total-citas-detail').textContent = total;
  document.getElementById('pendientes-citas-detail').textContent = pendientes;
  document.getElementById('confirmadas-citas-detail').textContent = confirmadas;
  document.getElementById('completadas-citas-detail').textContent = completadas;
}

function renderCitas() {
  const citasList = document.getElementById('citas-list');
  
  if (citasData.length === 0) {
    citasList.innerHTML = `
      <div class="text-center py-8">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
        </svg>
        <p class="mt-2 text-gray-500 font-poppins">No hay citas registradas</p>
      </div>
    `;
    return;
  }
  
  const filteredCitas = currentCitasFilter === 'todas' ? 
    citasData : 
    citasData.filter(cita => cita.estado === currentCitasFilter);
  
  if (filteredCitas.length === 0) {
    citasList.innerHTML = `
      <div class="text-center py-8">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
        </svg>
        <p class="mt-2 text-gray-500 font-poppins">No hay citas con este estado</p>
      </div>
    `;
    return;
  }
  
  const citasHtml = filteredCitas.map(cita => {
    const estadoColors = {
      'pendiente': 'bg-yellow-50 border-yellow-200 text-yellow-800',
      'confirmada': 'bg-green-50 border-green-200 text-green-800',
      'completada': 'bg-purple-50 border-purple-200 text-purple-800',
      'cancelada': 'bg-red-50 border-red-200 text-red-800'
    };
    
    const estadoClass = estadoColors[cita.estado] || 'bg-gray-50 border-gray-200 text-gray-800';
    const fechaCita = new Date(cita.fecha).toLocaleDateString('es-ES', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    
    return `
      <div class="cita-card border rounded-lg p-4 bg-white shadow-sm hover:shadow-md transition-all duration-300" 
           data-estado="${cita.estado}" data-id="${cita.id}">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-3">
          <div class="flex-1">
            <h3 class="font-semibold text-gray-900 font-poppins">${cita.nombre}</h3>
            <p class="text-sm text-gray-600 font-poppins">${cita.email}</p>
            <p class="text-sm text-gray-600 font-poppins">${cita.telefono || 'No proporcionado'}</p>
          </div>
          <span class="px-3 py-1 text-xs font-medium rounded-full border ${estadoClass} font-poppins mt-2 sm:mt-0">
            ${cita.estado.charAt(0).toUpperCase() + cita.estado.slice(1)}
          </span>
        </div>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 mb-3 text-sm text-gray-600 font-poppins">
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            ${fechaCita}
          </div>
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            ${cita.hora}
          </div>
        </div>
        
        <div class="mb-3">
          <p class="text-sm text-gray-700 font-poppins"><strong>Servicio:</strong> ${cita.servicio}</p>
          ${cita.mensaje ? `<p class="text-sm text-gray-600 font-poppins mt-1"><strong>Mensaje:</strong> ${cita.mensaje}</p>` : ''}
        </div>
        
        <div class="flex flex-wrap gap-2 pt-3 border-t border-gray-100">
          ${cita.estado === 'pendiente' ? `
            <button onclick="cambiarEstadoCita('${cita.id}', 'confirmada')" 
                    class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Confirmar
            </button>
            <button onclick="cambiarEstadoCita('${cita.id}', 'cancelada')" 
                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Cancelar
            </button>
          ` : ''}
          
          ${cita.estado === 'confirmada' ? `
            <button onclick="cambiarEstadoCita('${cita.id}', 'completada')" 
                    class="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Marcar Completada
            </button>
            <button onclick="cambiarEstadoCita('${cita.id}', 'cancelada')" 
                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Cancelar
            </button>
          ` : ''}
          
          <button onclick="eliminarCita('${cita.id}')" 
                  class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
            Eliminar
          </button>
          
          <button onclick="verDetallesCita('${cita.id}')" 
                  class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
            Ver Detalles
          </button>
        </div>
      </div>
    `;
  }).join('');
  
  citasList.innerHTML = citasHtml;
}

async function cambiarEstadoCita(citaId, nuevoEstado) {
  try {
    const response = await fetch('/api/citas', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'cambiar-estado',
        id: citaId,
        nuevoEstado: nuevoEstado
      })
    });
    
    if (response.ok) {
      showNotification(`Cita ${nuevoEstado} exitosamente`, 'success');
      loadCitasData(); // Reload data
    } else {
      showNotification('Error al cambiar el estado de la cita', 'error');
    }
  } catch (error) {
    console.error('Error changing cita status:', error);
    showNotification('Error de conexión', 'error');
  }
}

async function eliminarCita(citaId) {
  if (!confirm('¿Estás seguro de que deseas eliminar esta cita? Esta acción no se puede deshacer.')) {
    return;
  }
  
  try {
    const response = await fetch('/api/citas', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'eliminar',
        id: citaId
      })
    });
    
    if (response.ok) {
      showNotification('Cita eliminada exitosamente', 'success');
      loadCitasData(); // Reload data
    } else {
      showNotification('Error al eliminar la cita', 'error');
    }
  } catch (error) {
    console.error('Error deleting cita:', error);
    showNotification('Error de conexión', 'error');
  }
}

function verDetallesCita(citaId) {
  const cita = citasData.find(c => c.id === citaId);
  if (!cita) return;
  
  const fechaCita = new Date(cita.fecha).toLocaleDateString('es-ES', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    weekday: 'long'
  });
  
  const modalHtml = `
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="this.remove()">
      <div class="bg-white rounded-lg max-w-lg w-full mx-4 p-6" onclick="event.stopPropagation()">
        <div class="flex justify-between items-start mb-4">
          <h3 class="text-lg font-semibold text-gray-900 font-poppins">Detalles de la Cita</h3>
          <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <div class="space-y-3">
          <div class="bg-gray-50 p-3 rounded-lg">
            <p class="font-semibold text-gray-900 font-poppins">${cita.nombre}</p>
            <p class="text-sm text-gray-600 font-poppins">${cita.email}</p>
            ${cita.telefono ? `<p class="text-sm text-gray-600 font-poppins">${cita.telefono}</p>` : ''}
          </div>
          
          <div class="grid grid-cols-2 gap-3">
            <div>
              <p class="text-sm font-medium text-gray-700 font-poppins">Fecha</p>
              <p class="text-sm text-gray-600 font-poppins">${fechaCita}</p>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-700 font-poppins">Hora</p>
              <p class="text-sm text-gray-600 font-poppins">${cita.hora}</p>
            </div>
          </div>
          
          <div>
            <p class="text-sm font-medium text-gray-700 font-poppins">Servicio</p>
            <p class="text-sm text-gray-600 font-poppins">${cita.servicio}</p>
          </div>
          
          <div>
            <p class="text-sm font-medium text-gray-700 font-poppins">Estado</p>
            <span class="inline-block px-2 py-1 text-xs font-medium rounded-full ${
              cita.estado === 'pendiente' ? 'bg-yellow-100 text-yellow-800' :
              cita.estado === 'confirmada' ? 'bg-green-100 text-green-800' :
              cita.estado === 'completada' ? 'bg-purple-100 text-purple-800' :
              'bg-red-100 text-red-800'
            } font-poppins">
              ${cita.estado.charAt(0).toUpperCase() + cita.estado.slice(1)}
            </span>
          </div>
          
          ${cita.mensaje ? `
            <div>
              <p class="text-sm font-medium text-gray-700 font-poppins">Mensaje</p>
              <p class="text-sm text-gray-600 font-poppins bg-gray-50 p-2 rounded">${cita.mensaje}</p>
            </div>
          ` : ''}
          
          <div>
            <p class="text-sm font-medium text-gray-700 font-poppins">Creada</p>
            <p class="text-sm text-gray-600 font-poppins">${new Date(cita.createdAt || cita.fecha).toLocaleString('es-ES')}</p>
          </div>
        </div>
      </div>
    </div>
  `;
  
  document.body.insertAdjacentHTML('beforeend', modalHtml);
}

// Citas filter functionality
document.querySelectorAll('.filter-citas-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const filter = btn.dataset.filter;
    currentCitasFilter = filter;
    
    // Update active button
    document.querySelectorAll('.filter-citas-btn').forEach(b => {
      b.classList.remove('active', 'bg-pink-500', 'text-white');
      b.classList.add('bg-gray-100', 'text-gray-700');
    });
    btn.classList.add('active', 'bg-pink-500', 'text-white');
    btn.classList.remove('bg-gray-100', 'text-gray-700');
    
    renderCitas();
  });
});

// Citas refresh and export
document.getElementById('refresh-citas').addEventListener('click', loadCitasData);

document.getElementById('export-citas').addEventListener('click', function() {
  if (citasData.length === 0) {
    showNotification('No hay citas para exportar', 'error');
    return;
  }
  
  const csvContent = [
    ['ID', 'Nombre', 'Email', 'Teléfono', 'Fecha', 'Hora', 'Servicio', 'Estado', 'Mensaje', 'Creada'],
    ...citasData.map(cita => [
      cita.id,
      cita.nombre,
      cita.email,
      cita.telefono || '',
      new Date(cita.fecha).toLocaleDateString('es-ES'),
      cita.hora,
      cita.servicio,
      cita.estado,
      cita.mensaje || '',
      new Date(cita.createdAt || cita.fecha).toLocaleString('es-ES')
    ])
  ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `citas_glambook_${new Date().toISOString().split('T')[0]}.csv`;
  link.click();
  
  showNotification('Citas exportadas exitosamente', 'success');
});

// Auto-refresh citas every 30 seconds
setInterval(() => {
  if (document.getElementById('citas-tab').style.display !== 'none') {
    loadCitasData();
  }
}, 30000);

// ===== USUARIOS MANAGEMENT =====

let usuariosData = [];
let currentUsuariosFilter = 'todos';

async function loadUsuariosData() {
  try {
    const response = await fetch('/api/usuarios');
    if (response.ok) {
      usuariosData = await response.json();
      updateUsuariosStats();
      renderUsuarios();
    } else {
      console.error('Error loading usuarios:', response.status);
      showNotification('Error al cargar los usuarios', 'error');
    }
  } catch (error) {
    console.error('Error loading usuarios:', error);
    showNotification('Error de conexión al cargar usuarios', 'error');
  }
}

function updateUsuariosStats() {
  const total = usuariosData.length;
  const admins = usuariosData.filter(user => user.rol === 'admin').length;
  const clientes = usuariosData.filter(user => user.rol === 'cliente').length;
  
  document.getElementById('total-usuarios-detail').textContent = total;
  document.getElementById('admin-usuarios-detail').textContent = admins;
  document.getElementById('clientes-usuarios-detail').textContent = clientes;
}

function renderUsuarios() {
  const usuariosList = document.getElementById('usuarios-list');
  
  if (usuariosData.length === 0) {
    usuariosList.innerHTML = `
      <div class="text-center py-8">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
        </svg>
        <p class="mt-2 text-gray-500 font-poppins">No hay usuarios registrados</p>
      </div>
    `;
    return;
  }
  
  const filteredUsuarios = currentUsuariosFilter === 'todos' ? 
    usuariosData : 
    usuariosData.filter(user => user.rol === currentUsuariosFilter);
  
  if (filteredUsuarios.length === 0) {
    usuariosList.innerHTML = `
      <div class="text-center py-8">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
        </svg>
        <p class="mt-2 text-gray-500 font-poppins">No hay usuarios con este rol</p>
      </div>
    `;
    return;
  }
  
  const usuariosHtml = filteredUsuarios.map(user => {
    const rolColors = {
      'admin': 'bg-green-50 border-green-200 text-green-800',
      'cliente': 'bg-blue-50 border-blue-200 text-blue-800'
    };
    
    const rolClass = rolColors[user.rol] || 'bg-gray-50 border-gray-200 text-gray-800';
    const fechaRegistro = new Date(user.fechaRegistro).toLocaleDateString('es-ES', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    });
    
    const ultimoAcceso = user.ultimoAcceso ? 
      new Date(user.ultimoAcceso).toLocaleDateString('es-ES', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      }) : 'Nunca';
    
    return `
      <div class="usuario-card border rounded-lg p-4 bg-white shadow-sm hover:shadow-md transition-all duration-300" 
           data-rol="${user.rol}" data-id="${user.id}">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-3">
          <div class="flex-1">
            <div class="flex items-center gap-2 mb-1">
              <h3 class="font-semibold text-gray-900 font-poppins">${user.nombre}</h3>
              ${!user.activo ? '<span class="px-2 py-1 text-xs bg-red-100 text-red-800 rounded-full font-poppins">Inactivo</span>' : ''}
              ${!user.verificado ? '<span class="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full font-poppins">No verificado</span>' : ''}
            </div>
            <p class="text-sm text-gray-600 font-poppins">${user.email}</p>
          </div>
          <span class="px-3 py-1 text-xs font-medium rounded-full border ${rolClass} font-poppins mt-2 sm:mt-0">
            ${user.rol === 'admin' ? 'Administrador' : 'Cliente'}
          </span>
        </div>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 mb-3 text-sm text-gray-600 font-poppins">
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            Registro: ${fechaRegistro}
          </div>
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Último acceso: ${ultimoAcceso}
          </div>
        </div>
        
        <div class="flex flex-wrap gap-2 pt-3 border-t border-gray-100">
          ${user.rol === 'cliente' ? `
            <button onclick="cambiarRolUsuario('${user.id}', 'admin')" 
                    class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Hacer Admin
            </button>
          ` : user.email !== 'admin@glambook.com' ? `
            <button onclick="cambiarRolUsuario('${user.id}', 'cliente')" 
                    class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Hacer Cliente
            </button>
          ` : ''}
          
          ${user.activo ? `
            <button onclick="cambiarEstadoUsuario('${user.id}', false)" 
                    class="bg-orange-600 hover:bg-orange-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Desactivar
            </button>
          ` : `
            <button onclick="cambiarEstadoUsuario('${user.id}', true)" 
                    class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Activar
            </button>
          `}
          
          ${user.email !== 'admin@glambook.com' ? `
            <button onclick="eliminarUsuario('${user.id}')" 
                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Eliminar
            </button>
          ` : ''}
          
          <button onclick="verDetallesUsuario('${user.id}')" 
                  class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
            Ver Detalles
          </button>
        </div>
      </div>
    `;
  }).join('');
  
  usuariosList.innerHTML = usuariosHtml;
}

async function cambiarRolUsuario(userId, nuevoRol) {
  if (!confirm(`¿Estás seguro de que deseas cambiar el rol a ${nuevoRol === 'admin' ? 'Administrador' : 'Cliente'}?`)) {
    return;
  }
  
  try {
    const response = await fetch('/api/usuarios', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'cambiar-rol',
        id: userId,
        rol: nuevoRol
      })
    });
    
    if (response.ok) {
      showNotification(`Rol cambiado a ${nuevoRol === 'admin' ? 'Administrador' : 'Cliente'} exitosamente`, 'success');
      loadUsuariosData(); // Reload data
    } else {
      showNotification('Error al cambiar el rol del usuario', 'error');
    }
  } catch (error) {
    console.error('Error changing user role:', error);
    showNotification('Error de conexión', 'error');
  }
}

async function cambiarEstadoUsuario(userId, nuevoEstado) {
  const accion = nuevoEstado ? 'activar' : 'desactivar';
  if (!confirm(`¿Estás seguro de que deseas ${accion} este usuario?`)) {
    return;
  }
  
  try {
    const response = await fetch('/api/usuarios', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'cambiar-estado',
        id: userId,
        activo: nuevoEstado
      })
    });
    
    if (response.ok) {
      showNotification(`Usuario ${accion}do exitosamente`, 'success');
      loadUsuariosData(); // Reload data
    } else {
      showNotification(`Error al ${accion} el usuario`, 'error');
    }
  } catch (error) {
    console.error('Error changing user status:', error);
    showNotification('Error de conexión', 'error');
  }
}

async function eliminarUsuario(userId) {
  if (!confirm('¿Estás seguro de que deseas eliminar este usuario? Esta acción no se puede deshacer.')) {
    return;
  }
  
  try {
    const response = await fetch('/api/usuarios', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'eliminar',
        id: userId
      })
    });
    
    if (response.ok) {
      showNotification('Usuario eliminado exitosamente', 'success');
      loadUsuariosData(); // Reload data
    } else {
      showNotification('Error al eliminar el usuario', 'error');
    }
  } catch (error) {
    console.error('Error deleting user:', error);
    showNotification('Error de conexión', 'error');
  }
}

function verDetallesUsuario(userId) {
  const user = usuariosData.find(u => u.id === userId);
  if (!user) return;
  
  const fechaRegistro = new Date(user.fechaRegistro).toLocaleString('es-ES');
  const ultimoAcceso = user.ultimoAcceso ? 
    new Date(user.ultimoAcceso).toLocaleString('es-ES') : 'Nunca ha accedido';
  
  const modalHtml = `
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="this.remove()">
      <div class="bg-white rounded-lg max-w-lg w-full mx-4 p-6" onclick="event.stopPropagation()">
        <div class="flex justify-between items-start mb-4">
          <h3 class="text-lg font-semibold text-gray-900 font-poppins">Detalles del Usuario</h3>
          <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <div class="space-y-3">
          <div class="bg-gray-50 p-3 rounded-lg">
            <p class="font-semibold text-gray-900 font-poppins">${user.nombre}</p>
            <p class="text-sm text-gray-600 font-poppins">${user.email}</p>
          </div>
          
          <div class="grid grid-cols-2 gap-3">
            <div>
              <p class="text-sm font-medium text-gray-700 font-poppins">Rol</p>
              <span class="inline-block px-2 py-1 text-xs font-medium rounded-full ${
                user.rol === 'admin' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
              } font-poppins">
                ${user.rol === 'admin' ? 'Administrador' : 'Cliente'}
              </span>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-700 font-poppins">Estado</p>
              <span class="inline-block px-2 py-1 text-xs font-medium rounded-full ${
                user.activo ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
              } font-poppins">
                ${user.activo ? 'Activo' : 'Inactivo'}
              </span>
            </div>
          </div>
          
          <div>
            <p class="text-sm font-medium text-gray-700 font-poppins">Verificación</p>
            <span class="inline-block px-2 py-1 text-xs font-medium rounded-full ${
              user.verificado ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
            } font-poppins">
              ${user.verificado ? 'Verificado' : 'Pendiente de verificación'}
            </span>
          </div>
          
          <div>
            <p class="text-sm font-medium text-gray-700 font-poppins">Fecha de Registro</p>
            <p class="text-sm text-gray-600 font-poppins">${fechaRegistro}</p>
          </div>
          
          <div>
            <p class="text-sm font-medium text-gray-700 font-poppins">Último Acceso</p>
            <p class="text-sm text-gray-600 font-poppins">${ultimoAcceso}</p>
          </div>
          
          <div>
            <p class="text-sm font-medium text-gray-700 font-poppins">ID del Usuario</p>
            <p class="text-sm text-gray-600 font-poppins font-mono bg-gray-50 p-1 rounded">${user.id}</p>
          </div>
        </div>
      </div>
    </div>
  `;
  
  document.body.insertAdjacentHTML('beforeend', modalHtml);
}

// Usuarios filter functionality
document.querySelectorAll('.filter-usuarios-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const filter = btn.dataset.filter;
    currentUsuariosFilter = filter;
    
    // Update active button
    document.querySelectorAll('.filter-usuarios-btn').forEach(b => {
      b.classList.remove('active', 'bg-pink-500', 'text-white');
      b.classList.add('bg-gray-100', 'text-gray-700');
    });
    btn.classList.add('active', 'bg-pink-500', 'text-white');
    btn.classList.remove('bg-gray-100', 'text-gray-700');
    
    renderUsuarios();
  });
});

// Usuarios refresh and export
document.getElementById('refresh-usuarios').addEventListener('click', loadUsuariosData);

document.getElementById('export-usuarios').addEventListener('click', function() {
  if (usuariosData.length === 0) {
    showNotification('No hay usuarios para exportar', 'error');
    return;
  }
  
  const csvContent = [
    ['ID', 'Nombre', 'Email', 'Rol', 'Estado', 'Verificado', 'Fecha Registro', 'Último Acceso'],
    ...usuariosData.map(user => [
      user.id,
      user.nombre,
      user.email,
      user.rol,
      user.activo ? 'Activo' : 'Inactivo',
      user.verificado ? 'Sí' : 'No',
      new Date(user.fechaRegistro).toLocaleString('es-ES'),
      user.ultimoAcceso ? new Date(user.ultimoAcceso).toLocaleString('es-ES') : 'Nunca'
    ])
  ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `usuarios_glambook_${new Date().toISOString().split('T')[0]}.csv`;
  link.click();
  
  showNotification('Usuarios exportados exitosamente', 'success');
});

// Auto-refresh usuarios every 60 seconds
setInterval(() => {
  if (document.getElementById('usuarios-tab').style.display !== 'none') {
    loadUsuariosData();
  }
}, 60000);

// =========================
// DISPONIBILIDAD MANAGEMENT
// =========================

let bloqueosData = [];
let currentDisponibilidadFilter = 'todos';

async function loadDisponibilidadData() {
  try {
    const response = await fetch('/api/disponibilidad');
    const result = await response.json();
    
    if (result.success) {
      bloqueosData = result.data;
      renderDisponibilidad();
      updateDisponibilidadStats();
      console.log('✅ Bloqueos cargados:', bloqueosData.length);
    } else {
      console.error('❌ Error loading bloqueos:', result.message);
      showNotification('Error al cargar los bloqueos', 'error');
    }
  } catch (error) {
    console.error('❌ Error fetching bloqueos:', error);
    showNotification('Error de conexión al cargar bloqueos', 'error');
  }
}

function updateDisponibilidadStats() {
  const totalBloqueos = bloqueosData.filter(b => b.activo).length;
  const diasCompletos = bloqueosData.filter(b => b.activo && b.tipo === 'dia_completo').length;
  const horariosEspecificos = bloqueosData.filter(b => b.activo && b.tipo === 'horario_especifico').length;
  const rangosFechas = bloqueosData.filter(b => b.activo && b.tipo === 'rango_fechas').length;

  const elements = [
    { id: 'total-bloqueos-detail', value: totalBloqueos },
    { id: 'dias-completos-detail', value: diasCompletos },
    { id: 'horarios-especificos-detail', value: horariosEspecificos },
    { id: 'rangos-fechas-detail', value: rangosFechas }
  ];

  elements.forEach(({ id, value }) => {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = value;
    }
  });
}

function renderDisponibilidad() {
  const bloqueosList = document.getElementById('bloqueos-list');
  if (!bloqueosList) return;

  let filteredBloqueos = [...bloqueosData];

  // Apply filters
  if (currentDisponibilidadFilter === 'activos') {
    filteredBloqueos = filteredBloqueos.filter(b => b.activo);
  } else if (currentDisponibilidadFilter !== 'todos') {
    filteredBloqueos = filteredBloqueos.filter(b => b.tipo === currentDisponibilidadFilter);
  }

  if (filteredBloqueos.length === 0) {
    bloqueosList.innerHTML = `
      <div class="text-center py-8">
        <div class="text-gray-400 text-4xl mb-4">📅</div>
        <p class="text-gray-600 font-poppins">No hay bloqueos para mostrar</p>
        <button onclick="document.getElementById('crear-bloqueo-btn').click()" class="mt-4 admin-button-primary text-sm">
          Crear primer bloqueo
        </button>
      </div>
    `;
    return;
  }

  const bloqueosHtml = filteredBloqueos.map(bloqueo => {
    const tipoLabel = {
      'dia_completo': 'Día Completo',
      'horario_especifico': 'Horario Específico', 
      'rango_fechas': 'Rango de Fechas'
    }[bloqueo.tipo];

    const tipoColor = {
      'dia_completo': 'bg-red-100 text-red-800',
      'horario_especifico': 'bg-orange-100 text-orange-800',
      'rango_fechas': 'bg-purple-100 text-purple-800'
    }[bloqueo.tipo];

    let fechaInfo = '';
    if (bloqueo.tipo === 'dia_completo') {
      fechaInfo = formatDate(bloqueo.fecha);
    } else if (bloqueo.tipo === 'horario_especifico') {
      fechaInfo = `${formatDate(bloqueo.fecha)} • ${bloqueo.horaInicio} - ${bloqueo.horaFin}`;
    } else if (bloqueo.tipo === 'rango_fechas') {
      fechaInfo = `${formatDate(bloqueo.fechaInicio)} - ${formatDate(bloqueo.fechaFin)}`;
    }

    return `
      <div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
        <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
          <div class="flex-1">
            <div class="flex items-start gap-3">
              <div class="flex-shrink-0">
                <span class="text-2xl">${bloqueo.tipo === 'dia_completo' ? '🚫' : bloqueo.tipo === 'horario_especifico' ? '⏰' : '📊'}</span>
              </div>
              <div class="flex-1">
                <div class="flex items-center gap-2 mb-2">
                  <span class="px-2 py-1 text-xs font-medium rounded-full ${tipoColor} font-poppins">
                    ${tipoLabel}
                  </span>
                  <span class="px-2 py-1 text-xs font-medium rounded-full ${bloqueo.activo ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'} font-poppins">
                    ${bloqueo.activo ? 'Activo' : 'Inactivo'}
                  </span>
                </div>
                
                <h3 class="font-semibold text-gray-900 font-poppins mb-1">${bloqueo.motivo}</h3>
                <p class="text-sm text-gray-600 font-poppins">${fechaInfo}</p>
                <p class="text-xs text-gray-500 font-poppins mt-2">
                  Creado: ${formatDate(bloqueo.createdAt)}
                </p>
              </div>
            </div>
          </div>
          
          <div class="flex items-center gap-2">
            <button onclick="toggleBloqueoEstado('${bloqueo.id}')" 
                    class="${bloqueo.activo ? 'bg-yellow-500 hover:bg-yellow-600' : 'bg-green-500 hover:bg-green-600'} text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              ${bloqueo.activo ? 'Desactivar' : 'Activar'}
            </button>
            
            <button onclick="eliminarBloqueo('${bloqueo.id}')" 
                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm font-poppins transition-colors">
              Eliminar
            </button>
          </div>
        </div>
      </div>
    `;
  }).join('');

  bloqueosList.innerHTML = bloqueosHtml;
}

async function crearBloqueo() {
  const tipo = document.getElementById('tipo-bloqueo').value;
  const motivo = document.getElementById('motivo-bloqueo').value.trim();

  if (!motivo) {
    showNotification('El motivo es obligatorio', 'error');
    return;
  }

  let bloqueoData = {
    action: 'crear-bloqueo',
    tipo,
    motivo
  };

  // Add specific fields based on type
  if (tipo === 'dia_completo') {
    const fecha = document.getElementById('fecha-bloqueo').value;
    if (!fecha) {
      showNotification('La fecha es obligatoria', 'error');
      return;
    }
    bloqueoData.fecha = fecha;
  } else if (tipo === 'horario_especifico') {
    const fecha = document.getElementById('fecha-bloqueo').value;
    const horaInicio = document.getElementById('hora-inicio-bloqueo').value;
    const horaFin = document.getElementById('hora-fin-bloqueo').value;
    
    if (!fecha || !horaInicio || !horaFin) {
      showNotification('Fecha, hora inicio y hora fin son obligatorias', 'error');
      return;
    }
    
    if (horaInicio >= horaFin) {
      showNotification('La hora de inicio debe ser menor que la hora de fin', 'error');
      return;
    }
    
    bloqueoData.fecha = fecha;
    bloqueoData.horaInicio = horaInicio;
    bloqueoData.horaFin = horaFin;
  } else if (tipo === 'rango_fechas') {
    const fechaInicio = document.getElementById('fecha-inicio-bloqueo').value;
    const fechaFin = document.getElementById('fecha-fin-bloqueo').value;
    
    if (!fechaInicio || !fechaFin) {
      showNotification('Fecha de inicio y fecha de fin son obligatorias', 'error');
      return;
    }
    
    if (fechaInicio > fechaFin) {
      showNotification('La fecha de inicio debe ser menor o igual que la fecha de fin', 'error');
      return;
    }
    
    bloqueoData.fechaInicio = fechaInicio;
    bloqueoData.fechaFin = fechaFin;
  }

  try {
    const response = await fetch('/api/disponibilidad', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(bloqueoData)
    });

    const result = await response.json();

    if (result.success) {
      showNotification('Bloqueo creado exitosamente', 'success');
      cerrarModalBloqueo();
      loadDisponibilidadData();
    } else {
      showNotification(result.message || 'Error al crear el bloqueo', 'error');
    }
  } catch (error) {
    console.error('Error creating bloqueo:', error);
    showNotification('Error de conexión', 'error');
  }
}

async function toggleBloqueoEstado(bloqueoId) {
  try {
    const response = await fetch('/api/disponibilidad', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'toggle-bloqueo',
        id: bloqueoId
      })
    });

    const result = await response.json();

    if (result.success) {
      showNotification(result.message, 'success');
      loadDisponibilidadData();
    } else {
      showNotification(result.message || 'Error al cambiar estado del bloqueo', 'error');
    }
  } catch (error) {
    console.error('Error toggling bloqueo status:', error);
    showNotification('Error de conexión', 'error');
  }
}

async function eliminarBloqueo(bloqueoId) {
  if (!confirm('¿Estás seguro de que deseas eliminar este bloqueo? Esta acción no se puede deshacer.')) {
    return;
  }

  try {
    const response = await fetch('/api/disponibilidad', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'eliminar-bloqueo',
        id: bloqueoId
      })
    });

    const result = await response.json();

    if (result.success) {
      showNotification('Bloqueo eliminado exitosamente', 'success');
      loadDisponibilidadData();
    } else {
      showNotification(result.message || 'Error al eliminar el bloqueo', 'error');
    }
  } catch (error) {
    console.error('Error deleting bloqueo:', error);
    showNotification('Error de conexión', 'error');
  }
}

function mostrarModalBloqueo() {
  document.getElementById('modal-bloqueo').style.display = 'flex';
  document.getElementById('modal-bloqueo').classList.remove('hidden');
  
  // Reset form
  document.getElementById('form-bloqueo').reset();
  
  // Set default date to today
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('fecha-bloqueo').value = today;
  document.getElementById('fecha-inicio-bloqueo').value = today;
  
  // Update form based on initial type
  updateFormFields();
}

function cerrarModalBloqueo() {
  document.getElementById('modal-bloqueo').style.display = 'none';
  document.getElementById('modal-bloqueo').classList.add('hidden');
}

function updateFormFields() {
  const tipo = document.getElementById('tipo-bloqueo').value;
  const campoFecha = document.getElementById('campo-fecha');
  const camposRango = document.getElementById('campos-rango');
  const camposHorarios = document.getElementById('campos-horarios');

  // Reset all fields
  campoFecha.classList.add('hidden');
  camposRango.classList.add('hidden');
  camposHorarios.classList.add('hidden');

  // Show relevant fields
  if (tipo === 'dia_completo') {
    campoFecha.classList.remove('hidden');
  } else if (tipo === 'horario_especifico') {
    campoFecha.classList.remove('hidden');
    camposHorarios.classList.remove('hidden');
  } else if (tipo === 'rango_fechas') {
    camposRango.classList.remove('hidden');
  }
}

// Event listeners for disponibilidad
document.getElementById('crear-bloqueo-btn')?.addEventListener('click', mostrarModalBloqueo);
document.getElementById('cerrar-modal-bloqueo')?.addEventListener('click', cerrarModalBloqueo);
document.getElementById('cancelar-bloqueo')?.addEventListener('click', cerrarModalBloqueo);
document.getElementById('tipo-bloqueo')?.addEventListener('change', updateFormFields);
document.getElementById('refresh-disponibilidad')?.addEventListener('click', loadDisponibilidadData);

document.getElementById('form-bloqueo')?.addEventListener('submit', (e) => {
  e.preventDefault();
  crearBloqueo();
});

// Modal close on outside click
document.getElementById('modal-bloqueo')?.addEventListener('click', (e) => {
  if (e.target === e.currentTarget) {
    cerrarModalBloqueo();
  }
});

// Disponibilidad filter functionality
document.querySelectorAll('.filter-disponibilidad-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const filter = btn.dataset.filter;
    currentDisponibilidadFilter = filter;
    
    // Update active button
    document.querySelectorAll('.filter-disponibilidad-btn').forEach(b => {
      b.classList.remove('active', 'bg-pink-500', 'text-white');
      b.classList.add('bg-gray-100', 'text-gray-700');
    });
    btn.classList.add('active', 'bg-pink-500', 'text-white');
    btn.classList.remove('bg-gray-100', 'text-gray-700');
    
    renderDisponibilidad();
  });
});

// Auto-refresh disponibilidad every 60 seconds
setInterval(() => {
  if (document.getElementById('disponibilidad-tab').style.display !== 'none') {
    loadDisponibilidadData();
  }
}, 60000);
</script>

<style>
  .font-poppins {
    font-family: 'Poppins', sans-serif;
  }
  
  .tab-btn.active {
    border-bottom-color: #ec4899;
    color: #ec4899;
  }
</style>