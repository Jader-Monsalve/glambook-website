---
import AdminLayout from '../layouts/AdminLayout.astro';
export const prerender = false;

const title = "Dashboard Admin - GlamBook";
---

<AdminLayout title={title}>
  <!-- Loading Screen -->
  <div id="loading-screen" class="fixed inset-0 bg-white z-50 flex items-center justify-center">
    <div class="text-center">
      <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-pink-500 mx-auto mb-4"></div>
      <p class="text-gray-600 font-poppins">Cargando dashboard...</p>
    </div>
  </div>

  <!-- Auth Check Script -->
  <script type="module">
    const isAuthenticated = localStorage.getItem('glambook_auth') === 'true';
    if (!isAuthenticated) {
      window.location.href = '/login?redirect=admin';
    } else {
      document.getElementById('loading-screen').style.display = 'none';
      const dashboard = document.getElementById('content-dashboard');
      if (dashboard) dashboard.style.display = 'block';
    }
  </script>
<style>
  .animate-fade-in {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>
<!-- Navigation Tabs -->
<div class="mt-8"></div>
<div class="bg-white rounded-xl shadow-sm border border-gray-200 mb-6">
  <!-- Tab Headers -->
  <div class="flex flex-wrap border-b border-gray-200 px-4 sm:px-6">
    <button 
      id="tab-dashboard" 
      onclick="switchTab('dashboard')"
      class="tab-button px-3 sm:px-6 py-3 sm:py-4 text-sm font-medium border-b-2 border-pink-500 text-pink-600 bg-pink-50"
    >
      <span class="flex items-center gap-2">
  <svg class="w-5 h-5 text-pink-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M3 12l2-2m0 0l7-7 7 7m-9 2v6a2 2 0 002 2h4a2 2 0 002-2v-6m-6 0h6"/></svg>
        <span class="hidden sm:inline">Dashboard</span>
      </span>
    </button>
    <button 
      id="tab-testimonios" 
      onclick="switchTab('testimonios')"
      class="tab-button px-3 sm:px-6 py-3 sm:py-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
    >
      <span class="flex items-center gap-2">
  <svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M8 10h.01M12 10h.01M16 10h.01M21 12c0 4.418-4.03 8-9 8a9.77 9.77 0 01-4-.8l-4 1 1-4A8.96 8.96 0 013 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/></svg>
        <span class="hidden sm:inline">Testimonios</span>
        <span id="badge-testimonios" class="ml-1 bg-red-500 text-white text-xs px-2 py-1 rounded-full min-w-[20px] text-center hidden"></span>
      </span>
    </button>
    <button 
      id="tab-citas" 
      onclick="switchTab('citas')"
      class="tab-button px-3 sm:px-6 py-3 sm:py-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
    >
      <span class="flex items-center gap-2">
  <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect width="18" height="18" x="3" y="4" rx="2" ry="2" stroke-linecap="round" stroke-linejoin="round"/><path stroke-linecap="round" stroke-linejoin="round" d="M16 2v4M8 2v4M3 10h18"/></svg>
        <span class="hidden sm:inline">Citas</span>
        <span id="badge-citas" class="ml-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full min-w-[20px] text-center hidden"></span>
      </span>
    </button>
    <button 
      id="tab-calendario" 
      onclick="switchTab('calendario')"
      class="tab-button px-3 sm:px-6 py-3 sm:py-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
    >
      <span class="flex items-center gap-2">
  <svg class="w-5 h-5 text-orange-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M3 3v18h18"/><rect width="3" height="7" x="7" y="10" rx="1"/><rect width="3" height="12" x="12" y="5" rx="1"/></svg>
        <span class="hidden sm:inline">Calendario</span>
      </span>
    </button>
  </div>

  <!-- Tab Content -->
  <div class="p-4 sm:p-6">
    <!-- Dashboard Tab -->
    <div id="content-dashboard" class="tab-content">
      <div class="space-y-6">
        <!-- Welcome Section -->
        <div class="bg-gradient-to-r from-pink-500 to-purple-600 rounded-xl p-6 text-white">
          <h2 class="text-2xl sm:text-3xl font-bold font-poppins mb-2">Panel de Control 🚀</h2>
          <p class="text-pink-100 font-poppins">Administra tu negocio de belleza desde aquí</p>
        </div>

        <!-- Quick Actions -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <button onclick="switchTab('testimonios')" class="bg-blue-50 hover:bg-blue-100 text-blue-700 p-4 rounded-xl transition-colors text-left">
            <div class="text-2xl mb-2">💬</div>
            <div class="font-semibold font-poppins">Testimonios</div>
            <div class="text-sm text-blue-600" id="quick-testimonios">0 pendientes</div>
          </button>
          
          <button onclick="switchTab('citas')" class="bg-green-50 hover:bg-green-100 text-green-700 p-4 rounded-xl transition-colors text-left">
            <div class="text-2xl mb-2">📅</div>
            <div class="font-semibold font-poppins">Citas</div>
            <div class="text-sm text-green-600" id="quick-citas">0 pendientes</div>
          </button>
          <button onclick="switchTab('usuarios')" class="bg-purple-50 hover:bg-purple-100 text-purple-700 p-4 rounded-xl transition-colors text-left">
            <div class="mb-2"><svg class="w-7 h-7 text-purple-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M17 20h5v-2a4 4 0 00-3-3.87M9 20H4v-2a4 4 0 013-3.87m9-5a4 4 0 11-8 0 4 4 0 018 0z"/></svg></div>
            <div class="font-semibold font-poppins">Usuarios</div>
            <div class="text-sm text-purple-600" id="quick-usuarios">0 activos</div>
            <div class="text-xs text-gray-500 mt-1">Total: <span id="total-usuarios">0</span></div>
          </button>
          
          <button onclick="switchTab('calendario')" class="bg-orange-50 hover:bg-orange-100 text-orange-700 p-4 rounded-xl transition-colors text-left">
            <div class="text-2xl mb-2">📊</div>
            <div class="font-semibold font-poppins">Calendario</div>
            <div class="text-sm text-orange-600">Gestionar fechas</div>
          </button>
        </div>

        <!-- Recent Activity & Analytics -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Recent Activity -->
          <div class="bg-white rounded-xl shadow-sm border p-6">
            <h3 class="text-lg font-semibold text-gray-800 font-poppins mb-4">📊 Actividad Reciente</h3>
            <div id="recent-activity" class="space-y-3">
              <!-- Se llenará dinámicamente -->
            </div>
          </div>

          <!-- Analytics -->
          <div class="bg-white rounded-xl shadow-sm border p-6">
            <h3 class="text-lg font-semibold text-gray-800 font-poppins mb-4">📈 Análiticas del Día</h3>
            <div id="analytics-dashboard" class="space-y-4">
              <!-- Se llenará dinámicamente -->
            </div>
          </div>
        </div>

        <!-- Weekly Overview -->
        <div class="bg-white rounded-xl shadow-sm border p-6">
          <h3 class="text-lg font-semibold text-gray-800 font-poppins mb-4">📅 Vista Semanal</h3>
          <div id="weekly-overview" class="grid grid-cols-1 sm:grid-cols-7 gap-2">
            <!-- Se llenará dinámicamente -->
          </div>
        </div>

        <!-- Top Services -->
        <div class="bg-white rounded-xl shadow-sm border p-6">
          <h3 class="text-lg font-semibold text-gray-800 font-poppins mb-4">🏆 Servicios Más Populares</h3>
          <div id="top-services" class="space-y-3">
            <!-- Se llenará dinámicamente -->
          </div>
        </div>
      </div>
    </div>

    <!-- Testimonios Tab -->
    <div id="content-testimonios" class="tab-content hidden">
      <div class="space-y-6">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h3 class="text-xl font-bold text-gray-800 font-poppins">Gestión de Testimonios</h3>
            <p class="text-gray-600 font-poppins">Administra las reseñas de tus clientes</p>
          </div>
          
          <!-- Filtros -->
          <div class="flex flex-wrap gap-2">
            <button onclick="filtrarTestimonios('todos')" id="filtro-todos" class="filtro-btn bg-pink-500 text-white px-4 py-2 rounded-lg font-poppins text-sm">
              Todos
            </button>
            <button onclick="filtrarTestimonios('pendientes')" id="filtro-pendientes" class="filtro-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-poppins text-sm">
              Pendientes
            </button>
            <button onclick="filtrarTestimonios('aprobados')" id="filtro-aprobados" class="filtro-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-poppins text-sm">
              Aprobados
            </button>
          </div>
        </div>
        
        <div id="testimonios-loading" class="text-center py-8">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-pink-500 mx-auto"></div>
          <p class="text-gray-500 mt-2">Cargando testimonios...</p>
        </div>
        
        <div id="testimonios-content" class="hidden">
          <div id="testimonios-lista" class="space-y-4">
            <!-- Se llenará dinámicamente -->
          </div>
        </div>
      </div>
    </div>

    <!-- Citas Tab -->
    <div id="content-citas" class="tab-content hidden">
      <div class="space-y-6">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h3 class="text-xl font-bold text-gray-800 font-poppins">Gestión de Citas</h3>
            <p class="text-gray-600 font-poppins">Administra las reservas de tus clientes</p>
          </div>
          
          <!-- Filtros -->
          <div class="flex flex-wrap gap-2">
            <button onclick="filtrarCitas('todas')" id="filtro-citas-todas" class="filtro-citas-btn bg-green-500 text-white px-4 py-2 rounded-lg font-poppins text-sm">
              Todas
            </button>
            <button onclick="filtrarCitas('pendiente')" id="filtro-citas-pendiente" class="filtro-citas-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-poppins text-sm">
              Pendientes
            </button>
            <button onclick="filtrarCitas('confirmada')" id="filtro-citas-confirmada" class="filtro-citas-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-poppins text-sm">
              Confirmadas
            </button>
          </div>
        </div>
        
        <div id="citas-loading" class="text-center py-8">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-green-500 mx-auto"></div>
          <p class="text-gray-500 mt-2">Cargando citas...</p>
        </div>
        
        <div id="citas-content" class="hidden">
          <div id="citas-lista" class="space-y-4">
            <!-- Se llenará dinámicamente -->
          </div>
        </div>
      </div>
    </div>

    <!-- Usuarios Tab -->
    <div id="content-usuarios" class="tab-content hidden">
      <div class="space-y-6">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h3 class="text-xl font-bold text-gray-800 font-poppins">Gestión de Usuarios</h3>
            <p class="text-gray-600 font-poppins">Administra los usuarios del sistema</p>
          </div>
          
          <!-- Filtros -->
          <div class="flex flex-wrap gap-2">
            <button onclick="filtrarUsuarios('todos')" id="filtro-usuarios-todos" class="filtro-usuarios-btn bg-purple-500 text-white px-4 py-2 rounded-lg font-poppins text-sm">
              Todos
            </button>
            <button onclick="filtrarUsuarios('admin')" id="filtro-usuarios-admin" class="filtro-usuarios-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-poppins text-sm">
              Admins
            </button>
            <button onclick="filtrarUsuarios('cliente')" id="filtro-usuarios-cliente" class="filtro-usuarios-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-poppins text-sm">
              Clientes
            </button>
          </div>
        </div>
        
        <div id="usuarios-loading" class="text-center py-8">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500 mx-auto"></div>
          <p class="text-gray-500 mt-2">Cargando usuarios...</p>
        </div>
        
        <div id="usuarios-content" class="hidden">
          <!-- Lista de usuarios eliminada del dashboard -->
            <!-- Se llenará dinámicamente -->
          </div>
        </div>
      </div>
    </div>

    <!-- Calendario Tab -->
    <div id="content-calendario" class="tab-content hidden">
      <div class="space-y-6">
        <div>
          <h3 class="text-xl font-bold text-gray-800 font-poppins">Calendario Administrativo</h3>
          <p class="text-gray-600 font-poppins">Gestiona disponibilidad y fechas bloqueadas</p>
        </div>

        <!-- Calendario y controles -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Calendario -->
          <div class="lg:col-span-2 bg-white rounded-xl border shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h4 class="font-semibold text-gray-800 font-poppins">Octubre 2024</h4>
              <div class="flex gap-2">
                <button class="p-2 hover:bg-gray-100 rounded">←</button>
                <button class="p-2 hover:bg-gray-100 rounded">→</button>
              </div>
            </div>
            <div id="admin-calendar" class="calendar-grid">
              <!-- Se generará dinámicamente -->
            </div>
          </div>

          <!-- Controles -->
          <div class="space-y-4">
            <!-- Bloquear fecha -->
            <div class="bg-white rounded-xl border shadow-sm p-4">
              <h5 class="font-semibold text-gray-800 font-poppins mb-3">Bloquear Fecha</h5>
              <form id="form-bloquear-fecha" class="space-y-3">
                <input 
                  type="date" 
                  id="fecha-bloquear"
                  class="w-full p-2 border rounded-lg"
                  required
                >
                <input 
                  type="text" 
                  id="motivo-bloqueo"
                  placeholder="Motivo del bloqueo"
                  class="w-full p-2 border rounded-lg"
                  required
                >
                <button 
                  type="submit"
                  class="w-full bg-red-500 text-white py-2 rounded-lg hover:bg-red-600"
                >
                  Bloquear Fecha
                </button>
              </form>
            </div>

            <!-- Fechas bloqueadas -->
            <div class="bg-white rounded-xl border shadow-sm p-4">
              <h5 class="font-semibold text-gray-800 font-poppins mb-3">Fechas Bloqueadas</h5>
              <div id="fechas-bloqueadas-lista" class="space-y-2">
                <!-- Se llenará dinámicamente -->
              </div>
            </div>

            <!-- Recordatorios -->
            <div class="bg-white rounded-xl border shadow-sm p-4">
              <h5 class="font-semibold text-gray-800 font-poppins mb-3">Recordatorios</h5>
              <button 
                id="enviar-recordatorios"
                onclick="enviarRecordatorios()"
                class="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600"
              >
                Enviar Recordatorios
              </button>
              <p class="text-xs text-gray-500 mt-2">Envía recordatorios automáticos por email</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
// Variables globales
let currentTab = 'dashboard';
let testimoniosData: any[] = [];
let citasData: any[] = [];
let usuariosData: any[] = [];
let fechasBloqueadasData: any[] = [];

// Variables para tiempo real
let dashboardUpdateInterval: number | null = null;

// Inicialización
document.addEventListener('DOMContentLoaded', function() {
  initializeAdmin();
  startDashboardAutoUpdate();
});

async function initializeAdmin() {
  try {
    await Promise.all([
      cargarEstadisticas(),
      cargarTestimonios(),
      cargarCitas(),
      cargarUsuarios()
    ]);
    
    updateConnectionStatus('conectado');
    
    // Cargar tab inicial
    switchTab('dashboard');
    
    // Configurar eventos
    setupEventListeners();
    
    // Inicializar dashboard analytics
    initializeDashboard();
    
    // Actualizar cada 30 segundos
    setInterval(actualizarDashboardEnTiempoReal, 30000);
    
  } catch (error) {
    console.error('Error inicializando admin:', error);
    updateConnectionStatus('error');
  }
}

function initializeDashboard() {
  generarActividadReciente();
  generarAnalyticsDia();
  generarVistaSemanal();
  generarServiciosPopulares();
}

function generarActividadReciente() {
  const container = document.getElementById('recent-activity');
  if (!container) return;

  const actividades = [
    { tipo: 'cita', mensaje: 'Nueva cita reservada por María González', tiempo: 'hace 2 min', icon: '📅', color: 'green' },
    { tipo: 'testimonio', mensaje: 'Testimonio pendiente de Ana López', tiempo: 'hace 5 min', icon: '💬', color: 'blue' },
    { tipo: 'usuario', mensaje: 'Usuario Carmen Silva se registró', tiempo: 'hace 12 min', icon: '👤', color: 'purple' },
    { tipo: 'sistema', mensaje: 'Recordatorio enviado a 3 clientes', tiempo: 'hace 15 min', icon: '📧', color: 'orange' },
    { tipo: 'cita', mensaje: 'Cita completada: Uñas acrílicas', tiempo: 'hace 25 min', icon: '✅', color: 'green' }
  ];

  container.innerHTML = actividades.map(actividad => `
    <div class="flex items-center space-x-3 text-sm text-gray-600 p-2 hover:bg-gray-50 rounded-lg transition-colors">
      <div class="w-2 h-2 bg-${actividad.color}-400 rounded-full"></div>
      <span class="text-lg">${actividad.icon}</span>
      <span class="font-poppins flex-1">${actividad.mensaje}</span>
      <span class="text-gray-400 text-xs">${actividad.tiempo}</span>
    </div>
  `).join('');
}

function generarAnalyticsDia() {
  const container = document.getElementById('analytics-dashboard');
  if (!container) return;

  // Simular datos del día
  const hoy = new Date().toLocaleDateString('es-ES');
  const citasHoy = citasData.filter(c => new Date(c.fecha).toLocaleDateString('es-ES') === hoy);
  const testimoniosHoy = testimoniosData.filter(t => new Date(t.fecha).toLocaleDateString('es-ES') === hoy);

  const analytics = [
    { label: 'Citas Hoy', value: citasHoy.length, icon: '📅', color: 'green', trend: '+12%' },
    { label: 'Ingresos Est.', value: '$' + (citasHoy.length * 45000).toLocaleString(), icon: '💰', color: 'blue', trend: '+8%' },
    { label: 'Testimonios', value: testimoniosHoy.length, icon: '⭐', color: 'yellow', trend: '+25%' },
    { label: 'Sat. Cliente', value: '98%', icon: '😊', color: 'pink', trend: '+2%' }
  ];

  container.innerHTML = analytics.map(stat => `
    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
      <div class="flex items-center gap-3">
        <span class="text-xl">${stat.icon}</span>
        <div>
          <p class="text-xs text-gray-500">${stat.label}</p>
          <p class="font-bold text-gray-800">${stat.value}</p>
        </div>
      </div>
      <span class="text-xs text-${stat.color}-600 font-semibold">${stat.trend}</span>
    </div>
  `).join('');
}

function generarVistaSemanal() {
  const container = document.getElementById('weekly-overview');
  if (!container) return;

  const diasSemana = ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];
  const hoy = new Date();
  
  container.innerHTML = diasSemana.map((dia, index) => {
    const fecha = new Date(hoy);
    fecha.setDate(hoy.getDate() - hoy.getDay() + index);
    
    const citasDelDia = citasData.filter(c => 
      new Date(c.fecha).toDateString() === fecha.toDateString()
    ).length;

    const esHoy = fecha.toDateString() === hoy.toDateString();
    
    return `
      <div class="text-center p-3 rounded-lg ${esHoy ? 'bg-pink-100' : 'bg-gray-50'} transition-colors">
        <p class="text-xs font-semibold text-gray-600">${dia}</p>
        <p class="text-lg font-bold ${esHoy ? 'text-pink-600' : 'text-gray-800'}">${fecha.getDate()}</p>
        <div class="flex items-center justify-center gap-1 mt-1">
          <span class="text-xs text-gray-500">${citasDelDia}</span>
          <span class="text-xs">📅</span>
        </div>
        ${esHoy ? '<div class="w-2 h-2 bg-pink-500 rounded-full mx-auto mt-1"></div>' : ''}
      </div>
    `;
  }).join('');
}

function generarServiciosPopulares() {
  const container = document.getElementById('top-services');
  if (!container) return;

  // Contar servicios más populares
  const serviciosCount = citasData.reduce((acc: any, cita) => {
    const servicio = cita.servicio || cita.servicioNombre || 'Otro';
    acc[servicio] = (acc[servicio] || 0) + 1;
    return acc;
  }, {});

  const topServicios = Object.entries(serviciosCount)
    .map(([servicio, count]) => ({ servicio, count }))
    .sort((a, b) => (b.count as number) - (a.count as number))
    .slice(0, 5);

  const iconos = {
    'unas-acrilicas': '💅',
    'unas-naturales': '✨',
    'maquillaje': '💄',
    'cejas': '🎯',
    'pestanas': '👁️',
    'peinados': '💇‍♀️'
  };

  container.innerHTML = topServicios.map((item, index) => {
    const porcentaje = Math.round((item.count as number) / citasData.length * 100);
    const icono = iconos[item.servicio as keyof typeof iconos] || '⭐';
    
    return `
      <div class="flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg transition-colors">
        <div class="flex items-center gap-3">
          <span class="text-lg">${icono}</span>
          <div>
            <p class="font-semibold text-gray-800">${item.servicio}</p>
            <p class="text-xs text-gray-500">${item.count} citas</p>
          </div>
        </div>
        <div class="text-right">
          <span class="text-sm font-bold text-gray-800">${porcentaje}%</span>
          <div class="w-16 h-2 bg-gray-200 rounded-full mt-1">
            <div class="h-2 bg-pink-500 rounded-full" style="width: ${porcentaje}%"></div>
          </div>
        </div>
      </div>
    `;
  }).join('');
}

async function actualizarDashboardEnTiempoReal() {
  try {
    // Recargar datos silenciosamente
    await Promise.all([
      cargarEstadisticas(),
      cargarTestimonios(),
      cargarCitas(),
      cargarUsuarios()
    ]);
    
    // Actualizar dashboard si está visible
    if (currentTab === 'dashboard') {
      initializeDashboard();
    }
    
    // Actualizar timestamp
    const now = new Date();
    console.log(`📊 Dashboard actualizado: ${now.toLocaleTimeString()}`);
    
  } catch (error) {
    console.error('Error actualizando dashboard:', error);
  }
}

function setupEventListeners() {
  // Form bloquear fecha
  const formBloquear = document.getElementById('form-bloquear-fecha');
  if (formBloquear) {
    formBloquear.addEventListener('submit', async (e) => {
      e.preventDefault();
      await bloquearFecha();
    });
  }
}

// Navegación entre tabs
function switchTab(tabName: string) {
  currentTab = tabName;
  
  // Actualizar botones
  document.querySelectorAll('.tab-button').forEach(btn => {
    btn.classList.remove('border-pink-500', 'text-pink-600', 'bg-pink-50');
    btn.classList.add('border-transparent', 'text-gray-500');
  });
  
  const activeBtn = document.getElementById(`tab-${tabName}`);
  if (activeBtn) {
    activeBtn.classList.remove('border-transparent', 'text-gray-500');
    activeBtn.classList.add('border-pink-500', 'text-pink-600', 'bg-pink-50');
  }
  
  // Mostrar contenido correspondiente
  document.querySelectorAll('.tab-content').forEach(content => {
    content.classList.add('hidden');
  });
  
  const activeContent = document.getElementById(`content-${tabName}`);
  if (activeContent) {
    activeContent.classList.remove('hidden');
  }
  
  // Cargar datos específicos del tab
  switch(tabName) {
    case 'testimonios':
      renderTestimonios();
      break;
    case 'citas':
      renderCitas();
      break;
    case 'usuarios':
      renderUsuarios();
      break;
    case 'calendario':
      renderCalendario();
      break;
  }
}

// Estadísticas generales
async function cargarEstadisticas() {
  try {
    const responses = await Promise.all([
      fetch('/api/testimonios?action=pendientes'),
      fetch('/api/citas?action=todas'), 
      fetch('/api/usuarios?action=stats')
    ]);

    const [testimoniosRes, citasRes, usuariosRes] = responses;
    
    if (testimoniosRes.ok) {
      const testimoniosResult = await testimoniosRes.json();
      if (testimoniosResult.success) {
        // stats = { totalAprobados, totalPendientes, promedioCalificacion, servicioMasPopular }
        const stats = testimoniosResult.data;
        updateElement('total-testimonios', stats.totalAprobados);
        updateElement('quick-testimonios', `${stats.totalPendientes} pendientes`);
        
        const badge = document.getElementById('badge-testimonios');
        if (stats.totalPendientes > 0 && badge) {
          badge.textContent = stats.totalPendientes;
          badge.classList.remove('hidden');
        }
      }
    }

    if (citasRes.ok) {
      const citasResult = await citasRes.json();
      if (citasResult.success) {
        // citasResult.data es un array de citas
        const citas = citasResult.data;
        const total = Array.isArray(citas) ? citas.length : 0;
        const pendientes = Array.isArray(citas) ? citas.filter(c => c.estado === 'pendiente').length : 0;
        updateElement('total-citas', total);
        updateElement('quick-citas', `${pendientes} pendientes`);
        
        const badge = document.getElementById('badge-citas');
        if (pendientes > 0 && badge) {
          badge.textContent = pendientes.toString();
          badge.classList.remove('hidden');
        }
      }
    }

    if (usuariosRes.ok) {
      const usuariosResult = await usuariosRes.json();
      if (usuariosResult.success && usuariosResult.data && usuariosResult.data.estadisticas) {
        const stats = usuariosResult.data.estadisticas;
        updateElement('total-usuarios', stats.total);
        updateElement('quick-usuarios', `${stats.activos} activos`);
      } else {
        // Si no hay estadísticas, mostrar 0 o advertencia
        updateElement('total-usuarios', 0);
        updateElement('quick-usuarios', `0 activos`);
        console.warn('No se encontraron estadísticas de usuarios en la respuesta de la API.');
      }
    }

  } catch (error) {
    console.error('Error cargando estadísticas:', error);
  }
}

// Testimonios
async function cargarTestimonios() {
  try {
    // Cargar testimonios pendientes y aprobados
    const [responsePendientes, responseAprobados] = await Promise.all([
      fetch('/api/testimonios?action=pendientes'),
      fetch('/api/testimonios?action=aprobados')
    ]);
    
    const resultPendientes = await responsePendientes.json();
    const resultAprobados = await responseAprobados.json();
    
    if (resultPendientes.success && resultAprobados.success) {
      const pendientes = resultPendientes.data.map((t: any) => ({ ...t, aprobado: false }));
      const aprobados = resultAprobados.data.map((t: any) => ({ ...t, aprobado: true }));
      
      testimoniosData = [...pendientes, ...aprobados];
      console.log(`✅ Dashboard: ${testimoniosData.length} testimonios cargados (${pendientes.length} pendientes, ${aprobados.length} aprobados)`);
      
      // Actualizar estadísticas en tiempo real
      actualizarEstadisticasTestimonios();
    }
  } catch (error) {
    console.error('Error cargando testimonios:', error);
  }
}

function actualizarEstadisticasTestimonios() {
  const pendientes = testimoniosData.filter(t => !t.aprobado).length;
  const aprobados = testimoniosData.filter(t => t.aprobado).length;
  
  // Actualizar badge de testimonios pendientes
  const badge = document.getElementById('badge-testimonios');
  const quickTestimonios = document.getElementById('quick-testimonios');
  
  if (badge && pendientes > 0) {
    badge.textContent = pendientes.toString();
    badge.classList.remove('hidden');
  } else if (badge) {
    badge.classList.add('hidden');
  }
  
  if (quickTestimonios) {
    quickTestimonios.textContent = `${pendientes} pendientes`;
  }
  
  console.log(`📊 Estadísticas testimonios: ${pendientes} pendientes, ${aprobados} aprobados`);
}

function filtrarTestimonios(filtro: string) {
  // Actualizar botones de filtro
  document.querySelectorAll('.filtro-btn').forEach(btn => {
    btn.classList.remove('bg-pink-500', 'text-white');
    btn.classList.add('bg-gray-200', 'text-gray-700');
  });
  
  const activeBtn = document.getElementById(`filtro-${filtro}`);
  if (activeBtn) {
    activeBtn.classList.remove('bg-gray-200', 'text-gray-700');
    activeBtn.classList.add('bg-pink-500', 'text-white');
  }
  
  renderTestimonios(filtro);
}

function renderTestimonios(filtro = 'todos') {
  const container = document.getElementById('testimonios-lista');
  const loading = document.getElementById('testimonios-loading');
  const content = document.getElementById('testimonios-content');
  
  if (!container || !loading || !content) return;
  
  loading.classList.add('hidden');
  content.classList.remove('hidden');
  
  let testimoniosFiltrados = testimoniosData;
  
  if (filtro === 'pendientes') {
    testimoniosFiltrados = testimoniosData.filter(t => !t.aprobado);
  } else if (filtro === 'aprobados') {
    testimoniosFiltrados = testimoniosData.filter(t => t.aprobado);
  }
  
  if (testimoniosFiltrados.length === 0) {
    container.innerHTML = '<div class="text-center py-8 text-gray-500">No hay testimonios para mostrar</div>';
    return;
  }
  
  container.innerHTML = testimoniosFiltrados.map(testimonio => `
    <div class="bg-white rounded-xl border shadow-sm p-6">
      <div class="flex flex-col sm:flex-row justify-between items-start gap-4">
        <div class="flex-1">
          <div class="flex items-center gap-3 mb-3">
            <div class="w-10 h-10 bg-gradient-to-r from-pink-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold">
              ${testimonio.nombre.charAt(0).toUpperCase()}
            </div>
            <div>
              <h4 class="font-semibold text-gray-800 font-poppins">${testimonio.nombre}</h4>
              <p class="text-sm text-gray-600">${testimonio.email}</p>
            </div>
            <div class="flex items-center">
              ${'⭐'.repeat(testimonio.calificacion || testimonio.rating || 5)}
            </div>
          </div>
          
          <p class="text-gray-700 font-poppins mb-3">${testimonio.comentario || testimonio.testimonio || 'Sin comentario'}</p>
          
          <div class="flex items-center gap-4 text-sm text-gray-500">
            <span>📅 ${new Date(testimonio.fecha).toLocaleDateString('es-ES')}</span>
            <span class="px-2 py-1 rounded-full text-xs ${testimonio.aprobado ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
              ${testimonio.aprobado ? '✅ Aprobado' : '⏳ Pendiente'}
            </span>
          </div>
        </div>
        
        <div class="flex flex-col sm:flex-row gap-2">
          ${!testimonio.aprobado ? `
            <button 
              onclick="aprobarTestimonio('${testimonio.id}')"
              class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-sm font-poppins"
            >
              ✅ Aprobar
            </button>
            <button 
              onclick="rechazarTestimonio('${testimonio.id}')"
              class="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors text-sm font-poppins"
            >
              ❌ Rechazar
            </button>
          ` : `
            <button 
              onclick="eliminarTestimonio('${testimonio.id}')"
              class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm font-poppins"
            >
              🗑️ Eliminar
            </button>
          `}
        </div>
      </div>
    </div>
  `).join('');
}

async function aprobarTestimonio(id: string) {
  try {
    const response = await fetch('/api/testimonios', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        action: 'aprobar',
        id: parseInt(id),
        adminEmail: 'admin@glambook.com'
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      mostrarNotificacion('✅ Testimonio aprobado exitosamente', 'success');
      await cargarTestimonios();
      renderTestimonios();
      cargarEstadisticas();
    } else {
      mostrarNotificacion('❌ Error al aprobar testimonio', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    mostrarNotificacion('❌ Error de conexión', 'error');
  }
}

async function rechazarTestimonio(id: string) {
  if (confirm('¿Está seguro de rechazar este testimonio? Se eliminará permanentemente.')) {
    try {
      const response = await fetch('/api/testimonios', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          action: 'rechazar',
          id: parseInt(id)
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        mostrarNotificacion('✅ Testimonio rechazado', 'success');
        await cargarTestimonios();
        renderTestimonios();
        cargarEstadisticas();
      } else {
        mostrarNotificacion('❌ Error al rechazar testimonio', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarNotificacion('❌ Error de conexión', 'error');
    }
  }
}

async function eliminarTestimonio(id: string) {
  if (confirm('¿Está seguro de eliminar este testimonio?')) {
    try {
      const response = await fetch('/api/testimonios', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          action: 'eliminar',
          id: parseInt(id)
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        mostrarNotificacion('✅ Testimonio eliminado', 'success');
        await cargarTestimonios();
        renderTestimonios();
        cargarEstadisticas();
      } else {
        mostrarNotificacion('❌ Error al eliminar testimonio', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarNotificacion('❌ Error de conexión', 'error');
    }
  }
}

// Citas
async function cargarCitas() {
  try {
    const response = await fetch('/api/citas?action=todas');
    const result = await response.json();
    
    if (result.success) {
      citasData = result.data || [];
      // Cargar fechas bloqueadas por separado si es necesario
      try {
        const disponibilidadResponse = await fetch('/api/disponibilidad?action=listar');
        const disponibilidadResult = await disponibilidadResponse.json();
        if (disponibilidadResult.success) {
          fechasBloqueadasData = disponibilidadResult.data || [];
        }
      } catch (error) {
        console.warn('No se pudieron cargar fechas bloqueadas:', error);
        fechasBloqueadasData = [];
      }
    }
  } catch (error) {
    console.error('Error cargando citas:', error);
  }
}

function renderCitas(filtro = 'todas') {
  const container = document.getElementById('citas-lista');
  const loading = document.getElementById('citas-loading');
  const content = document.getElementById('citas-content');
  
  if (!container || !loading || !content) return;
  
  loading.classList.add('hidden');
  content.classList.remove('hidden');
  
  let citasFiltradas = citasData;
  
  if (filtro !== 'todas') {
    citasFiltradas = citasData.filter(c => c.estado === filtro);
  }
  
  if (citasFiltradas.length === 0) {
    container.innerHTML = '<div class="text-center py-8 text-gray-500">No hay citas para mostrar</div>';
    return;
  }
  
  container.innerHTML = citasFiltradas.map(cita => `
    <div class="bg-white rounded-xl border shadow-sm p-6">
      <div class="flex flex-col lg:flex-row justify-between items-start gap-4">
        <div class="flex-1">
          <div class="flex items-center gap-3 mb-3">
            <div class="w-10 h-10 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center text-white font-bold">
              ${cita.nombre.charAt(0).toUpperCase()}
            </div>
            <div>
              <h4 class="font-semibold text-gray-800 font-poppins">${cita.nombre}</h4>
              <p class="text-sm text-gray-600">${cita.email}</p>
              <p class="text-sm text-gray-600">📞 ${cita.telefono}</p>
            </div>
          </div>
          
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-3">
            <div>
              <p class="text-sm text-gray-500">Servicio</p>
              <p class="font-semibold text-gray-800">${cita.servicioNombre || cita.servicio}</p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Fecha y Hora</p>
              <p class="font-semibold text-gray-800">📅 ${new Date(cita.fecha).toLocaleDateString('es-ES')} ⏰ ${cita.hora}</p>
            </div>
          </div>
          
          ${cita.mensaje ? `<p class="text-gray-700 font-poppins mb-3 bg-gray-50 p-3 rounded-lg">"${cita.mensaje}"</p>` : ''}
          
          <div class="flex items-center gap-4 text-sm">
            <span class="px-3 py-1 rounded-full text-xs font-semibold ${getEstadoColor(cita.estado)}">
              ${getEstadoIcon(cita.estado)} ${cita.estado.charAt(0).toUpperCase() + cita.estado.slice(1)}
            </span>
            <span class="text-gray-500">📅 Creada: ${new Date(cita.fechaCreacion).toLocaleDateString('es-ES')}</span>
            ${cita.recordatorioEnviado ? '<span class="text-green-600">📧 Recordatorio enviado</span>' : ''}
          </div>
        </div>
        
        <div class="flex flex-col gap-2 min-w-[120px]">
          ${getAccionesCita(cita)}
        </div>
      </div>
    </div>
  `).join('');
}

function getEstadoColor(estado: string) {
  const colors: Record<string, string> = {
    'pendiente': 'bg-yellow-100 text-yellow-800',
    'confirmada': 'bg-blue-100 text-blue-800',
    'completada': 'bg-green-100 text-green-800',
    'cancelada': 'bg-red-100 text-red-800'
  };
  return colors[estado] || 'bg-gray-100 text-gray-800';
}

function getEstadoIcon(estado: string) {
  const icons: Record<string, string> = {
    'pendiente': '⏳',
    'confirmada': '✅',
    'completada': '🎉',
    'cancelada': '❌'
  };
  return icons[estado] || '📋';
}

function getAccionesCita(cita: any) {
  let acciones = '';
  
  if (cita.estado === 'pendiente') {
    acciones += `
      <button onclick="cambiarEstadoCita('${cita.id}', 'confirmada')" 
              class="px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm font-poppins">
        ✅ Confirmar
      </button>
      <button onclick="cambiarEstadoCita('${cita.id}', 'cancelada')" 
              class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm font-poppins">
        ❌ Cancelar
      </button>
    `;
  }
  
  if (cita.estado === 'confirmada') {
    acciones += `
      <button onclick="cambiarEstadoCita('${cita.id}', 'completada')" 
              class="px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-sm font-poppins">
        🎉 Completar
      </button>
      ${!cita.recordatorioEnviado ? `
        <button onclick="enviarRecordatorio('${cita.id}')" 
                class="px-3 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors text-sm font-poppins">
          📧 Recordatorio
        </button>
      ` : ''}
    `;
  }
  
  acciones += `
    <button onclick="eliminarCita('${cita.id}')" 
            class="px-3 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors text-sm font-poppins">
      🗑️ Eliminar
    </button>
  `;
  
  return acciones;
}

function filtrarCitas(filtro: string) {
  // Actualizar botones de filtro
  document.querySelectorAll('.filtro-citas-btn').forEach(btn => {
    btn.classList.remove('bg-green-500', 'text-white');
    btn.classList.add('bg-gray-200', 'text-gray-700');
  });
  
  const activeBtn = document.getElementById(`filtro-citas-${filtro}`);
  if (activeBtn) {
    activeBtn.classList.remove('bg-gray-200', 'text-gray-700');
    activeBtn.classList.add('bg-green-500', 'text-white');
  }
  
  renderCitas(filtro);
}

async function cambiarEstadoCita(id: string, nuevoEstado: string) {
  try {
    const response = await fetch('/api/citas', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        action: 'cambiar-estado',
        id: id,
        nuevoEstado: nuevoEstado
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      mostrarNotificacion(`✅ Cita ${nuevoEstado} exitosamente`, 'success');
      await cargarCitas();
      renderCitas();
      cargarEstadisticas();
    } else {
      mostrarNotificacion('❌ Error al actualizar cita', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    mostrarNotificacion('❌ Error de conexión', 'error');
  }
}

async function enviarRecordatorio(id: string) {
  try {
    const response = await fetch('/api/citas', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        action: 'enviar-recordatorio',
        id: id
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      mostrarNotificacion('📧 Recordatorio enviado exitosamente', 'success');
      await cargarCitas();
      renderCitas();
    } else {
      mostrarNotificacion('❌ Error al enviar recordatorio', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    mostrarNotificacion('❌ Error de conexión', 'error');
  }
}

async function eliminarCita(id: string) {
  if (confirm('¿Está seguro de eliminar esta cita?')) {
    try {
      const response = await fetch('/api/citas', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          action: 'eliminar',
          id: id
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        mostrarNotificacion('✅ Cita eliminada exitosamente', 'success');
        await cargarCitas();
        renderCitas();
        cargarEstadisticas();
      } else {
        mostrarNotificacion('❌ Error al eliminar cita', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarNotificacion('❌ Error de conexión', 'error');
    }
  }
}

// Usuarios
async function cargarUsuarios() {
  try {
    const response = await fetch('/api/usuarios?action=admin-lista');
    const result = await response.json();
    
    if (result.success) {
      usuariosData = result.data.usuarios;
    }
  } catch (error) {
    console.error('Error cargando usuarios:', error);
  }
}

function renderUsuarios(filtro = 'todos') {
  const container = document.getElementById('usuarios-lista');
  const loading = document.getElementById('usuarios-loading');
  const content = document.getElementById('usuarios-content');
  
  if (!container || !loading || !content) return;
  
  loading.classList.add('hidden');
  content.classList.remove('hidden');
  
  let usuariosFiltrados = Array.isArray(usuariosData) ? usuariosData : [];
  
  if (filtro !== 'todos') {
    usuariosFiltrados = usuariosFiltrados.filter(u => u.rol === filtro);
  }
  
  if (usuariosFiltrados.length === 0) {
    container.innerHTML = '<div class="text-center py-8 text-gray-500">No hay usuarios para mostrar</div>';
    return;
  }
  
  container.innerHTML = usuariosFiltrados.map(usuario => `
    <div class="bg-white rounded-xl border shadow-sm p-6">
      <div class="flex flex-col lg:flex-row justify-between items-start gap-4">
        <div class="flex-1">
          <div class="flex items-center gap-3 mb-3">
            <div class="w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center text-white text-xl">
              ${usuario.avatar || usuario.nombre.charAt(0).toUpperCase()}
            </div>
            <div>
              <h4 class="font-semibold text-gray-800 font-poppins">${usuario.nombre}</h4>
              <p class="text-sm text-gray-600">${usuario.email}</p>
              ${usuario.telefono ? `<p class="text-sm text-gray-600">📞 ${usuario.telefono}</p>` : ''}
            </div>
          </div>
          
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-3">
            <div>
              <p class="text-sm text-gray-500">Rol</p>
              <span class="inline-block px-3 py-1 rounded-full text-xs font-semibold ${usuario.rolConfig?.badge || 'bg-gray-100 text-gray-800'}">
                ${usuario.rolConfig?.nombre || usuario.rol}
              </span>
            </div>
            <div>
              <p class="text-sm text-gray-500">Estado</p>
              <span class="inline-block px-3 py-1 rounded-full text-xs font-semibold ${usuario.activo ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                ${usuario.activo ? '🟢 Activo' : '🔴 Inactivo'}
              </span>
            </div>
            <div>
              <p class="text-sm text-gray-500">Actividad</p>
              <p class="text-xs text-gray-600">${usuario.citas || 0} citas • ${usuario.testimonios || 0} testimonios</p>
            </div>
          </div>
          
          <div class="flex items-center gap-4 text-sm text-gray-500">
            <span>📅 Registro: ${new Date(usuario.fechaRegistro).toLocaleDateString('es-ES')}</span>
            <span>⏰ Último acceso: ${new Date(usuario.ultimaActividad).toLocaleDateString('es-ES')}</span>
          </div>
        </div>
        
        <div class="flex flex-col gap-2 min-w-[120px]">
          ${getAccionesUsuario(usuario)}
        </div>
      </div>
    </div>
  `).join('');
}

function getAccionesUsuario(usuario: any) {
  let acciones = '';
  
  // No permitir editar al admin principal
  if (usuario.id !== 1) {
    acciones += `
      <button onclick="toggleUsuarioEstado('${usuario.id}', ${!usuario.activo})" 
              class="px-3 py-2 ${usuario.activo ? 'bg-orange-500 hover:bg-orange-600' : 'bg-green-500 hover:bg-green-600'} text-white rounded-lg transition-colors text-sm font-poppins">
        ${usuario.activo ? '⏸️ Desactivar' : '▶️ Activar'}
      </button>
    `;
    
    if (usuario.rol !== 'admin') {
      const nuevoRol = usuario.rol === 'cliente' ? 'manager' : 'cliente';
      const textoRol = usuario.rol === 'cliente' ? 'Hacer Manager' : 'Hacer Cliente';
      acciones += `
        <button onclick="cambiarRolUsuario('${usuario.id}', '${nuevoRol}')" 
                class="px-3 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors text-sm font-poppins">
          👑 ${textoRol}
        </button>
      `;
    }
    
    acciones += `
      <button onclick="eliminarUsuario('${usuario.id}')" 
              class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm font-poppins">
        🗑️ Eliminar
      </button>
    `;
  } else {
    acciones = '<span class="text-xs text-gray-500 px-3 py-2">👑 Usuario protegido</span>';
  }
  
  return acciones;
}

function filtrarUsuarios(filtro: string) {
  // Actualizar botones de filtro
  document.querySelectorAll('.filtro-usuarios-btn').forEach(btn => {
    btn.classList.remove('bg-purple-500', 'text-white');
    btn.classList.add('bg-gray-200', 'text-gray-700');
  });
  
  const activeBtn = document.getElementById(`filtro-usuarios-${filtro}`);
  if (activeBtn) {
    activeBtn.classList.remove('bg-gray-200', 'text-gray-700');
    activeBtn.classList.add('bg-purple-500', 'text-white');
  }
  
  renderUsuarios(filtro);
}

async function toggleUsuarioEstado(id: string, nuevoEstado: boolean) {
  try {
    const response = await fetch('/api/usuarios', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        action: 'cambiar-estado',
        id: id,
        activo: nuevoEstado
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      mostrarNotificacion(`✅ Usuario ${nuevoEstado ? 'activado' : 'desactivado'} exitosamente`, 'success');
      await cargarUsuarios();
      renderUsuarios();
      cargarEstadisticas();
    } else {
      mostrarNotificacion('❌ Error al cambiar estado', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    mostrarNotificacion('❌ Error de conexión', 'error');
  }
}

async function cambiarRolUsuario(id: string, nuevoRol: string) {
  try {
    const response = await fetch('/api/usuarios', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        action: 'actualizar',
        id: id,
        rol: nuevoRol
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      mostrarNotificacion(`✅ Rol cambiado a ${nuevoRol} exitosamente`, 'success');
      await cargarUsuarios();
      renderUsuarios();
    } else {
      mostrarNotificacion('❌ Error al cambiar rol', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    mostrarNotificacion('❌ Error de conexión', 'error');
  }
}

async function eliminarUsuario(id: string) {
  if (confirm('¿Está seguro de eliminar este usuario? Esta acción no se puede deshacer.')) {
    try {
      const response = await fetch('/api/usuarios', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          action: 'eliminar',
          id: id
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        mostrarNotificacion('✅ Usuario eliminado exitosamente', 'success');
        await cargarUsuarios();
        renderUsuarios();
        cargarEstadisticas();
      } else {
        mostrarNotificacion('❌ Error al eliminar usuario', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarNotificacion('❌ Error de conexión', 'error');
    }
  }
}

// Calendario
function renderCalendario() {
  const container = document.getElementById('admin-calendar');
  if (!container) return;
  
  // Generar calendario simple
  const fechaActual = new Date();
  const anio = fechaActual.getFullYear();
  const mes = fechaActual.getMonth();
  
  const primerDia = new Date(anio, mes, 1);
  const ultimoDia = new Date(anio, mes + 1, 0);
  
  let calendarioHTML = '<div class="grid grid-cols-7 gap-1 text-xs">';
  
  // Headers días de la semana
  const diasSemana = ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];
  diasSemana.forEach(dia => {
    calendarioHTML += `<div class="p-2 text-center font-semibold text-gray-600">${dia}</div>`;
  });
  
  // Espacios en blanco para el primer día del mes
  for (let i = 0; i < primerDia.getDay(); i++) {
    calendarioHTML += '<div class="p-2"></div>';
  }
  
  // Días del mes
  for (let dia = 1; dia <= ultimoDia.getDate(); dia++) {
    const fecha = `${anio}-${String(mes + 1).padStart(2, '0')}-${String(dia).padStart(2, '0')}`;
    const esBloqueada = fechasBloqueadasData.some((fb: any) => fb.fecha === fecha);
    const esHoy = dia === fechaActual.getDate() && mes === fechaActual.getMonth();
    
    let clases = 'p-2 text-center cursor-pointer border rounded ';
    if (esHoy) {
      clases += 'bg-blue-500 text-white ';
    } else if (esBloqueada) {
      clases += 'bg-red-100 text-red-800 ';
    } else {
      clases += 'hover:bg-gray-100 ';
    }
    
    calendarioHTML += `<div class="${clases}" onclick="seleccionarFecha('${fecha}')">${dia}</div>`;
  }
  
  calendarioHTML += '</div>';
  container.innerHTML = calendarioHTML;
  
  // Renderizar fechas bloqueadas
  renderFechasBloqueadas();
}

function renderFechasBloqueadas() {
  const container = document.getElementById('fechas-bloqueadas-lista');
  if (!container) return;
  
  if (fechasBloqueadasData.length === 0) {
    container.innerHTML = '<p class="text-gray-500 text-sm">No hay fechas bloqueadas</p>';
    return;
  }
  
  container.innerHTML = fechasBloqueadasData.map((fecha: any) => `
    <div class="flex items-center justify-between p-2 bg-red-50 rounded-lg text-sm">
      <div>
        <p class="font-semibold text-red-800">${new Date(fecha.fecha).toLocaleDateString('es-ES')}</p>
        <p class="text-red-600">${fecha.motivo}</p>
      </div>
      <button 
        onclick="eliminarBloqueo('${fecha.id}')"
        class="text-red-600 hover:text-red-800"
        title="Eliminar bloqueo"
      >
        ✖️
      </button>
    </div>
  `).join('');
}

async function bloquearFecha() {
  const fechaElement = document.getElementById('fecha-bloquear') as HTMLInputElement;
  const motivoElement = document.getElementById('motivo-bloqueo') as HTMLInputElement;
  
  if (!fechaElement || !motivoElement) return;
  
  const fecha = fechaElement.value;
  const motivo = motivoElement.value;
  
  if (!fecha || !motivo) {
    mostrarNotificacion('⚠️ Complete todos los campos', 'warning');
    return;
  }
  
  try {
    const response = await fetch('/api/citas', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        action: 'bloquear-fecha',
        fecha: fecha,
        motivo: motivo,
        admin: 'admin@glambook.com'
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      mostrarNotificacion('✅ Fecha bloqueada exitosamente', 'success');
      const form = document.getElementById('form-bloquear-fecha') as HTMLFormElement;
      if (form) form.reset();
      await cargarCitas();
      renderCalendario();
    } else {
      mostrarNotificacion('❌ Error al bloquear fecha', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    mostrarNotificacion('❌ Error de conexión', 'error');
  }
}

async function eliminarBloqueo(id) {
  if (confirm('¿Eliminar este bloqueo?')) {
    try {
      const response = await fetch('/api/disponibilidad', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          action: 'eliminar-bloqueo',
          id: id
        })
      });
      const result = await response.json();
      if (result.success) {
        mostrarNotificacion('✅ Bloqueo eliminado exitosamente', 'success');
        await cargarCitas();
        renderCalendario();
      } else {
        mostrarNotificacion('❌ Error al eliminar bloqueo', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarNotificacion('❌ Error de conexión', 'error');
    }
  }
}

async function enviarRecordatorios() {
  try {
    const response = await fetch('/api/citas?action=recordatorios-pendientes');
    const result = await response.json();
    
    if (result.success && result.data.length > 0) {
      let recordatoriosEnviados = 0;
      
      for (const cita of result.data) {
        await enviarRecordatorio(cita.id);
        recordatoriosEnviados++;
      }
      
      mostrarNotificacion(`📧 ${recordatoriosEnviados} recordatorios enviados`, 'success');
      await cargarCitas();
    } else {
      mostrarNotificacion('ℹ️ No hay recordatorios pendientes', 'info');
    }
  } catch (error) {
    console.error('Error:', error);
    mostrarNotificacion('❌ Error al enviar recordatorios', 'error');
  }
}

// Utilidades
function updateElement(id: string, value: any) {
  const element = document.getElementById(id);
  if (element) {
    element.textContent = value;
  }
}

function updateConnectionStatus(status: string) {
  const element = document.getElementById('stat-conexion');
  if (element) {
    const icons: Record<string, string> = {
      'conectado': '🟢',
      'desconectado': '🟡',
      'error': '🔴'
    };
    element.textContent = icons[status] || '⚪';
  }
  
  // Update navbar
  if ((window as any).updateConnectionStatus) {
    (window as any).updateConnectionStatus(status);
  }
}

function mostrarNotificacion(mensaje: string, tipo: string = 'info') {
  // Crear elemento de notificación
  const notificacion = document.createElement('div');
  notificacion.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg font-poppins max-w-sm transform transition-all duration-300 translate-x-full`;
  
  const colores: Record<string, string> = {
    'success': 'bg-green-500 text-white',
    'error': 'bg-red-500 text-white',
    'warning': 'bg-yellow-500 text-white',
    'info': 'bg-blue-500 text-white'
  };
  
  notificacion.classList.add(...colores[tipo].split(' '));
  notificacion.textContent = mensaje;
  
  document.body.appendChild(notificacion);
  
  // Animar entrada
  setTimeout(() => {
    notificacion.classList.remove('translate-x-full');
  }, 100);
  
  // Remover después de 3 segundos
  setTimeout(() => {
    notificacion.classList.add('translate-x-full');
    setTimeout(() => {
      document.body.removeChild(notificacion);
    }, 300);
  }, 3000);
}

function seleccionarFecha(fecha: string) {
  const element = document.getElementById('fecha-bloquear') as HTMLInputElement;
  if (element) {
    element.value = fecha;
  }
}

// Función para actualización automática del dashboard
function startDashboardAutoUpdate() {
  if (dashboardUpdateInterval) {
    clearInterval(dashboardUpdateInterval);
  }
  
  dashboardUpdateInterval = window.setInterval(async () => {
    try {
      console.log('🔄 Actualizando dashboard automáticamente...');
      
      // Solo actualizar si estamos en el tab dashboard
      const dashboardTab = document.querySelector('[data-tab="dashboard"]');
      if (dashboardTab && dashboardTab.classList.contains('bg-pink-600')) {
        await Promise.all([
          cargarEstadisticas(),
          cargarTestimonios(),
          cargarCitas(),
          cargarUsuarios()
        ]);
        
        // Actualizar indicador de tiempo
        actualizarIndicadorDashboard();
      }
    } catch (error) {
      console.error('Error en actualización automática del dashboard:', error);
    }
  }, 15000); // Actualizar cada 15 segundos
}

function stopDashboardAutoUpdate() {
  if (dashboardUpdateInterval) {
    clearInterval(dashboardUpdateInterval);
    dashboardUpdateInterval = null;
  }
}

function actualizarIndicadorDashboard() {
  const indicator = document.getElementById('dashboard-time-indicator');
  if (!indicator) {
    // Crear indicador si no existe
    const dashboardContainer = document.querySelector('#main-content .container');
    if (dashboardContainer) {
      const indicatorDiv = document.createElement('div');
      indicatorDiv.id = 'dashboard-time-indicator';
      indicatorDiv.className = 'text-center mb-4';
      indicatorDiv.innerHTML = `
        <div class="inline-flex items-center bg-blue-50 text-blue-700 px-3 py-2 rounded-full text-sm font-poppins">
          <div class="w-2 h-2 bg-blue-500 rounded-full mr-2 animate-pulse"></div>
          Dashboard actualizado en tiempo real
          <span id="dashboard-last-update" class="ml-2 text-xs text-blue-600"></span>
        </div>
      `;
      dashboardContainer.insertBefore(indicatorDiv, dashboardContainer.firstChild);
    }
  }
  
  const timeElement = document.getElementById('dashboard-last-update');
  if (timeElement) {
    const time = new Date().toLocaleTimeString('es-ES', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    timeElement.textContent = `(${time})`;
  }
}

// Función de logout
function logout() {
  if (confirm('¿Estás seguro de cerrar la sesión?')) {
    localStorage.removeItem('glambook_auth');
    localStorage.removeItem('glambook_user');
    localStorage.removeItem('glambook_remember');
    window.location.href = '/login';
  }
}

// Hacer funciones disponibles globalmente
(window as any).logout = logout;
(window as any).switchTab = switchTab;
(window as any).filtrarTestimonios = filtrarTestimonios;
(window as any).aprobarTestimonio = aprobarTestimonio;
(window as any).rechazarTestimonio = rechazarTestimonio;
(window as any).eliminarTestimonio = eliminarTestimonio;
(window as any).filtrarCitas = filtrarCitas;
(window as any).cambiarEstadoCita = cambiarEstadoCita;
(window as any).enviarRecordatorio = enviarRecordatorio;
(window as any).eliminarCita = eliminarCita;
(window as any).filtrarUsuarios = filtrarUsuarios;
(window as any).toggleUsuarioEstado = toggleUsuarioEstado;
(window as any).cambiarRolUsuario = cambiarRolUsuario;
(window as any).eliminarUsuario = eliminarUsuario;
(window as any).bloquearFecha = bloquearFecha;
(window as any).eliminarBloqueo = eliminarBloqueo;
(window as any).enviarRecordatorios = enviarRecordatorios;
(window as any).seleccionarFecha = seleccionarFecha;
</script>

<style>
  .tab-button {
    transition: all 0.3s ease;
  }
  
  .tab-button:hover {
    background-color: rgba(236, 72, 153, 0.1);
  }
  
  .calendar-grid {
    font-family: 'Poppins', sans-serif;
  }
  
  .animate-fade-in {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .tab-button {
      padding: 8px 12px;
    }
    
    .calendar-grid {
      font-size: 0.75rem;
    }
  }
</style>
</AdminLayout>
