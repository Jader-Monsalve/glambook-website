    async function descargarImagen(id: string) {
      const cita = citas.find((c: any) => c.id == id);
      if (!cita) {
        mostrarNotificacion('‚ùå Cita no encontrada', 'error');
        return;
      }

      try {
        // Mostrar indicador de carga
        mostrarNotificacion('üîÑ Generando comprobante...', 'warning');
        
        // Importar funci√≥n del servicio y generar imagen
        const { generarImagenCita } = await import('../../utils/emailService.js');
        const svgContent = generarImagenCita(cita);
        
        // Crear enlace de descarga mejorado
        const nombreArchivo = cita.nombre.toLowerCase()
          .replace(/[^a-z0-9]/g, '-')
          .replace(/-+/g, '-')
          .replace(/^-|-$/g, '');
        
        const svgBlob = new Blob([svgContent], { type: 'image/svg+xml;charset=utf-8' });
        const url = URL.createObjectURL(svgBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `cita-${nombreArchivo}-${cita.fecha}-${cita.hora.replace(':', '')}.svg`;
        link.style.display = 'none';
        
        document.body.appendChild(link);
        link.click();
        
        setTimeout(() => {
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
        }, 100);
        
        mostrarNotificacion('üì• ¬°Comprobante descargado exitosamente!', 'success');
        
        // Mensaje adicional despu√©s de 2 segundos
        setTimeout(() => {
          mostrarNotificacion('‚úÖ Listo para enviar por WhatsApp al cliente', 'success');
        }, 2000);
        
      } catch (error) {
        console.error('Error al descargar imagen:', error);
        mostrarNotificacion('‚ùå Error al generar el comprobante. Intenta de nuevo.', 'error');
      }
    }