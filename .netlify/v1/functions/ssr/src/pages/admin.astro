---
import AdminLayout from '../layouts/AdminLayout.astro';
import AdminNavbar from '../components/AdminNavbar.astro';
import '../styles/global.css';
// Configurar como server-rendered para que funcionen las APIs
export const prerender = false;
const title = "Panel de Administración - GlamBook";
---


  ---

<AdminLayout title={title}>
  <!-- Loading screen -->
  <div id="auth-loading" class="fixed inset-0 bg-gray-100 flex items-center justify-center z-50">
    <div class="text-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-pink-500 mx-auto mb-4"></div>
      <p class="text-gray-600 font-poppins">Verificando acceso...</p>
    </div>
  </div>

  <!-- Login required screen -->
  <div id="login-required" class="fixed inset-0 bg-gray-100 items-center justify-center z-50 hidden">
    <div class="text-center max-w-md mx-auto p-6">
      <div class="text-6xl mb-4">🔒</div>
      <h2 class="text-2xl font-bold text-gray-800 mb-4 font-poppins">Acceso Restringido</h2>
      <p class="text-gray-600 mb-6 font-poppins">Necesitas iniciar sesión como administrador para acceder a este panel.</p>
      <a 
        href="/login" 
        class="bg-pink-500 hover:bg-pink-600 text-white px-6 py-3 rounded-lg font-poppins transition-colors duration-300 inline-block"
      >
        Iniciar Sesión
      </a>
    </div>
  </div>

  <!-- Admin panel content -->
  <main id="admin-content" class="hidden min-h-screen bg-gray-50">
    
    <!-- Admin Navbar -->
    <AdminNavbar />
    
    <!-- Main Content -->
    <div class="py-8">
      <div class="container mx-auto px-4 max-w-7xl">
        
        <!-- Menú de navegación interno -->
        <div class="bg-white rounded-lg shadow-lg p-4 mb-8">
          <h1 class="text-3xl font-bold text-gray-800 mb-6 font-poppins text-center">
            ✨ Panel de Administración - GlamBook
          </h1>
          
          <!-- Navegación de secciones -->
          <nav class="border-b border-gray-200 mb-6">
            <ul class="flex flex-wrap -mb-px text-sm font-medium text-center font-poppins" role="tablist">
              <li class="mr-2" role="presentation">
                <button 
                  class="nav-tab active inline-block p-4 border-b-2 border-pink-500 text-pink-600 rounded-t-lg hover:text-pink-700" 
                  onclick="cambiarSeccion('dashboard')"
                  data-section="dashboard"
                >
                  📊 Dashboard
                </button>
              </li>
              <li class="mr-2" role="presentation">
                <button 
                  class="nav-tab inline-block p-4 border-b-2 border-transparent text-gray-500 rounded-t-lg hover:text-gray-600 hover:border-gray-300" 
                  onclick="cambiarSeccion('testimonios')"
                  data-section="testimonios"
                >
                  💬 Testimonios
                </button>
              </li>
              <li class="mr-2" role="presentation">
                <button 
                  class="nav-tab inline-block p-4 border-b-2 border-transparent text-gray-500 rounded-t-lg hover:text-gray-600 hover:border-gray-300" 
                  onclick="cambiarSeccion('usuarios')"
                  data-section="usuarios"
                >
                  👥 Usuarios
                </button>
              </li>
              <li class="mr-2" role="presentation">
                <button 
                  class="nav-tab inline-block p-4 border-b-2 border-transparent text-gray-500 rounded-t-lg hover:text-gray-600 hover:border-gray-300" 
                  onclick="cambiarSeccion('citas')"
                  data-section="citas"
                >
                  📅 Citas
                </button>
              </li>
              <li class="mr-2" role="presentation">
                <button 
                  class="nav-tab inline-block p-4 border-b-2 border-transparent text-gray-500 rounded-t-lg hover:text-gray-600 hover:border-gray-300" 
                  onclick="cambiarSeccion('configuracion')"
                  data-section="configuracion"
                >
                  ⚙️ Configuración
                </button>
              </li>
              <!-- Botón de depuración temporal -->
              <li class="mr-2" role="presentation">
                <button 
                  class="inline-block p-4 border-b-2 border-transparent text-blue-500 rounded-t-lg hover:text-blue-600 hover:border-blue-300" 
                  onclick="debugSecciones()"
                  title="Debug - Ver secciones en consola"
                >
                  🐛 Debug
                </button>
              </li>
              <!-- Botón para mostrar todas las secciones -->
              <li class="mr-2" role="presentation">
                <button 
                  class="inline-block p-4 border-b-2 border-transparent text-orange-500 rounded-t-lg hover:text-orange-600 hover:border-orange-300" 
                  onclick="mostrarTodasLasSecciones()"
                  title="Mostrar todas las secciones"
                >
                  👁️ Mostrar Todo
                </button>
              </li>
            </ul>
          </nav>
        </div>

        <!-- Dashboard Section -->
        <div id="section-dashboard" class="section-content">
        <div id="estadisticas" class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-gray-500 text-sm font-poppins">Testimonios Pendientes</p>
                <p class="text-3xl font-bold text-orange-500 font-poppins" id="pending-count">0</p>
              </div>
              <div class="text-4xl">⏳</div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-gray-500 text-sm font-poppins">Testimonios Aprobados</p>
                <p class="text-3xl font-bold text-green-500 font-poppins" id="approved-count">6</p>
              </div>
              <div class="text-4xl">✅</div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-gray-500 text-sm font-poppins">Promedio Calificación</p>
                <p class="text-3xl font-bold text-blue-500 font-poppins" id="average-rating">4.5</p>
              </div>
              <div class="text-4xl">⭐</div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-gray-500 text-sm font-poppins">Total Procesados</p>
                <p class="text-3xl font-bold text-purple-500 font-poppins" id="total-count">6</p>
              </div>
              <div class="text-4xl">📊</div>
            </div>
          </div>
        </div>

        <!-- Gráficos Dashboard -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <!-- Gráfico de Servicios -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4 font-poppins flex items-center gap-2">
              📊 Testimonios por Servicio
            </h3>
            <div class="relative h-64">
              <canvas id="servicios-chart"></canvas>
            </div>
          </div>

          <!-- Gráfico de Calificaciones -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4 font-poppins flex items-center gap-2">
              ⭐ Distribución de Calificaciones
            </h3>
            <div class="relative h-64">
              <canvas id="ratings-chart"></canvas>
            </div>
          </div>

          <!-- Tendencia Temporal -->
          <div class="bg-white rounded-lg shadow-lg p-6 lg:col-span-2">
            <h3 class="text-lg font-semibold text-gray-800 mb-4 font-poppins flex items-center gap-2">
              📈 Testimonios por Mes
            </h3>
            <div class="relative h-64">
              <canvas id="timeline-chart"></canvas>
            </div>
          </div>
        </div>
        </div>
        <!-- Fin Dashboard Section -->

        <!-- Testimonios Section -->
        <div id="section-testimonios" class="section-content hidden">
        
        <!-- Mensaje de prueba temporal -->
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
          <h3 class="text-lg font-semibold text-blue-800 mb-2 font-poppins">🧪 Sección de Testimonios Cargada</h3>
          <p class="text-blue-600 font-poppins">Esta sección está funcionando correctamente. Aquí se mostrarán los testimonios pendientes.</p>
        </div>
        
        <!-- Testimonios Pendientes -->
        <div class="bg-white rounded-lg shadow-lg mb-8">
          <!-- Pestañas -->
          <div class="border-b border-gray-200">
            <nav class="flex space-x-8 px-6" aria-label="Tabs">
              <button 
                id="tab-pendientes"
                onclick="cambiarTabTestimonios('pendientes')"
                class="tab-testimonio-btn active whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm font-poppins border-pink-500 text-pink-600"
              >
                ⏳ Pendientes (<span id="count-pendientes">0</span>)
              </button>
              <button 
                id="tab-aprobados"
                onclick="cambiarTabTestimonios('aprobados')"
                class="tab-testimonio-btn whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm font-poppins border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              >
                ✅ Aprobados (<span id="count-aprobados">0</span>)
              </button>
            </nav>
          </div>
          
          <!-- Contenido de las pestañas -->
          <div class="p-6">
            <!-- Tab Testimonios Pendientes -->
            <div id="tab-content-pendientes" class="tab-content-testimonios">
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
                <h2 class="text-xl font-semibold text-gray-800 font-poppins flex items-center gap-2">
                  ⏳ Testimonios Pendientes de Aprobación
                </h2>
                
                <!-- Filtros y búsqueda -->
                <div class="flex flex-col sm:flex-row gap-3 w-full sm:w-auto">
                  <div class="relative">
                    <input 
                      type="text" 
                      id="search-testimonios" 
                      placeholder="Buscar por nombre..." 
                      class="pl-8 pr-4 py-2 border border-gray-300 rounded-lg text-sm font-poppins focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    />
                    <span class="absolute left-2 top-2.5 text-gray-400">🔍</span>
                  </div>
                  
                  <select 
                    id="filter-servicio" 
                    class="px-3 py-2 border border-gray-300 rounded-lg text-sm font-poppins focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  >
                    <option value="">Todos los servicios</option>
                    <option value="maquillaje">Maquillaje</option>
                    <option value="unas">Uñas</option>
                    <option value="cejas">Cejas</option>
                    <option value="pestanas">Pestañas</option>
                    <option value="facial">Facial</option>
                    <option value="otro">Otro</option>
                  </select>
                  
                  <select 
                    id="filter-calificacion" 
                    class="px-3 py-2 border border-gray-300 rounded-lg text-sm font-poppins focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  >
                    <option value="">Todas las calificaciones</option>
                    <option value="5">5 estrellas</option>
                    <option value="4">4 estrellas</option>
                    <option value="3">3 estrellas</option>
                    <option value="2">2 estrellas</option>
                    <option value="1">1 estrella</option>
                  </select>
                  
                  <button 
                    onclick="limpiarFiltros()" 
                    class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg text-sm font-poppins transition-colors duration-200 flex items-center gap-2"
                  >
                    � Limpiar
                  </button>
                </div>
              </div>
              
              <!-- Loading state -->
              <div id="loading" class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-pink-500"></div>
                <p class="text-gray-600 mt-2 font-poppins">Cargando testimonios...</p>
              </div>
              
              <!-- Empty state -->
              <div id="empty-state" class="text-center py-12 hidden">
                <div class="text-6xl mb-4">🎉</div>
                <h3 class="text-xl font-semibold text-gray-800 mb-2 font-poppins">¡Todo al día!</h3>
                <p class="text-gray-600 font-poppins">No hay testimonios pendientes de revisión.</p>
              </div>
              
              <!-- Testimonios grid -->
              <div id="testimonios-grid" class="grid grid-cols-1 lg:grid-cols-2 gap-6"></div>
            </div>

            <!-- Tab Testimonios Aprobados -->
            <div id="tab-content-aprobados" class="tab-content-testimonios hidden">
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
                <h2 class="text-xl font-semibold text-gray-800 font-poppins flex items-center gap-2">
                  ✅ Testimonios Aprobados
                </h2>
                
                <!-- Filtros para aprobados -->
                <div class="flex flex-col sm:flex-row gap-3 w-full sm:w-auto">
                  <div class="relative">
                    <input 
                      type="text" 
                      id="search-aprobados" 
                      placeholder="Buscar por nombre..." 
                      class="pl-8 pr-4 py-2 border border-gray-300 rounded-lg text-sm font-poppins focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    />
                    <span class="absolute left-2 top-2.5 text-gray-400">🔍</span>
                  </div>
                  
                  <select 
                    id="filter-servicio-aprobados" 
                    class="px-3 py-2 border border-gray-300 rounded-lg text-sm font-poppins focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  >
                    <option value="">Todos los servicios</option>
                    <option value="maquillaje">Maquillaje</option>
                    <option value="unas">Uñas</option>
                    <option value="cejas">Cejas</option>
                    <option value="pestanas">Pestañas</option>
                    <option value="facial">Facial</option>
                    <option value="otro">Otro</option>
                  </select>
                  
                  <button 
                    onclick="limpiarFiltrosAprobados()" 
                    class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg text-sm font-poppins transition-colors duration-200 flex items-center gap-2"
                  >
                    🔄 Limpiar
                  </button>
                </div>
              </div>

              <!-- Loading state aprobados -->
              <div id="loading-aprobados" class="text-center py-8 hidden">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-green-500"></div>
                <p class="text-gray-600 mt-2 font-poppins">Cargando testimonios aprobados...</p>
              </div>

              <!-- Estado vacío aprobados -->
              <div id="empty-state-aprobados" class="text-center py-12 hidden">
                <div class="text-6xl mb-4">📝</div>
                <h3 class="text-xl font-semibold text-gray-800 mb-2 font-poppins">Sin testimonios</h3>
                <p class="text-gray-600 font-poppins">No hay testimonios aprobados para mostrar.</p>
              </div>
              
              <!-- Grid de testimonios aprobados -->
              <div id="testimonios-aprobados-grid" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6"></div>
            </div>
          </div>
        </div>
        </div>
        <!-- Fin Testimonios Section -->

        <!-- Usuarios Section -->
        <div id="section-usuarios" class="section-content hidden">
        
        <!-- Mensaje de prueba temporal -->
        <div class="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
          <h3 class="text-lg font-semibold text-green-800 mb-2 font-poppins">🧪 Sección de Usuarios Cargada</h3>
          <p class="text-green-600 font-poppins">Esta sección está funcionando correctamente. Aquí se mostrará la gestión de usuarios.</p>
        </div>
        
        <!-- Gestión de Usuarios -->
        <div id="usuarios" class="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 class="text-2xl font-semibold text-gray-800 mb-6 font-poppins flex items-center gap-2">
            👥 Gestión de Usuarios Administradores
          </h2>
          
          <!-- Agregar nuevo usuario -->
          <div class="border border-gray-200 rounded-lg p-4 mb-6">
            <h3 class="text-lg font-medium text-gray-800 mb-4 font-poppins">Agregar Nuevo Administrador</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <input 
                type="email" 
                id="nuevo-admin-email" 
                placeholder="Email del nuevo administrador"
                class="border border-gray-300 rounded-lg p-3 font-poppins focus:outline-none focus:ring-2 focus:ring-pink-500"
              >
              <input 
                type="password" 
                id="nuevo-admin-password" 
                placeholder="Contraseña temporal"
                class="border border-gray-300 rounded-lg p-3 font-poppins focus:outline-none focus:ring-2 focus:ring-pink-500"
              >
              <button 
                onclick="agregarAdministrador()"
                class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-poppins transition-colors duration-300 flex items-center justify-center gap-2"
              >
                ➕ Agregar Admin
              </button>
            </div>
          </div>

          <!-- Lista de administradores -->
          <div class="overflow-x-auto">
            <table class="w-full table-auto">
              <thead>
                <tr class="bg-gray-50">
                  <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 font-poppins">Email</th>
                  <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 font-poppins">Rol</th>
                  <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 font-poppins">Último Acceso</th>
                  <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 font-poppins">Estado</th>
                  <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 font-poppins">Acciones</th>
                </tr>
              </thead>
              <tbody id="lista-administradores">
                <!-- Administradores se cargarán aquí dinámicamente -->
              </tbody>
            </table>
          </div>
        </div>
        </div>
        <!-- Fin Usuarios Section -->

        <!-- Configuración Section -->
        <div id="section-configuracion" class="section-content hidden">
        
        <!-- Mensaje de prueba temporal -->
        <div class="bg-purple-50 border border-purple-200 rounded-lg p-6 mb-6">
          <h3 class="text-lg font-semibold text-purple-800 mb-2 font-poppins">🧪 Sección de Configuración Cargada</h3>
          <p class="text-purple-600 font-poppins">Esta sección está funcionando correctamente. Aquí se mostrará la configuración del sistema.</p>
        </div>
        
        <!-- Configuración -->
        <div id="configuracion" class="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 class="text-2xl font-semibold text-gray-800 mb-6 font-poppins flex items-center gap-2">
            ⚙️ Configuración del Sistema
          </h2>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Configuración de cuenta -->
            <div class="border border-gray-200 rounded-lg p-4">
              <h3 class="text-lg font-medium text-gray-800 mb-3 font-poppins">Cuenta de Administrador</h3>
              <div class="space-y-3">
                <div>
                  <label class="text-sm text-gray-600 font-poppins">Email actual:</label>
                  <p class="text-gray-800 font-medium font-poppins" id="config-admin-email">admin@glambook.com</p>
                </div>
                <a 
                  href="/cambiar-password"
                  class="inline-flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-poppins transition-colors duration-300"
                >
                  🔑 Cambiar Contraseña
                </a>
              </div>
            </div>

            <!-- Configuración de notificaciones -->
            <div class="border border-gray-200 rounded-lg p-4">
              <h3 class="text-lg font-medium text-gray-800 mb-3 font-poppins">Preferencias</h3>
              <div class="space-y-3">
                <label class="flex items-center gap-2 text-sm text-gray-700 font-poppins">
                  <input type="checkbox" id="auto-refresh" class="rounded border-gray-300" checked>
                  Auto-actualizar cada 30 segundos
                </label>
                <label class="flex items-center gap-2 text-sm text-gray-700 font-poppins">
                  <input type="checkbox" id="sound-notifications" class="rounded border-gray-300">
                  Sonido de notificaciones
                </label>
              </div>
            </div>

            <!-- Exportación de datos -->
            <div class="border border-gray-200 rounded-lg p-4">
              <h3 class="text-lg font-medium text-gray-800 mb-3 font-poppins">Exportar Datos</h3>
              <div class="space-y-3">
                <button 
                  onclick="exportarCSV()"
                  class="w-full bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-poppins transition-colors duration-300 flex items-center justify-center gap-2"
                >
                  📄 Exportar CSV
                </button>
                <button 
                  onclick="exportarPDF()"
                  class="w-full bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg text-sm font-poppins transition-colors duration-300 flex items-center justify-center gap-2"
                >
                  📄 Exportar PDF
                </button>
                <button 
                  onclick="exportarJSON()"
                  class="w-full bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg text-sm font-poppins transition-colors duration-300 flex items-center justify-center gap-2"
                >
                  📄 Exportar JSON
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Testimonios Aprobados (últimos 10) -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <h2 class="text-2xl font-semibold text-gray-800 mb-6 font-poppins flex items-center gap-2">
            ✅ Últimos Testimonios Aprobados
          </h2>
          <div id="approved-testimonios" class="space-y-4">
            <!-- Se llenarán dinámicamente -->
          </div>
        </div>
        </div>
        <!-- Fin Configuración Section -->

        <!-- Citas Section -->
        <div id="section-citas" class="section-content hidden">
          <!-- Gestión de Citas -->
          <div id="citas-panel" class="bg-white rounded-lg shadow-lg p-6 mb-8">
            <div class="mb-6 flex justify-between items-center">
              <h2 class="text-2xl font-semibold text-gray-800 font-poppins flex items-center gap-2">
                📅 Gestión de Citas
              </h2>
              <div class="flex gap-3">
                <button onclick="cargarCitas()" class="bg-pink-500 text-white px-4 py-2 rounded-lg hover:bg-pink-600 transition-colors font-poppins">
                  🔄 Actualizar
                </button>
                <button onclick="enviarRecordatoriosAutomaticos()" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors font-poppins">
                  📧 Recordatorios
                </button>
                <button onclick="exportarCitas()" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors font-poppins">
                  📊 Exportar
                </button>
              </div>
            </div>

            <!-- Filtros -->
            <div class="mb-6 bg-gray-50 p-4 rounded-lg">
              <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1 font-poppins">Filtrar por Estado</label>
                  <select id="filtro-estado" onchange="filtrarCitas()" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 font-poppins">
                    <option value="">Todos los estados</option>
                    <option value="confirmada">Confirmadas</option>
                    <option value="pendiente">Pendientes</option>
                    <option value="cancelada">Canceladas</option>
                    <option value="completada">Completadas</option>
                  </select>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1 font-poppins">Desde</label>
                  <input type="date" id="filtro-fecha-desde" onchange="filtrarCitas()" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 font-poppins">
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1 font-poppins">Hasta</label>
                  <input type="date" id="filtro-fecha-hasta" onchange="filtrarCitas()" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 font-poppins">
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1 font-poppins">Buscar</label>
                  <input type="text" id="filtro-buscar" placeholder="Nombre, email, teléfono..." onkeyup="filtrarCitas()" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 font-poppins">
                </div>
              </div>
            </div>

            <!-- Estado de carga -->
            <div id="citas-loading" class="text-center py-8">
              <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-pink-500 mx-auto"></div>
              <p class="mt-4 text-gray-600 font-poppins">Cargando citas...</p>
            </div>

            <!-- Lista de Citas -->
            <div id="citas-lista" class="hidden">
              <!-- El contenido se llenará dinámicamente -->
            </div>

            <!-- Vista de Calendario Mensual -->
            <div class="mt-8">
              <h3 class="text-xl font-semibold text-gray-800 mb-4 font-poppins">Vista de Calendario</h3>
              <div id="calendario-citas" class="border border-gray-200 rounded-lg p-4 bg-white">
                <div class="flex justify-between items-center mb-4">
                  <button onclick="cambiarMes(-1)" class="bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded-lg font-poppins">« Anterior</button>
                  <h4 id="mes-actual" class="text-lg font-semibold font-poppins"></h4>
                  <button onclick="cambiarMes(1)" class="bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded-lg font-poppins">Siguiente »</button>
                </div>
                <div id="calendario-grid" class="grid grid-cols-7 gap-1">
                  <!-- El calendario se llenará dinámicamente -->
                </div>
              </div>
            </div>
          </div>
        </div>
        <!-- Fin Citas Section -->

      </div>
    </div>
  </main>

  <!-- Modal de confirmación -->
  <div id="confirmation-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h3 class="text-lg font-semibold text-gray-800 mb-4 font-poppins" id="modal-title"></h3>
      <p class="text-gray-600 mb-6 font-poppins" id="modal-message"></p>
      <div class="flex gap-4">
        <button 
          id="modal-cancel" 
          class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-800 py-2 px-4 rounded-lg font-poppins transition-colors duration-300"
        >
          Cancelar
        </button>
        <button 
          id="modal-confirm" 
          class="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg font-poppins transition-colors duration-300"
        >
          Confirmar
        </button>
      </div>
    </div>
  </div>

  <!-- Toast notifications -->
  <div id="toast-container" class="fixed bottom-4 right-4 z-50 space-y-2"></div>


<style>
  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');
  
  .font-poppins {
    font-family: 'Poppins', sans-serif;
  }
  
  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }
  
  @keyframes slideUp {
    from {
      transform: translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>

<script>
  // ===== FUNCIONES GLOBALES (Disponibles inmediatamente) =====

  // Sistema de navegación de secciones - DEBE ESTAR DISPONIBLE GLOBALMENTE
  function cambiarSeccion(seccionId: string) {
    console.log('🔄 Cambiando a sección:', seccionId);
    
    // Obtener todas las secciones
    const secciones = document.querySelectorAll('.section-content');
    console.log('📋 Secciones encontradas:', secciones.length);
    
    // Ocultar todas las secciones
    secciones.forEach((seccion, index) => {
      console.log(`📦 Ocultando sección ${index}:`, seccion.id);
      seccion.classList.add('hidden');
    });

    // Mostrar la sección seleccionada
    const seccionActiva = document.getElementById(`section-${seccionId}`);
    console.log('🎯 Buscando sección:', `section-${seccionId}`);
    console.log('✅ Sección encontrada:', seccionActiva);
    
    if (seccionActiva) {
      seccionActiva.classList.remove('hidden');
      console.log('👁️ Sección mostrada:', seccionId);
    } else {
      console.error('❌ No se encontró la sección:', `section-${seccionId}`);
      
      // Debug: mostrar todas las secciones disponibles
      const todasLasSecciones = document.querySelectorAll('[id^="section-"]');
      console.log('🔍 Secciones disponibles:', Array.from(todasLasSecciones).map(s => s.id));
    }

    // Actualizar estado de los tabs
    const tabs = document.querySelectorAll('.nav-tab');
    tabs.forEach(tab => {
      tab.classList.remove('active', 'border-pink-500', 'text-pink-600');
      tab.classList.add('border-transparent', 'text-gray-500');
    });

    // Activar el tab seleccionado
    const tabActivo = document.querySelector(`[data-section="${seccionId}"]`);
    if (tabActivo) {
      tabActivo.classList.remove('border-transparent', 'text-gray-500');
      tabActivo.classList.add('active', 'border-pink-500', 'text-pink-600');
      console.log('🎯 Tab activado:', seccionId);
    } else {
      console.error('❌ No se encontró el tab:', seccionId);
    }

    // Guardar sección activa en localStorage
    localStorage.setItem('adminActiveSection', seccionId);
    
    console.log('✅ Navegación completada para:', seccionId);
  }

  // Hacer funciones disponibles globalmente INMEDIATAMENTE
  (window as any).cambiarSeccion = cambiarSeccion;

  // Función de debug global
  (window as any).debugSecciones = function() {
    console.log('🔍 Debug de secciones:');
    const secciones = document.querySelectorAll('.section-content');
    secciones.forEach((seccion, index) => {
      console.log(`Sección ${index}:`, {
        id: seccion.id,
        hidden: seccion.classList.contains('hidden'),
        visible: !seccion.classList.contains('hidden')
      });
    });
  };

  // Función para mostrar todas las secciones
  (window as any).mostrarTodasLasSecciones = function() {
    document.querySelectorAll('.section-content').forEach(s => s.classList.remove('hidden'));
    console.log('👁️ Todas las secciones mostradas');
  };

  // Función para agregar administrador - DEBE ESTAR GLOBAL
  async function agregarAdministrador() {
    console.log('� Iniciando proceso de agregar administrador');
    
    const emailInput = document.getElementById('nuevo-admin-email') as HTMLInputElement;
    const passwordInput = document.getElementById('nuevo-admin-password') as HTMLInputElement;
    
    const email = emailInput?.value.trim();
    const password = passwordInput?.value.trim();

    if (!email || !password) {
      showToast('❌ Por favor completa todos los campos', 'error');
      return;
    }

    if (!email.includes('@')) {
      showToast('❌ Ingresa un email válido', 'error');
      return;
    }

    if (password.length < 6) {
      showToast('❌ La contraseña debe tener al menos 6 caracteres', 'error');
      return;
    }

      // Verificar si el email ya existe en la lista local
      const administradores = (window as any).administradores || [];
      if (administradores.some((admin: any) => admin.email === email)) {
        showToast('❌ Este email ya está registrado como administrador', 'error');
        return;
      }

      try {
        showToast('⏳ Creando administrador en Firebase...', 'info');

        // Importar Firebase Auth y configuración existente
        const { createUserWithEmailAndPassword } = await import('firebase/auth');
        const { auth } = await import('../lib/firebase');

        // Crear usuario en Firebase Authentication
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        const firebaseUser = userCredential.user;

        console.log('✅ Usuario creado en Firebase:', firebaseUser.uid);

        // Agregar a la lista local de administradores
        const nuevoAdmin = {
          id: Date.now(),
          email: email,
          firebaseUid: firebaseUser.uid,
          rol: 'Admin',
          ultimoAcceso: new Date().toISOString(),
          estado: 'activo',
          fechaCreacion: new Date().toISOString()
        };

        // Actualizar array global
        (window as any).administradores.push(nuevoAdmin);

        // Guardar en localStorage
        if (typeof (window as any).guardarAdministradores === 'function') {
          (window as any).guardarAdministradores();
        }

        // Actualizar lista de administradores en AuthService
        try {
          const { AuthService } = await import('../lib/authService');
          AuthService.refreshAdminList();
        } catch (error) {
          console.log('⚠️ No se pudo actualizar AuthService (puede ser normal en algunas situaciones)');
        }

        // Recargar la lista visual si la función existe
        if (typeof (window as any).cargarAdministradores === 'function') {
          (window as any).cargarAdministradores();
        }

      // Limpiar campos
      emailInput.value = '';
      passwordInput.value = '';

      showToast(`✅ Administrador ${email} creado exitosamente en Firebase`, 'success');
      
      // Mostrar información adicional
      setTimeout(() => {
        showToast(`🆔 UID de Firebase: ${firebaseUser.uid.substring(0, 8)}...`, 'info');
      }, 1500);

      setTimeout(() => {
        showToast(`📧 El administrador puede iniciar sesión con: ${email}`, 'info');
      }, 3000);

    } catch (error: any) {
      console.error('❌ Error al crear administrador:', error);
      
      // Manejo específico de errores de Firebase
      let errorMessage = 'Error desconocido al crear el administrador';
      
      if (error.code === 'auth/email-already-in-use') {
        errorMessage = 'Este email ya está registrado en Firebase';
      } else if (error.code === 'auth/weak-password') {
        errorMessage = 'La contraseña es muy débil';
      } else if (error.code === 'auth/invalid-email') {
        errorMessage = 'El email no es válido';
      } else if (error.code === 'auth/operation-not-allowed') {
        errorMessage = 'La creación de cuentas está deshabilitada';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      showToast(`❌ ${errorMessage}`, 'error');
    }
  }

  // Exponer función globalmente
  (window as any).agregarAdministrador = agregarAdministrador;

  // Función para cargar administradores - DEBE ESTAR GLOBAL
  function cargarAdministradores() {
    console.log('🔄 Ejecutando cargarAdministradores...');
    
    // Obtener administradores del ámbito global
    const administradores = (window as any).administradores || [];
    console.log('📋 Administradores actuales:', administradores);
    
    const tbody = document.getElementById('lista-administradores');
    console.log('🎯 Elemento tbody encontrado:', !!tbody);
    
    if (!tbody) {
      console.error('❌ No se encontró el elemento lista-administradores');
      return;
    }

    if (!administradores || administradores.length === 0) {
      console.log('⚠️ No hay administradores para mostrar');
      tbody.innerHTML = `
        <tr>
          <td colspan="5" class="px-4 py-8 text-center text-gray-500 font-poppins">
            No hay administradores registrados
          </td>
        </tr>
      `;
      return;
    }

    const html = administradores.map((admin: any) => `
      <tr class="border-b border-gray-200 hover:bg-gray-50">
        <td class="px-4 py-3 font-poppins">${admin.email}</td>
        <td class="px-4 py-3 font-poppins">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            admin.rol === 'Super Admin' 
              ? 'bg-purple-100 text-purple-800' 
              : 'bg-blue-100 text-blue-800'
          }">
            ${admin.rol}
          </span>
        </td>
        <td class="px-4 py-3 text-sm text-gray-600 font-poppins">
          ${new Date(admin.ultimoAcceso).toLocaleDateString()}
        </td>
        <td class="px-4 py-3 font-poppins">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            admin.estado === 'activo' 
              ? 'bg-green-100 text-green-800' 
              : 'bg-red-100 text-red-800'
          }">
            ${admin.estado === 'activo' ? '✅ Activo' : '❌ Inactivo'}
          </span>
        </td>
        <td class="px-4 py-3 font-poppins">
          <div class="flex gap-2">
            ${admin.rol !== 'Super Admin' ? `
              <button 
                onclick="toggleEstadoAdmin(${admin.id})"
                class="text-yellow-600 hover:text-yellow-800 text-sm"
                title="${admin.estado === 'activo' ? 'Desactivar' : 'Activar'}"
              >
                ${admin.estado === 'activo' ? '⏸️' : '▶️'}
              </button>
              <button 
                onclick="eliminarAdministrador(${admin.id})"
                class="text-red-600 hover:text-red-800 text-sm"
                title="Eliminar"
              >
                🗑️
              </button>
            ` : `
              <span class="text-gray-400 text-sm">Super Admin</span>
            `}
          </div>
        </td>
      </tr>
    `).join('');
    
    tbody.innerHTML = html;
    console.log('✅ Tabla de administradores actualizada con', administradores.length, 'elementos');
  }
  
  console.log('🌐 Función cargarAdministradores definida');

  // Exponer función globalmente
  (window as any).cargarAdministradores = cargarAdministradores;
  console.log('🌐 cargarAdministradores agregada a window');

  console.log('�🚀 Funciones globales de navegación y administración cargadas');

  // ===== FIN FUNCIONES GLOBALES =====

  // ===== SISTEMA DE PERMISOS =====
  
  // Función para obtener el rol del usuario actual
  function obtenerRolUsuarioActual() {
    const administradores = (window as any).administradores || [];
    // Por ahora usamos el email del localStorage o un valor por defecto (Super Admin)
    const currentUserEmail = localStorage.getItem('currentAdminEmail') || 'jadermonsalve9@gmail.com';
    
    const admin = administradores.find((a: any) => a.email === currentUserEmail);
    return admin ? admin.rol : 'Admin'; // Por defecto es Admin regular
  }

  // Función para verificar si el usuario es Super Admin
  function esSuperAdmin() {
    return obtenerRolUsuarioActual() === 'Super Admin';
  }

  // Función para aplicar permisos a la interfaz
  function aplicarPermisos() {
    const rol = obtenerRolUsuarioActual();
    console.log('🔐 Aplicando permisos para rol:', rol);
    
    if (rol !== 'Super Admin') {
      // Ocultar tabs que no están permitidos para admins regulares
      const tabsAOcultar = ['dashboard', 'usuarios', 'configuracion'];
      
      tabsAOcultar.forEach(tabId => {
        const tab = document.querySelector(`[data-section="${tabId}"]`);
        if (tab) {
          tab.style.display = 'none';
          console.log(`🚫 Tab ${tabId} ocultado para admin regular`);
        }
      });
      
      // Mostrar solo la sección de testimonios
      cambiarSeccion('testimonios');
      
      // Ocultar secciones del contenido
      const seccionesAOcultar = ['section-dashboard', 'section-usuarios', 'section-configuracion'];
      seccionesAOcultar.forEach(seccionId => {
        const seccion = document.getElementById(seccionId);
        if (seccion) {
          seccion.style.display = 'none';
          console.log(`🚫 Sección ${seccionId} ocultada para admin regular`);
        }
      });
      
      // Agregar mensaje informativo en la sección de testimonios
      const testimoniosSection = document.getElementById('section-testimonios');
      if (testimoniosSection) {
        const infoMessage = document.createElement('div');
        infoMessage.className = 'bg-blue-50 border-l-4 border-blue-400 p-4 mb-6';
        infoMessage.innerHTML = `
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm text-blue-700 font-poppins">
                <strong>Acceso limitado:</strong> Como administrador regular, solo puedes gestionar testimonios (aprobar/rechazar).
              </p>
            </div>
          </div>
        `;
        testimoniosSection.insertBefore(infoMessage, testimoniosSection.firstChild);
      }
    } else {
      console.log('✅ Usuario Super Admin - acceso completo');
    }
  }

  // Exponer funciones de permisos globalmente
  (window as any).esSuperAdmin = esSuperAdmin;
  (window as any).aplicarPermisos = aplicarPermisos;
  (window as any).obtenerRolUsuarioActual = obtenerRolUsuarioActual;

  console.log('🔐 Sistema de permisos configurado');

  // ===== FIN SISTEMA DE PERMISOS =====

  // Variables globales
  let testimoniosPendientes: any[] = [];
  let testimoniosAprobados: any[] = [];
  let testimoniosFiltrados: any[] = [];
  let testimoniosAprobadosFiltrados: any[] = [];
  let tabActivo = 'pendientes';
  let charts: any = {}; // Para almacenar las instancias de Chart.js

  // Elementos del DOM
  const loadingEl = document.getElementById('loading');
  const emptyStateEl = document.getElementById('empty-state');
  const testimoniosGridEl = document.getElementById('testimonios-grid');
  const pendingCountEl = document.getElementById('pending-count');
  const approvedCountEl = document.getElementById('approved-count');
  const totalCountEl = document.getElementById('total-count');
  const averageRatingEl = document.getElementById('average-rating');
  const modal = document.getElementById('confirmation-modal');
  const modalTitle = document.getElementById('modal-title');
  const modalMessage = document.getElementById('modal-message');
  const modalCancel = document.getElementById('modal-cancel');
  const modalConfirm = document.getElementById('modal-confirm');
  const toastContainer = document.getElementById('toast-container');

  // Función para cambiar pestañas de testimonios
  function cambiarTabTestimonios(tab: string) {
    tabActivo = tab;
    
    // Actualizar estilos de pestañas
    const tabs = document.querySelectorAll('.tab-testimonio-btn');
    tabs.forEach(t => {
      t.classList.remove('border-pink-500', 'text-pink-600', 'border-green-500', 'text-green-600');
      t.classList.add('border-transparent', 'text-gray-500');
    });
    
    const activeTab = document.getElementById(`tab-${tab}`);
    if (activeTab) {
      activeTab.classList.remove('border-transparent', 'text-gray-500');
      if (tab === 'pendientes') {
        activeTab.classList.add('border-pink-500', 'text-pink-600');
      } else {
        activeTab.classList.add('border-green-500', 'text-green-600');
      }
    }
    
    // Mostrar/ocultar contenido
    const contents = document.querySelectorAll('.tab-content-testimonios');
    contents.forEach(c => c.classList.add('hidden'));
    
    const activeContent = document.getElementById(`tab-content-${tab}`);
    if (activeContent) {
      activeContent.classList.remove('hidden');
    }
    
    // Cargar datos según la pestaña
    if (tab === 'pendientes') {
      cargarTestimoniosPendientes();
    } else {
      cargarTestimoniosAprobados();
    }
  }

  // Función para cargar testimonios aprobados
  async function cargarTestimoniosAprobados() {
    const loadingAprobadosEl = document.getElementById('loading-aprobados');
    const emptyStateAprobadosEl = document.getElementById('empty-state-aprobados');
    const testimoniosAprobadosGridEl = document.getElementById('testimonios-aprobados-grid');
    
    if (loadingAprobadosEl) {
      loadingAprobadosEl.classList.remove('hidden');
    }
    
    try {
      const response = await fetch('/api/testimonios?action=aprobados');
      if (response.ok) {
        const data = await response.json();
        testimoniosAprobados = Array.isArray(data) ? data : [];
        testimoniosAprobadosFiltrados = [...testimoniosAprobados];
        
        // Actualizar contador
        const countAprobadosEl = document.getElementById('count-aprobados');
        if (countAprobadosEl) {
          countAprobadosEl.textContent = testimoniosAprobados.length.toString();
        }
        
        renderizarTestimoniosAprobados();
      } else {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error('Error cargando testimonios aprobados:', error);
      showToast('❌ Error al cargar testimonios aprobados', 'error');
    } finally {
      if (loadingAprobadosEl) {
        loadingAprobadosEl.classList.add('hidden');
      }
    }
  }

  // Función para renderizar testimonios aprobados
  function renderizarTestimoniosAprobados() {
    const testimoniosAprobadosGridEl = document.getElementById('testimonios-aprobados-grid');
    const emptyStateAprobadosEl = document.getElementById('empty-state-aprobados');
    
    if (!testimoniosAprobadosGridEl) return;
    
    if (testimoniosAprobadosFiltrados.length === 0) {
      if (emptyStateAprobadosEl) {
        emptyStateAprobadosEl.classList.remove('hidden');
      }
      testimoniosAprobadosGridEl.innerHTML = '';
      return;
    }
    
    if (emptyStateAprobadosEl) {
      emptyStateAprobadosEl.classList.add('hidden');
    }
    
    testimoniosAprobadosGridEl.innerHTML = testimoniosAprobadosFiltrados.map(testimonio => `
      <div class="border border-green-200 rounded-lg p-6 hover:shadow-lg transition-shadow duration-300 bg-green-50">
        <div class="flex justify-between items-start mb-4">
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 bg-gradient-to-br from-green-200 to-emerald-200 rounded-full flex items-center justify-center">
              ${testimonio.avatar || '👤'}
            </div>
            <div>
              <h3 class="font-semibold text-gray-800 font-poppins">${testimonio.nombre}</h3>
              <span class="text-xs text-green-600 font-poppins bg-green-100 px-2 py-1 rounded-full">Publicado</span>
            </div>
          </div>
          <div class="text-right flex items-center gap-2">
            <div class="text-yellow-400 text-lg">${'⭐'.repeat(testimonio.calificacion || 0)}</div>
            <button 
              onclick="eliminarTestimonioAprobado(${testimonio.id})"
              class="text-red-500 hover:text-red-700 transition-colors duration-200 p-1"
              title="Eliminar testimonio"
            >
              🗑️
            </button>
          </div>
        </div>
        
        <p class="text-gray-600 mb-4 font-poppins italic">
          "${testimonio.comentario}"
        </p>
        
        ${testimonio.servicio ? `
          <div class="mb-3">
            <span class="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full font-poppins">
              ${getDescripcionServicio(testimonio.servicio)}
            </span>
          </div>
        ` : ''}
        
        <div class="text-xs text-gray-400 font-poppins">
          Fecha: ${testimonio.fecha ? new Date(testimonio.fecha).toLocaleDateString('es-ES') : 'No especificada'}
        </div>
      </div>
    `).join('');
  }

  // Función para filtrar testimonios aprobados
  function filtrarTestimoniosAprobados() {
    const searchTerm = (document.getElementById('search-aprobados') as HTMLInputElement)?.value.toLowerCase() || '';
    const servicioFilter = (document.getElementById('filter-servicio-aprobados') as HTMLSelectElement)?.value || '';

    testimoniosAprobadosFiltrados = testimoniosAprobados.filter(testimonio => {
      const matchesSearch = testimonio.nombre.toLowerCase().includes(searchTerm) || 
                           testimonio.comentario.toLowerCase().includes(searchTerm);
      
      const matchesServicio = !servicioFilter || testimonio.servicio === servicioFilter;

      return matchesSearch && matchesServicio;
    });

    renderizarTestimoniosAprobados();
  }

  // Función para limpiar filtros de aprobados
  function limpiarFiltrosAprobados() {
    const searchInput = document.getElementById('search-aprobados') as HTMLInputElement;
    const servicioSelect = document.getElementById('filter-servicio-aprobados') as HTMLSelectElement;
    
    if (searchInput) searchInput.value = '';
    if (servicioSelect) servicioSelect.value = '';
    
    testimoniosAprobadosFiltrados = [...testimoniosAprobados];
    renderizarTestimoniosAprobados();
  }

  // Función para filtrar testimonios
  function filtrarTestimonios() {
    const searchTerm = (document.getElementById('search-testimonios') as HTMLInputElement)?.value.toLowerCase() || '';
    const servicioFilter = (document.getElementById('filter-servicio') as HTMLSelectElement)?.value || '';
    const calificacionFilter = (document.getElementById('filter-calificacion') as HTMLSelectElement)?.value || '';

    testimoniosFiltrados = testimoniosPendientes.filter(testimonio => {
      const matchesSearch = testimonio.nombre.toLowerCase().includes(searchTerm) || 
                           testimonio.email.toLowerCase().includes(searchTerm) ||
                           testimonio.comentario.toLowerCase().includes(searchTerm);
      
      const matchesServicio = !servicioFilter || testimonio.servicio === servicioFilter;
      const matchesCalificacion = !calificacionFilter || testimonio.calificacion.toString() === calificacionFilter;

      return matchesSearch && matchesServicio && matchesCalificacion;
    });

    renderizarTestimoniosPendientes();
  }

  // Función para mostrar toast
  function showToast(message: string, type: string = 'success') {
    if (!toastContainer) return;
    
    const toast = document.createElement('div');
    const colors = {
      success: 'bg-green-500',
      error: 'bg-red-500',
      info: 'bg-blue-500',
      warning: 'bg-yellow-500'
    };
    
    const icons = {
      success: '✅',
      error: '❌',
      info: '💡',
      warning: '⚠️'
    };
    
    toast.className = `${colors[type as keyof typeof colors] || colors.success} text-white px-4 py-3 rounded-lg shadow-lg animate-slide-up font-poppins flex items-center gap-2`;
    toast.innerHTML = `
      <span class="text-lg">${icons[type as keyof typeof icons] || icons.success}</span>
      <span>${message}</span>
    `;
    
    toastContainer.appendChild(toast);
    
    setTimeout(() => {
      toast.remove();
    }, 5000);
  }

  // Función para cargar testimonios pendientes
  async function cargarTestimoniosPendientes() {
    try {
      console.log('Cargando testimonios pendientes...');
      
      if (loadingEl) {
        loadingEl.classList.remove('hidden');
        loadingEl.style.display = 'block';
      }
      if (emptyStateEl) {
        emptyStateEl.classList.add('hidden');
        emptyStateEl.style.display = 'none';
      }
      
      const apiUrl = '/api/testimonios?action=pendientes';
      console.log('Llamando API:', apiUrl);
      
      const response = await fetch(apiUrl);
      console.log('Response status:', response.status);
      console.log('Response URL:', response.url);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Testimonios recibidos:', data);
      
      testimoniosPendientes = Array.isArray(data) ? data : [];
      testimoniosFiltrados = [...testimoniosPendientes]; // Inicializar filtrados
      
      // Actualizar contador de pendientes
      const countPendientesEl = document.getElementById('count-pendientes');
      if (countPendientesEl) {
        countPendientesEl.textContent = testimoniosPendientes.length.toString();
      }
      
      actualizarContadores();
      renderizarTestimoniosPendientes();
      
      // Actualizar gráficos después de cargar datos
      setTimeout(() => {
        inicializarGraficos();
      }, 100);
      
    } catch (error) {
      console.error('Error cargando testimonios:', error);
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      showToast('Error al cargar testimonios: ' + errorMessage, 'error');
      
      // Mostrar mensaje de error en lugar de loading
      if (testimoniosGridEl) {
        testimoniosGridEl.innerHTML = `
          <div class="col-span-full text-center py-8 bg-red-50 rounded-lg border border-red-200">
            <div class="text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-red-800 mb-2">Error al cargar testimonios</h3>
            <p class="text-red-600 text-sm">Error: ${errorMessage}</p>
            <button onclick="cargarTestimoniosPendientes()" class="mt-4 bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600">
              Reintentar
            </button>
          </div>
        `;
      }
    } finally {
      if (loadingEl) {
        loadingEl.classList.add('hidden');
        loadingEl.style.display = 'none';
      }
    }
  }

  // Función para actualizar contadores
  function actualizarContadores() {
    if (pendingCountEl) pendingCountEl.textContent = testimoniosPendientes.length.toString();
    if (totalCountEl) {
      const total = parseInt(approvedCountEl?.textContent || '0') + testimoniosPendientes.length;
      totalCountEl.textContent = total.toString();
    }
    
    // Calcular promedio de calificaciones
    const todasCalificaciones = [...testimoniosPendientes];
    if (todasCalificaciones.length > 0) {
      const promedio = todasCalificaciones.reduce((sum, t) => sum + (t.calificacion || 0), 0) / todasCalificaciones.length;
      if (averageRatingEl) averageRatingEl.textContent = promedio.toFixed(1);
    }

    // Actualizar testimonios aprobados en el dashboard
    actualizarTestimoniosAprobados();
  }

  // Función para actualizar testimonios aprobados en el dashboard
  async function actualizarTestimoniosAprobados() {
    try {
      const response = await fetch('/api/testimonios?action=aprobados');
      let testimoniosAprobados = [];
      
      if (response.ok) {
        const data = await response.json();
        testimoniosAprobados = Array.isArray(data) ? data.slice(0, 10) : []; // Últimos 10
      }

      // Actualizar contador
      if (approvedCountEl) {
        approvedCountEl.textContent = testimoniosAprobados.length.toString();
      }

      // Actualizar lista en el dashboard
      const approvedTestimoniosEl = document.getElementById('approved-testimonios');
      if (approvedTestimoniosEl) {
        if (testimoniosAprobados.length === 0) {
          approvedTestimoniosEl.innerHTML = `
            <div class="text-center py-8 text-gray-500">
              <div class="text-4xl mb-4">📝</div>
              <p class="font-poppins">No hay testimonios aprobados aún</p>
            </div>
          `;
        } else {
          approvedTestimoniosEl.innerHTML = testimoniosAprobados.map(testimonio => `
            <div class="border-l-4 border-green-500 bg-green-50 p-4 rounded-lg">
              <div class="flex justify-between items-start mb-2">
                <div class="flex items-center gap-2">
                  <span class="font-semibold text-gray-800 font-poppins">${testimonio.nombre}</span>
                  <span class="text-yellow-400">${'⭐'.repeat(testimonio.calificacion)}</span>
                </div>
                <div class="flex gap-2">
                  <span class="text-xs text-gray-500 font-poppins">
                    ${new Date(testimonio.fechaCreacion).toLocaleDateString('es-ES')}
                  </span>
                  <button 
                    onclick="eliminarTestimonioAprobado(${testimonio.id})"
                    class="text-red-500 hover:text-red-700 transition-colors duration-200"
                    title="Eliminar testimonio"
                  >
                    🗑️
                  </button>
                </div>
              </div>
              <p class="text-gray-600 font-poppins text-sm italic">"${testimonio.comentario}"</p>
              ${testimonio.servicio ? `
                <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-poppins mt-2">
                  ${getDescripcionServicio(testimonio.servicio)}
                </span>
              ` : ''}
            </div>
          `).join('');
        }
      }
    } catch (error) {
      console.error('Error actualizando testimonios aprobados:', error);
    }
  }

  // Función para inicializar gráficos
  function inicializarGraficos() {
    crearGraficoServicios();
    crearGraficoCalificaciones();
    crearGraficoTemporal();
  }

  // Función para cargar gráficos (alias para compatibilidad)
  function cargarGraficos() {
    inicializarGraficos();
  }

  // Función para crear gráfico de servicios
  function crearGraficoServicios() {
    const ctx = document.getElementById('servicios-chart') as HTMLCanvasElement;
    if (!ctx) return;

    // Destruir gráfico existente
    if (charts.servicios) charts.servicios.destroy();

    const servicios = testimoniosPendientes.reduce((acc: any, testimonio) => {
      const servicio = getDescripcionServicio(testimonio.servicio || 'otro');
      acc[servicio] = (acc[servicio] || 0) + 1;
      return acc;
    }, {});

    charts.servicios = new (window as any).Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: Object.keys(servicios),
        datasets: [{
          data: Object.values(servicios),
          backgroundColor: [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
            '#9966FF', '#FF9F40', '#FF6384', '#36A2EB'
          ],
          borderWidth: 2,
          borderColor: '#fff'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              padding: 20,
              usePointStyle: true
            }
          }
        }
      }
    });
  }

  // Función para crear gráfico de calificaciones
  function crearGraficoCalificaciones() {
    const ctx = document.getElementById('ratings-chart') as HTMLCanvasElement;
    if (!ctx) return;

    // Destruir gráfico existente
    if (charts.ratings) charts.ratings.destroy();

    const calificaciones = testimoniosPendientes.reduce((acc: any, testimonio) => {
      const rating = testimonio.calificacion || 0;
      acc[rating] = (acc[rating] || 0) + 1;
      return acc;
    }, {});

    const labels = ['1⭐', '2⭐', '3⭐', '4⭐', '5⭐'];
    const data = [1, 2, 3, 4, 5].map(rating => calificaciones[rating] || 0);

    charts.ratings = new (window as any).Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Cantidad',
          data: data,
          backgroundColor: [
            '#FF6B6B', '#FFA500', '#FFD700', '#90EE90', '#32CD32'
          ],
          borderColor: [
            '#FF5252', '#FF8C00', '#FFD700', '#90EE90', '#228B22'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1
            }
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }

  // Función para crear gráfico temporal
  function crearGraficoTemporal() {
    const ctx = document.getElementById('timeline-chart') as HTMLCanvasElement;
    if (!ctx) return;

    // Destruir gráfico existente
    if (charts.timeline) charts.timeline.destroy();

    // Agrupar por mes
    const meses = testimoniosPendientes.reduce((acc: any, testimonio) => {
      const fecha = new Date(testimonio.fechaEnvio);
      const mes = fecha.toLocaleDateString('es-ES', { year: 'numeric', month: 'short' });
      acc[mes] = (acc[mes] || 0) + 1;
      return acc;
    }, {});

    // Obtener últimos 6 meses
    const labels = [];
    const data = [];
    const today = new Date();
    
    for (let i = 5; i >= 0; i--) {
      const fecha = new Date(today.getFullYear(), today.getMonth() - i, 1);
      const mes = fecha.toLocaleDateString('es-ES', { year: 'numeric', month: 'short' });
      labels.push(mes);
      data.push(meses[mes] || 0);
    }

    charts.timeline = new (window as any).Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Testimonios',
          data: data,
          borderColor: '#EC4899',
          backgroundColor: 'rgba(236, 72, 153, 0.1)',
          borderWidth: 3,
          fill: true,
          tension: 0.4,
          pointBackgroundColor: '#EC4899',
          pointBorderColor: '#fff',
          pointBorderWidth: 2,
          pointRadius: 6
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1
            }
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }

  // Función para renderizar testimonios pendientes
  function renderizarTestimoniosPendientes() {
    const testimoniosParaMostrar = testimoniosFiltrados.length > 0 ? testimoniosFiltrados : testimoniosPendientes;
    console.log('Renderizando testimonios:', testimoniosParaMostrar.length);
    
    if (!testimoniosGridEl) {
      console.error('Grid element not found');
      return;
    }

    if (testimoniosParaMostrar.length === 0) {
      if (emptyStateEl) {
        emptyStateEl.classList.remove('hidden');
        emptyStateEl.style.display = 'block';
      }
      testimoniosGridEl.innerHTML = '';
      return;
    }

    if (emptyStateEl) {
      emptyStateEl.classList.add('hidden');
      emptyStateEl.style.display = 'none';
    }
    
    testimoniosGridEl.innerHTML = testimoniosParaMostrar.map(testimonio => `
      <div class="border border-gray-200 rounded-lg p-6 hover:shadow-lg transition-shadow duration-300 bg-white">
        <div class="flex justify-between items-start mb-4">
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 bg-gradient-to-br from-pink-200 to-purple-200 rounded-full flex items-center justify-center">
              👤
            </div>
            <div>
              <h3 class="font-semibold text-gray-800 font-poppins">${testimonio.nombre || 'Sin nombre'}</h3>
              <p class="text-sm text-gray-500 font-poppins">${testimonio.email || 'Sin email'}</p>
            </div>
          </div>
          <div class="text-right">
            <div class="text-yellow-400 text-lg mb-1">${'⭐'.repeat(testimonio.calificacion || 0)}</div>
            <span class="text-xs text-gray-400 font-poppins">
              ${testimonio.fechaEnvio ? new Date(testimonio.fechaEnvio).toLocaleDateString('es-ES') : 'Sin fecha'}
            </span>
          </div>
        </div>
        
        <p class="text-gray-600 mb-4 font-poppins italic">
          "${testimonio.comentario || 'Sin comentario'}"
        </p>
        
        ${testimonio.servicio ? `
          <div class="mb-4">
            <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-poppins">
              ${getDescripcionServicio(testimonio.servicio)}
            </span>
          </div>
        ` : ''}
        
        <div class="flex gap-3">
          <button 
            onclick="aprobarTestimonio(${testimonio.id})"
            class="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg font-poppins transition-colors duration-300 flex items-center justify-center gap-2"
          >
            ✅ Aprobar
          </button>
          <button 
            onclick="rechazarTestimonio(${testimonio.id})"
            class="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg font-poppins transition-colors duration-300 flex items-center justify-center gap-2"
          >
            ❌ Rechazar
          </button>
          <button 
            onclick="eliminarTestimonio(${testimonio.id})"
            class="bg-gray-600 hover:bg-gray-700 text-white py-2 px-3 rounded-lg font-poppins transition-colors duration-300 flex items-center justify-center"
            title="Eliminar permanentemente"
          >
            🗑️
          </button>
        </div>
      </div>
    `).join('');
  }

  // Función para obtener descripción del servicio
  function getDescripcionServicio(servicio: string) {
    const servicios: Record<string, string> = {
      maquillaje: "Maquillaje profesional",
      unas: "Diseño de uñas",
      cejas: "Diseño de cejas",
      pestanas: "Extensiones de pestañas",
      facial: "Tratamiento facial",
      otro: "Otro servicio"
    };
    return servicios[servicio] || "Cliente";
  }

  // Función para aprobar testimonio
  (window as any).aprobarTestimonio = function(id: number) {
    const testimonio = testimoniosPendientes.find(t => t.id === id);
    if (!testimonio) return;

    if (modalTitle) modalTitle.textContent = 'Aprobar Testimonio';
    if (modalMessage) modalMessage.textContent = `¿Estás seguro de que quieres aprobar el testimonio de ${testimonio.nombre}? Se publicará inmediatamente en el sitio web.`;
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    }

    if (modalConfirm) {
      modalConfirm.onclick = async () => {
        if (modal) {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
        }
        
        try {
          const response = await fetch('/api/testimonios', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'aprobar',
              id: id
            })
          });

          const result = await response.json();
          
          if (result.success) {
            showToast('Testimonio aprobado y publicado exitosamente');
            cargarTestimoniosPendientes();
            
            // Actualizar contador de aprobados
            if (approvedCountEl) {
              const currentApproved = parseInt(approvedCountEl.textContent || '0');
              approvedCountEl.textContent = (currentApproved + 1).toString();
            }
          } else {
            showToast('Error al aprobar testimonio', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showToast('Error al aprobar testimonio', 'error');
        }
      };
    }
  };

  // Función para rechazar testimonio
  (window as any).rechazarTestimonio = function(id: number) {
    const testimonio = testimoniosPendientes.find(t => t.id === id);
    if (!testimonio) return;

    if (modalTitle) modalTitle.textContent = 'Rechazar Testimonio';
    if (modalMessage) modalMessage.textContent = `¿Estás seguro de que quieres rechazar el testimonio de ${testimonio.nombre}? Esta acción no se puede deshacer.`;
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    }

    if (modalConfirm) {
      modalConfirm.onclick = async () => {
        if (modal) {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
        }
        
        try {
          const response = await fetch('/api/testimonios', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'rechazar',
              id: id
            })
          });

          const result = await response.json();
          
          if (result.success) {
            showToast('Testimonio rechazado');
            cargarTestimoniosPendientes();
          } else {
            showToast('Error al rechazar testimonio', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showToast('Error al rechazar testimonio', 'error');
        }
      };
    }
  };

  // Función para eliminar testimonio permanentemente
  (window as any).eliminarTestimonio = function(id: number) {
    const testimonio = testimoniosPendientes.find(t => t.id === id);
    if (!testimonio) return;

    if (modalTitle) modalTitle.textContent = 'Eliminar Testimonio';
    if (modalMessage) modalMessage.textContent = `¿Estás seguro de que quieres eliminar permanentemente el testimonio de ${testimonio.nombre}? Esta acción no se puede deshacer.`;
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    }

    if (modalConfirm) {
      modalConfirm.onclick = async () => {
        if (modal) {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
        }
        
        try {
          const response = await fetch('/api/testimonios', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'eliminar',
              id: id
            })
          });

          const result = await response.json();
          
          if (result.success) {
            showToast('🗑️ Testimonio eliminado permanentemente', 'success');
            cargarTestimoniosPendientes();
          } else {
            showToast('❌ Error al eliminar testimonio', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showToast('❌ Error al eliminar testimonio', 'error');
        }
      };
    }
  };

  // Función para eliminar testimonio aprobado desde el dashboard
  (window as any).eliminarTestimonioAprobado = function(id: number) {
    if (modalTitle) modalTitle.textContent = 'Eliminar Testimonio Aprobado';
    if (modalMessage) modalMessage.textContent = `¿Estás seguro de que quieres eliminar este testimonio aprobado? Esta acción no se puede deshacer y el testimonio será removido del sitio web.`;
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    }

    if (modalConfirm) {
      modalConfirm.onclick = async () => {
        if (modal) {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
        }
        
        try {
          const response = await fetch('/api/testimonios', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'eliminar',
              id: id
            })
          });

          const result = await response.json();
          
          if (result.success) {
            showToast('🗑️ Testimonio eliminado del sitio web', 'success');
            actualizarTestimoniosAprobados();
            cargarTestimoniosPendientes(); // Actualizar también la vista de pendientes
          } else {
            showToast('❌ Error al eliminar testimonio', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showToast('❌ Error al eliminar testimonio', 'error');
        }
      };
    }
  };

  // Event listeners
  if (modalCancel) {
    modalCancel.addEventListener('click', () => {
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
      }
    });
  }

  if (modal) {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
      }
    });
  }

  // Función para limpiar filtros
  (window as any).limpiarFiltros = function() {
    const searchInput = document.getElementById('search-testimonios') as HTMLInputElement;
    const servicioSelect = document.getElementById('filter-servicio') as HTMLSelectElement;
    const calificacionSelect = document.getElementById('filter-calificacion') as HTMLSelectElement;
    
    if (searchInput) searchInput.value = '';
    if (servicioSelect) servicioSelect.value = '';
    if (calificacionSelect) calificacionSelect.value = '';
    
    filtrarTestimonios();
    showToast('Filtros limpiados', 'info');
  };

  // Hacer función global
  (window as any).cargarTestimoniosPendientes = cargarTestimoniosPendientes;

  // Cargar datos al iniciar
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('🚀 DOM loaded, verificando autenticación...');
    
    // Cargar administradores inmediatamente (independiente de autenticación)
    console.log('🔄 Intentando cargar administradores...');
    
    try {
      if (typeof (window as any).cargarAdministradores === 'function') {
        console.log('✅ Función cargarAdministradores encontrada, ejecutando...');
        (window as any).cargarAdministradores();
      } else {
        console.error('❌ Función cargarAdministradores no está disponible');
        console.log('🔍 Funciones disponibles en window:', Object.keys(window).filter(k => k.includes('admin') || k.includes('cargar')));
      }
    } catch (error) {
      console.error('❌ Error al ejecutar cargarAdministradores:', error);
    }
    
    // Verificar autenticación
    await checkAuthentication();
    
    // Agregar event listeners para filtros
    const searchInput = document.getElementById('search-testimonios');
    const servicioSelect = document.getElementById('filter-servicio');
    const calificacionSelect = document.getElementById('filter-calificacion');
    
    if (searchInput) {
      searchInput.addEventListener('input', filtrarTestimonios);
    }
    
    if (servicioSelect) {
      servicioSelect.addEventListener('change', filtrarTestimonios);
    }
    
    if (calificacionSelect) {
      calificacionSelect.addEventListener('change', filtrarTestimonios);
    }

    // Event listeners para filtros de testimonios aprobados
    const searchAprobadosInput = document.getElementById('search-aprobados');
    const servicioAprobadosSelect = document.getElementById('filter-servicio-aprobados');
    
    if (searchAprobadosInput) {
      searchAprobadosInput.addEventListener('input', filtrarTestimoniosAprobados);
    }
    
    if (servicioAprobadosSelect) {
      servicioAprobadosSelect.addEventListener('change', filtrarTestimoniosAprobados);
    }
  });

  // Función para verificar autenticación
  async function checkAuthentication() {
    try {
      console.log('Iniciando verificación de autenticación...');
      
      // Importar dinámicamente para evitar errores SSR
      const { AuthService } = await import('../lib/authService');
      
      // Verificar si el usuario está autenticado
      const user = await AuthService.getCurrentUser();
      
      if (user) {
        // Usuario autenticado, mostrar panel admin
        console.log('Usuario autenticado:', user.email);
        showAdminPanel(user);
      } else {
        // No autenticado, mostrar pantalla de login
        console.log('Usuario no autenticado, redirigiendo al login');
        showLoginRequired();
      }
      
    } catch (error) {
      console.error('Error verificando autenticación:', error);
      // En caso de error de Firebase, permitir acceso temporal
      console.log('Permitiendo acceso temporal debido a error de Firebase');
      showAdminPanel({ email: 'temp@glambook.com', uid: 'temp', displayName: 'Usuario Temporal' });
    }
  }

  // Mostrar panel de admin
  function showAdminPanel(user: any) {
    const authLoading = document.getElementById('auth-loading');
    const loginRequired = document.getElementById('login-required');
    const adminContent = document.getElementById('admin-content');
    const configAdminEmail = document.getElementById('config-admin-email');

    // Ocultar pantallas de carga y login
    if (authLoading) authLoading.classList.add('hidden');
    if (loginRequired) loginRequired.classList.add('hidden');
    
    // Mostrar contenido admin
    if (adminContent) adminContent.classList.remove('hidden');
    
    // Mostrar info del admin en configuración
    if (configAdminEmail) {
      configAdminEmail.textContent = user.email || 'jadermonsalve9@gmail.com';
    }

    // Guardar email del usuario actual para el sistema de permisos
    localStorage.setItem('currentAdminEmail', user.email || 'jadermonsalve9@gmail.com');

    // Actualizar navbar con info del usuario (si la función existe)
    if (typeof (window as any).adminNavbar?.updateUserInfo === 'function') {
      (window as any).adminNavbar.updateUserInfo(user);
    }

    // Cargar datos
    console.log('Cargando testimonios...');
    cargarTestimoniosPendientes(); // Quitar await
    (window as any).cargarAdministradores();
    
    // Aplicar permisos después de cargar todo
    setTimeout(() => {
      if (typeof (window as any).aplicarPermisos === 'function') {
        (window as any).aplicarPermisos();
      }
    }, 500);
    
    // Cargar gráficos después de un breve delay
    setTimeout(() => {
      cargarGraficos();
    }, 500);
    
    // Restaurar sección activa
    setTimeout(() => {
      restaurarSeccionActiva();
    }, 100);
    
    console.log('Panel de administración inicializado correctamente');
    
    // Auto-refresh cada 30 segundos con notificación
    let ultimoCantidadPendientes = 0;
    setInterval(async () => {
      const estadoAnterior = testimoniosPendientes.length;
      await cargarTestimoniosPendientes();
      
      // Verificar si hay nuevos testimonios
      if (testimoniosPendientes.length > estadoAnterior) {
        const nuevos = testimoniosPendientes.length - estadoAnterior;
        showToast(`¡${nuevos} nuevo${nuevos > 1 ? 's' : ''} testimonio${nuevos > 1 ? 's' : ''} pendiente${nuevos > 1 ? 's' : ''}!`, 'info');
        
        // Opcional: Reproducir sonido si está habilitado
        const soundEnabled = document.getElementById('sound-notifications') as HTMLInputElement;
        if (soundEnabled?.checked) {
          // Crear un sonido de notificación simple
          const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmMdCjiN1u/XfzAIJHfG7+PQSS0FJXvD6+3UmkkIIVyn5OO7X4wQDEy+wOe+iNPkgiYJGVen4OW9aTtYpVOk3euigiIH2++m5rtwoyU');
          audio.volume = 0.1;
          audio.play().catch(() => {}); // Ignorar errores de autoplay
        }
      }
    }, 30000);

    // Función para obtener todos los testimonios (para exportaciones)
    async function obtenerTestimonios() {
      try {
        const response = await fetch('/api/testimonios');
        if (response.ok) {
          const data = await response.json();
          return Array.isArray(data) ? data : [];
        }
        return [];
      } catch (error) {
        console.error('Error obteniendo testimonios:', error);
        // Fallback con datos de prueba
        return [
          {
            id: 1,
            nombre: "María García",
            email: "maria@email.com",
            servicio: "Maquillaje",
            calificacion: 5,
            comentario: "Excelente servicio, muy profesional",
            aprobado: true,
            fechaCreacion: new Date().toISOString()
          },
          {
            id: 2,
            nombre: "Ana López",
            email: "ana@email.com",
            servicio: "Uñas",
            calificacion: 4,
            comentario: "Muy buen trabajo, recomendado",
            aprobado: false,
            fechaCreacion: new Date().toISOString()
          },
          {
            id: 3,
            nombre: "Carmen Ruiz",
            email: "carmen@email.com",
            servicio: "Cejas",
            calificacion: 5,
            comentario: "Perfecto resultado, volveré seguro",
            aprobado: true,
            fechaCreacion: new Date().toISOString()
          }
        ];
      }
    }

    // Variables de administradores
    let administradores = [
      {
        id: 1,
        email: 'jadermonsalve9@gmail.com',
        rol: 'Super Admin',
        ultimoAcceso: new Date().toISOString(),
        estado: 'activo',
        fechaCreacion: new Date().toISOString()
      },
      {
        id: 2,
        email: 'admin@glambook.com',
        rol: 'Admin',
        ultimoAcceso: new Date().toISOString(),
        estado: 'activo',
        fechaCreacion: new Date().toISOString()
      }
    ];

    // Funciones de persistencia
    function guardarAdministradores() {
      try {
        localStorage.setItem('glambook_administradores', JSON.stringify(administradores));
        console.log('💾 Administradores guardados en localStorage');
      } catch (error) {
        console.error('❌ Error al guardar administradores:', error);
      }
    }

    function cargarAdministradoresDesdeStorage() {
      try {
        const stored = localStorage.getItem('glambook_administradores');
        if (stored) {
          const parsed = JSON.parse(stored);
          if (Array.isArray(parsed) && parsed.length > 0) {
            administradores = parsed;
            console.log('📥 Administradores cargados desde localStorage:', administradores.length);
          }
        }
      } catch (error) {
        console.error('❌ Error al cargar administradores:', error);
      }
    }

    // Cargar administradores guardados al inicio
    cargarAdministradoresDesdeStorage();

    // Exponer variable globalmente para acceso desde función global
    (window as any).administradores = administradores;

    function toggleEstadoAdmin(adminId: number) {
      // Verificar permisos
      if (typeof (window as any).esSuperAdmin === 'function' && !(window as any).esSuperAdmin()) {
        showToast('❌ No tienes permisos para modificar administradores', 'error');
        return;
      }
      
      const admin = administradores.find(a => a.id === adminId);
      if (!admin) return;

      admin.estado = admin.estado === 'activo' ? 'inactivo' : 'activo';
      (window as any).administradores = administradores; // Actualizar referencia global
      guardarAdministradores(); // Guardar cambios
      
      // Actualizar lista de administradores en AuthService
      try {
        import('../lib/authService').then(({ AuthService }) => {
          AuthService.refreshAdminList();
        });
      } catch (error) {
        console.log('⚠️ No se pudo actualizar AuthService');
      }
      
      (window as any).cargarAdministradores();
      
      showToast(`${admin.estado === 'activo' ? '✅ Activado' : '⏸️ Desactivado'} administrador ${admin.email}`, 'success');
    }

    function eliminarAdministrador(adminId: number) {
      // Verificar permisos
      if (typeof (window as any).esSuperAdmin === 'function' && !(window as any).esSuperAdmin()) {
        showToast('❌ No tienes permisos para eliminar administradores', 'error');
        return;
      }
      
      const admin = administradores.find(a => a.id === adminId);
      if (!admin) return;

      if (admin.rol === 'Super Admin') {
        showToast('❌ No se puede eliminar el Super Admin', 'error');
        return;
      }

      if (confirm(`¿Estás seguro de eliminar al administrador ${admin.email}?`)) {
        administradores = administradores.filter(a => a.id !== adminId);
        (window as any).administradores = administradores; // Actualizar referencia global
        guardarAdministradores(); // Guardar cambios
        (window as any).cargarAdministradores();
        showToast(`🗑️ Administrador ${admin.email} eliminado`, 'success');
      }
    }

    // Exponer funciones de gestión de usuarios globalmente
    (window as any).toggleEstadoAdmin = toggleEstadoAdmin;
    (window as any).eliminarAdministrador = eliminarAdministrador;
    (window as any).guardarAdministradores = guardarAdministradores;

    // Funciones de exportación
    async function exportarCSV() {
      try {
        const testimonios = await obtenerTestimonios();
        
        // Headers CSV
        const headers = ['ID', 'Nombre', 'Email', 'Servicio', 'Calificación', 'Comentario', 'Estado', 'Fecha'];
        
        // Convertir datos a formato CSV
        const csvContent = [
          headers.join(','),
          ...testimonios.map(t => [
            t.id,
            `"${t.nombre}"`,
            `"${t.email}"`,
            `"${t.servicio}"`,
            t.calificacion,
            `"${t.comentario.replace(/"/g, '""')}"`,
            t.aprobado ? 'Aprobado' : 'Pendiente',
            new Date(t.fechaCreacion).toLocaleDateString()
          ].join(','))
        ].join('\n');
        
        // Crear y descargar archivo
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `testimonios_glambook_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showToast('✅ Archivo CSV exportado exitosamente', 'success');
      } catch (error) {
        console.error('Error al exportar CSV:', error);
        showToast('❌ Error al exportar CSV', 'error');
      }
    }

    async function exportarJSON() {
      try {
        const testimonios = await obtenerTestimonios();
        const estadisticas = {
          total: testimonios.length,
          aprobados: testimonios.filter(t => t.aprobado).length,
          pendientes: testimonios.filter(t => !t.aprobado).length,
          calificacionPromedio: (testimonios.reduce((acc, t) => acc + t.calificacion, 0) / testimonios.length).toFixed(1)
        };
        
        const exportData = {
          fechaExportacion: new Date().toISOString(),
          estadisticas,
          testimonios
        };
        
        const jsonContent = JSON.stringify(exportData, null, 2);
        const blob = new Blob([jsonContent], { type: 'application/json' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `testimonios_glambook_${new Date().toISOString().split('T')[0]}.json`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showToast('✅ Archivo JSON exportado exitosamente', 'success');
      } catch (error) {
        console.error('Error al exportar JSON:', error);
        showToast('❌ Error al exportar JSON', 'error');
      }
    }

    async function exportarPDF() {
      try {
        const testimonios = await obtenerTestimonios();
        
        // Crear contenido HTML para PDF
        const htmlContent = `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>Reporte de Testimonios - GlamBook</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .header { text-align: center; margin-bottom: 30px; }
              .stats { display: flex; justify-content: space-around; margin: 20px 0; }
              .stat { text-align: center; }
              table { width: 100%; border-collapse: collapse; margin: 20px 0; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
              .rating { color: #f59e0b; }
              @media print {
                body { margin: 0; }
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>📊 Reporte de Testimonios - GlamBook</h1>
              <p>Generado el: ${new Date().toLocaleDateString()}</p>
            </div>
            
            <div class="stats">
              <div class="stat">
                <h3>${testimonios.length}</h3>
                <p>Total Testimonios</p>
              </div>
              <div class="stat">
                <h3>${testimonios.filter(t => t.aprobado).length}</h3>
                <p>Aprobados</p>
              </div>
              <div class="stat">
                <h3>${testimonios.filter(t => !t.aprobado).length}</h3>
                <p>Pendientes</p>
              </div>
              <div class="stat">
                <h3>${(testimonios.reduce((acc, t) => acc + t.calificacion, 0) / testimonios.length).toFixed(1)} ⭐</h3>
                <p>Calificación Promedio</p>
              </div>
            </div>
            
            <table>
              <thead>
                <tr>
                  <th>Nombre</th>
                  <th>Email</th>
                  <th>Servicio</th>
                  <th>Calificación</th>
                  <th>Comentario</th>
                  <th>Estado</th>
                  <th>Fecha</th>
                </tr>
              </thead>
              <tbody>
                ${testimonios.map(t => `
                  <tr>
                    <td>${t.nombre}</td>
                    <td>${t.email}</td>
                    <td>${t.servicio}</td>
                    <td class="rating">${'★'.repeat(t.calificacion)}${'☆'.repeat(5-t.calificacion)}</td>
                    <td>${t.comentario}</td>
                    <td>${t.aprobado ? '✅ Aprobado' : '⏳ Pendiente'}</td>
                    <td>${new Date(t.fechaCreacion).toLocaleDateString()}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </body>
          </html>
        `;
        
        // Abrir en nueva ventana para imprimir como PDF
        const printWindow = window.open('', '_blank');
        printWindow.document.write(htmlContent);
        printWindow.document.close();
        printWindow.focus();
        
        setTimeout(() => {
          printWindow.print();
          showToast('📄 Ventana de impresión abierta - Selecciona "Guardar como PDF"', 'success');
        }, 500);
        
      } catch (error) {
        console.error('Error al exportar PDF:', error);
        showToast('❌ Error al exportar PDF', 'error');
      }
    }

    // Restaurar sección activa al cargar la página
    function restaurarSeccionActiva() {
      const seccionGuardada = localStorage.getItem('adminActiveSection') || 'dashboard';
      console.log('Restaurando sección:', seccionGuardada);
      cambiarSeccion(seccionGuardada);
    }

    // Hacer funciones disponibles globalmente
    (window as any).cambiarSeccion = cambiarSeccion;
    (window as any).cargarTestimoniosPendientes = cargarTestimoniosPendientes;
    (window as any).cargarAdministradores = cargarAdministradores;
    (window as any).exportarCSV = exportarCSV;
    (window as any).exportarJSON = exportarJSON;
    (window as any).exportarPDF = exportarPDF;
    (window as any).agregarAdministrador = agregarAdministrador;
    (window as any).toggleEstadoAdmin = toggleEstadoAdmin;
    (window as any).eliminarAdministrador = eliminarAdministrador;
    (window as any).actualizarTestimoniosAprobados = actualizarTestimoniosAprobados;
    (window as any).cambiarTabTestimonios = cambiarTabTestimonios;
    (window as any).cargarTestimoniosAprobados = cargarTestimoniosAprobados;
    (window as any).filtrarTestimoniosAprobados = filtrarTestimoniosAprobados;
    (window as any).limpiarFiltrosAprobados = limpiarFiltrosAprobados;

    // Función de prueba para verificar todas las funcionalidades
    function ejecutarPruebasCompletas() {
      console.log('🧪 Iniciando pruebas del panel de administración...');
      
      // Probar carga de datos
      setTimeout(() => {
        console.log('✅ Test 1: Carga de testimonios pendientes');
        console.log(`📊 Testimonios pendientes encontrados: ${testimoniosPendientes.length}`);
      }, 1000);
      
      // Probar navegación
      setTimeout(() => {
        console.log('✅ Test 2: Sistema de navegación');
        cambiarSeccion('testimonios');
        setTimeout(() => cambiarSeccion('usuarios'), 500);
        setTimeout(() => cambiarSeccion('configuracion'), 1000);
        setTimeout(() => cambiarSeccion('dashboard'), 1500);
      }, 2000);
      
      // Probar gestión de usuarios
      setTimeout(() => {
        console.log('✅ Test 3: Gestión de administradores');
        console.log(`👥 Administradores registrados: ${administradores.length}`);
      }, 4000);
      
      // Probar exportaciones (simulado)
      setTimeout(() => {
        console.log('✅ Test 4: Sistema de exportación');
        console.log('📤 Funciones de exportación: CSV, JSON, PDF disponibles');
      }, 5000);
      
      setTimeout(() => {
        console.log('🎉 ¡Todas las pruebas completadas exitosamente!');
        showToast('🧪 Pruebas del sistema completadas exitosamente', 'success');
      }, 6000);
    }

    // Hacer la función de pruebas disponible globalmente
    (window as any).ejecutarPruebasCompletas = ejecutarPruebasCompletas;
  }

  // Mostrar pantalla de login requerido
  function showLoginRequired() {
    const authLoading = document.getElementById('auth-loading');
    const loginRequired = document.getElementById('login-required');
    const adminContent = document.getElementById('admin-content');

    if (authLoading) authLoading.classList.add('hidden');
    if (adminContent) adminContent.classList.add('hidden');
    if (loginRequired) {
      loginRequired.classList.remove('hidden');
      loginRequired.classList.add('flex');
    }
  }

  // ===== FUNCIONES DE DEBUG =====
  (window as any).debugAdministradores = function() {
    console.log('🔍 Debug de administradores:');
    const stored = localStorage.getItem('glambook_administradores');
    console.log('📦 En localStorage:', stored);
    console.log('🎯 Parseado:', stored ? JSON.parse(stored) : null);
    console.log('🌐 En window:', (window as any).administradores);
  };

  (window as any).testearLogin = async function(email, password) {
    try {
      console.log('🧪 Probando login con:', email);
      const { AuthService } = await import('../lib/authService');
      console.log('🔍 ¿Es admin?', AuthService.isAdmin(email));
      const result = await AuthService.signIn(email, password);
      console.log('✅ Login exitoso:', result);
      return result;
    } catch (error) {
      console.error('❌ Error en login:', error.message);
      throw error;
    }
  };

  // Función para simular rol de admin regular (solo para testing)
  (window as any).simularAdminRegular = function() {
    localStorage.setItem('currentAdminEmail', 'test@glambook.com');
    if (typeof (window as any).aplicarPermisos === 'function') {
      (window as any).aplicarPermisos();
    }
    console.log('🧪 Simulando admin regular - solo puede gestionar testimonios');
  };

  // Función para volver a Super Admin
  (window as any).volverSuperAdmin = function() {
    localStorage.setItem('currentAdminEmail', 'admin@glambook.com');
    location.reload(); // Recargar para restaurar funcionalidad completa
  };

  console.log('🔬 Funciones de debug cargadas');

  // Función de verificación inmediata
  function verificarEstadoAdministradores() {
    console.log('🔍 VERIFICACIÓN DE ESTADO:');
    console.log('📦 administradores en window:', (window as any).administradores);
    console.log('🎯 función cargarAdministradores:', typeof (window as any).cargarAdministradores);
    console.log('📋 elemento lista-administradores:', !!document.getElementById('lista-administradores'));
    
    // Intentar ejecutar cargarAdministradores directamente
    if (typeof (window as any).cargarAdministradores === 'function') {
      console.log('🚀 Ejecutando cargarAdministradores directamente...');
      try {
        (window as any).cargarAdministradores();
      } catch (error) {
        console.error('❌ Error al ejecutar cargarAdministradores:', error);
      }
    }
  }

  // Exponer función de verificación
  (window as any).verificarEstadoAdministradores = verificarEstadoAdministradores;
  
  // Ejecutar verificación después de un breve delay
  setTimeout(() => {
    console.log('⏰ Ejecutando verificación automática...');
    verificarEstadoAdministradores();
    
    // También aplicar permisos si hay un usuario logueado
    const currentUserEmail = localStorage.getItem('currentAdminEmail');
    if (currentUserEmail && typeof (window as any).aplicarPermisos === 'function') {
      console.log('🔐 Aplicando permisos para usuario actual:', currentUserEmail);
      (window as any).aplicarPermisos();
    }
  }, 1000);

  // ==================== GESTIÓN DE CITAS ====================
  
  // Variables globales para citas
  let citasData: any[] = [];
  let citasFiltradas: any[] = [];
  let mesActual = new Date();
  
  // Función para cargar citas
  async function cargarCitas() {
    console.log('📅 Cargando citas...');
    
    const loadingElement = document.getElementById('citas-loading');
    const listaElement = document.getElementById('citas-lista');
    
    if (loadingElement) loadingElement.classList.remove('hidden');
    if (listaElement) listaElement.classList.add('hidden');
    
    try {
      const response = await fetch('/api/citas?action=obtener-todas');
      if (response.ok) {
        citasData = await response.json();
        citasFiltradas = [...citasData];
        
        console.log('✅ Citas cargadas:', citasData.length);
        renderizarCitas();
        renderizarCalendario();
        
        if (loadingElement) loadingElement.classList.add('hidden');
        if (listaElement) listaElement.classList.remove('hidden');
      } else {
        console.error('❌ Error al cargar citas');
      }
    } catch (error) {
      console.error('❌ Error de conexión al cargar citas:', error);
    }
  }
  
  // Función para renderizar lista de citas
  function renderizarCitas() {
    const listaElement = document.getElementById('citas-lista');
    if (!listaElement) return;
    
    if (citasFiltradas.length === 0) {
      listaElement.innerHTML = `
        <div class="text-center py-8">
          <p class="text-gray-500 font-poppins">No hay citas registradas</p>
        </div>
      `;
      return;
    }
    
    const estadoColors = {
      'pendiente': 'bg-yellow-100 text-yellow-800',
      'confirmada': 'bg-green-100 text-green-800',
      'cancelada': 'bg-red-100 text-red-800',
      'completada': 'bg-blue-100 text-blue-800'
    };
    
    listaElement.innerHTML = `
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cliente</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hora</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Servicio</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            ${citasFiltradas.map(cita => `
              <tr>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900 font-poppins">${cita.nombre}</div>
                  <div class="text-sm text-gray-500">${cita.email}</div>
                  <div class="text-sm text-gray-500">${cita.telefono}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-poppins">${new Date(cita.fecha).toLocaleDateString('es-ES')}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-poppins">${cita.hora}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-poppins">${cita.servicio}</td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${estadoColors[cita.estado] || 'bg-gray-100 text-gray-800'}">
                    ${cita.estado}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div class="flex gap-2">
                    <select onchange="cambiarEstadoCita('${cita.id}', this.value)" class="text-xs border border-gray-300 rounded px-2 py-1">
                      <option value="pendiente" ${cita.estado === 'pendiente' ? 'selected' : ''}>Pendiente</option>
                      <option value="confirmada" ${cita.estado === 'confirmada' ? 'selected' : ''}>Confirmada</option>
                      <option value="completada" ${cita.estado === 'completada' ? 'selected' : ''}>Completada</option>
                      <option value="cancelada" ${cita.estado === 'cancelada' ? 'selected' : ''}>Cancelada</option>
                    </select>
                    <div class="flex gap-1">
                      <button onclick="enviarEmailCita('${cita.id}', 'recordatorio')" class="text-blue-600 hover:text-blue-900 text-xs" title="Enviar recordatorio">📧</button>
                      <button onclick="enviarEmailCita('${cita.id}', 'confirmacion')" class="text-green-600 hover:text-green-900 text-xs" title="Reenviar confirmación">✉️</button>
                      <button onclick="eliminarCita('${cita.id}')" class="text-red-600 hover:text-red-900 text-xs" title="Eliminar cita">🗑️</button>
                    </div>
                  </div>
                </td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  }
  
  // Función para filtrar citas
  function filtrarCitas() {
    const filtroEstado = (document.getElementById('filtro-estado') as HTMLSelectElement)?.value || '';
    const filtroFechaDesde = (document.getElementById('filtro-fecha-desde') as HTMLInputElement)?.value || '';
    const filtroFechaHasta = (document.getElementById('filtro-fecha-hasta') as HTMLInputElement)?.value || '';
    const filtroBuscar = (document.getElementById('filtro-buscar') as HTMLInputElement)?.value.toLowerCase() || '';
    
    citasFiltradas = citasData.filter(cita => {
      // Filtro por estado
      if (filtroEstado && cita.estado !== filtroEstado) return false;
      
      // Filtro por fecha desde
      if (filtroFechaDesde && new Date(cita.fecha) < new Date(filtroFechaDesde)) return false;
      
      // Filtro por fecha hasta
      if (filtroFechaHasta && new Date(cita.fecha) > new Date(filtroFechaHasta)) return false;
      
      // Filtro por búsqueda de texto
      if (filtroBuscar) {
        const textoCompleto = `${cita.nombre} ${cita.email} ${cita.telefono} ${cita.servicio}`.toLowerCase();
        if (!textoCompleto.includes(filtroBuscar)) return false;
      }
      
      return true;
    });
    
    renderizarCitas();
  }
  
  // Función para cambiar estado de cita
  async function cambiarEstadoCita(citaId: string, nuevoEstado: string) {
    try {
      const response = await fetch('/api/citas', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'cambiar-estado',
          id: citaId,
          estado: nuevoEstado
        })
      });
      
      if (response.ok) {
        console.log('✅ Estado de cita actualizado');
        cargarCitas(); // Recargar la lista
      } else {
        console.error('❌ Error al actualizar estado de cita');
      }
    } catch (error) {
      console.error('❌ Error de conexión:', error);
    }
  }
  
  // Función para eliminar cita
  async function eliminarCita(citaId: string) {
    if (!confirm('¿Estás seguro de que quieres eliminar esta cita?')) return;
    
    try {
      const response = await fetch('/api/citas', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'eliminar',
          id: citaId
        })
      });
      
      if (response.ok) {
        console.log('✅ Cita eliminada');
        cargarCitas(); // Recargar la lista
      } else {
        console.error('❌ Error al eliminar cita');
      }
    } catch (error) {
      console.error('❌ Error de conexión:', error);
    }
  }
  
  // Función para renderizar calendario
  function renderizarCalendario() {
    const calendarioGrid = document.getElementById('calendario-grid');
    const mesActualElement = document.getElementById('mes-actual');
    
    if (!calendarioGrid || !mesActualElement) return;
    
    const year = mesActual.getFullYear();
    const month = mesActual.getMonth();
    
    // Actualizar título del mes
    mesActualElement.textContent = new Date(year, month).toLocaleDateString('es-ES', { 
      month: 'long', 
      year: 'numeric' 
    }).toUpperCase();
    
    // Obtener primer día del mes y días en el mes
    const primerDia = new Date(year, month, 1);
    const ultimoDia = new Date(year, month + 1, 0);
    const diasEnMes = ultimoDia.getDate();
    const iniciaSemana = primerDia.getDay() === 0 ? 6 : primerDia.getDay() - 1; // Lunes = 0
    
    // Limpiar grid
    calendarioGrid.innerHTML = '';
    
    // Agregar encabezados de días
    const diasSemana = ['Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb', 'Dom'];
    diasSemana.forEach(dia => {
      calendarioGrid.innerHTML += `
        <div class="p-2 text-center font-semibold text-gray-600 bg-gray-100 text-sm">
          ${dia}
        </div>
      `;
    });
    
    // Agregar días vacíos al inicio
    for (let i = 0; i < iniciaSemana; i++) {
      calendarioGrid.innerHTML += '<div class="p-2 h-20 border border-gray-200"></div>';
    }
    
    // Agregar días del mes
    for (let dia = 1; dia <= diasEnMes; dia++) {
      const fecha = new Date(year, month, dia);
      const fechaStr = fecha.toISOString().split('T')[0];
      
      // Contar citas para este día
      const citasDelDia = citasData.filter(cita => cita.fecha === fechaStr);
      
      calendarioGrid.innerHTML += `
        <div class="p-1 h-20 border border-gray-200 text-sm">
          <div class="font-semibold">${dia}</div>
          ${citasDelDia.map(cita => `
            <div class="text-xs p-1 mb-1 rounded truncate ${
              cita.estado === 'confirmada' ? 'bg-green-100 text-green-800' :
              cita.estado === 'pendiente' ? 'bg-yellow-100 text-yellow-800' :
              cita.estado === 'cancelada' ? 'bg-red-100 text-red-800' :
              'bg-blue-100 text-blue-800'
            }" title="${cita.hora} - ${cita.nombre}">
              ${cita.hora} ${cita.nombre.split(' ')[0]}
            </div>
          `).join('')}
        </div>
      `;
    }
  }
  
  // Función para cambiar mes en calendario
  function cambiarMes(direccion: number) {
    mesActual.setMonth(mesActual.getMonth() + direccion);
    renderizarCalendario();
  }
  
  // Función para exportar citas
  function exportarCitas() {
    if (citasFiltradas.length === 0) {
      alert('No hay citas para exportar');
      return;
    }
    
    const csv = [
      'Fecha,Hora,Cliente,Email,Teléfono,Servicio,Estado,Comentarios',
      ...citasFiltradas.map(cita => 
        `${cita.fecha},${cita.hora},"${cita.nombre}","${cita.email}","${cita.telefono}","${cita.servicio}","${cita.estado}","${cita.comentarios || ''}"`
      )
    ].join('\n');
    
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `citas_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  }

  // Función para enviar email a una cita específica
  async function enviarEmailCita(citaId: string, tipo: 'recordatorio' | 'confirmacion') {
    try {
      console.log(`📧 Enviando ${tipo} para cita:`, citaId);
      
      const response = await fetch('/api/emails', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'enviar-email',
          citaId: citaId,
          tipo: tipo
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert(`✅ ${tipo === 'recordatorio' ? 'Recordatorio' : 'Confirmación'} enviado exitosamente`);
        console.log('✅ Email enviado:', result);
        
        // Si hay URL de preview, mostrarla en consola
        if (result.previewUrl) {
          console.log('🔗 Preview del email:', result.previewUrl);
        }
      } else {
        alert(`❌ Error al enviar ${tipo}: ${result.error}`);
        console.error('❌ Error:', result);
      }
    } catch (error) {
      console.error('❌ Error de conexión:', error);
      alert('❌ Error de conexión al enviar email');
    }
  }

  // Función para enviar recordatorios automáticos
  async function enviarRecordatoriosAutomaticos() {
    if (!confirm('¿Quieres enviar recordatorios automáticos a todas las citas de mañana?')) {
      return;
    }
    
    try {
      console.log('📧 Enviando recordatorios automáticos...');
      
      const response = await fetch('/api/emails', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'enviar-recordatorios-automaticos'
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert(`✅ ${result.message}\nEmails enviados: ${result.citasEnviadas}`);
        console.log('✅ Recordatorios automáticos enviados:', result);
        
        if (result.citasFallidas > 0) {
          console.warn('⚠️ Algunos emails fallaron:', result.errores);
        }
      } else {
        alert(`❌ Error: ${result.error}`);
        console.error('❌ Error:', result);
      }
    } catch (error) {
      console.error('❌ Error de conexión:', error);
      alert('❌ Error de conexión al enviar recordatorios');
    }
  }
  
  // Cargar citas automáticamente cuando se accede a la sección
  function manejarCambioDeCitas() {
    const seccionCitas = document.getElementById('section-citas');
    if (seccionCitas && !seccionCitas.classList.contains('hidden')) {
      cargarCitas();
    }
  }
  
  // Observer para detectar cuando se muestra la sección de citas
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        const target = mutation.target as Element;
        if (target.id === 'section-citas' && !target.classList.contains('hidden')) {
          cargarCitas();
        }
      }
    });
  });
  
  // Observar la sección de citas
  const seccionCitas = document.getElementById('section-citas');
  if (seccionCitas) {
    observer.observe(seccionCitas, { attributes: true });
  }
  
  // Exponer funciones globalmente
  (window as any).cargarCitas = cargarCitas;
  (window as any).filtrarCitas = filtrarCitas;
  (window as any).cambiarEstadoCita = cambiarEstadoCita;
  (window as any).eliminarCita = eliminarCita;
  (window as any).cambiarMes = cambiarMes;
  (window as any).exportarCitas = exportarCitas;
  (window as any).enviarEmailCita = enviarEmailCita;
  (window as any).enviarRecordatoriosAutomaticos = enviarRecordatoriosAutomaticos;

</script>
</AdminLayout>